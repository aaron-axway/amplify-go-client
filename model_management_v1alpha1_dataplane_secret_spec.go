/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManagementV1alpha1DataplaneSecretSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1DataplaneSecretSpec{}

// ManagementV1alpha1DataplaneSecretSpec struct for ManagementV1alpha1DataplaneSecretSpec
type ManagementV1alpha1DataplaneSecretSpec struct {
	Dataplane string `json:"dataplane"`
	// Key value pairs for accessing the dataplane. The value will be stored encrypted.
	Data string `json:"data"`
}

type _ManagementV1alpha1DataplaneSecretSpec ManagementV1alpha1DataplaneSecretSpec

// NewManagementV1alpha1DataplaneSecretSpec instantiates a new ManagementV1alpha1DataplaneSecretSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1DataplaneSecretSpec(dataplane string, data string) *ManagementV1alpha1DataplaneSecretSpec {
	this := ManagementV1alpha1DataplaneSecretSpec{}
	this.Dataplane = dataplane
	this.Data = data
	return &this
}

// NewManagementV1alpha1DataplaneSecretSpecWithDefaults instantiates a new ManagementV1alpha1DataplaneSecretSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1DataplaneSecretSpecWithDefaults() *ManagementV1alpha1DataplaneSecretSpec {
	this := ManagementV1alpha1DataplaneSecretSpec{}
	return &this
}

// GetDataplane returns the Dataplane field value
func (o *ManagementV1alpha1DataplaneSecretSpec) GetDataplane() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dataplane
}

// GetDataplaneOk returns a tuple with the Dataplane field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1DataplaneSecretSpec) GetDataplaneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dataplane, true
}

// SetDataplane sets field value
func (o *ManagementV1alpha1DataplaneSecretSpec) SetDataplane(v string) {
	o.Dataplane = v
}

// GetData returns the Data field value
func (o *ManagementV1alpha1DataplaneSecretSpec) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1DataplaneSecretSpec) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ManagementV1alpha1DataplaneSecretSpec) SetData(v string) {
	o.Data = v
}

func (o ManagementV1alpha1DataplaneSecretSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1DataplaneSecretSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataplane"] = o.Dataplane
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *ManagementV1alpha1DataplaneSecretSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataplane",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagementV1alpha1DataplaneSecretSpec := _ManagementV1alpha1DataplaneSecretSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagementV1alpha1DataplaneSecretSpec)

	if err != nil {
		return err
	}

	*o = ManagementV1alpha1DataplaneSecretSpec(varManagementV1alpha1DataplaneSecretSpec)

	return err
}

type NullableManagementV1alpha1DataplaneSecretSpec struct {
	value *ManagementV1alpha1DataplaneSecretSpec
	isSet bool
}

func (v NullableManagementV1alpha1DataplaneSecretSpec) Get() *ManagementV1alpha1DataplaneSecretSpec {
	return v.value
}

func (v *NullableManagementV1alpha1DataplaneSecretSpec) Set(val *ManagementV1alpha1DataplaneSecretSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1DataplaneSecretSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1DataplaneSecretSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1DataplaneSecretSpec(val *ManagementV1alpha1DataplaneSecretSpec) *NullableManagementV1alpha1DataplaneSecretSpec {
	return &NullableManagementV1alpha1DataplaneSecretSpec{value: val, isSet: true}
}

func (v NullableManagementV1alpha1DataplaneSecretSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1DataplaneSecretSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


