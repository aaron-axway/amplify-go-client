/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1DocumentResourceSpecTextData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1DocumentResourceSpecTextData{}

// CatalogV1DocumentResourceSpecTextData struct for CatalogV1DocumentResourceSpecTextData
type CatalogV1DocumentResourceSpecTextData struct {
	Type string `json:"type"`
	// Resource content.
	Content string `json:"content"`
	// The name of the file.
	FileName *string `json:"fileName,omitempty"`
	// The type of the resource, example: pdf
	FileType string `json:"fileType"`
	// The content type
	ContentType string `json:"contentType" validate:"regexp=^[-\\\\w.]+\\/[-+\\\\w.]+$"`
}

type _CatalogV1DocumentResourceSpecTextData CatalogV1DocumentResourceSpecTextData

// NewCatalogV1DocumentResourceSpecTextData instantiates a new CatalogV1DocumentResourceSpecTextData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1DocumentResourceSpecTextData(type_ string, content string, fileType string, contentType string) *CatalogV1DocumentResourceSpecTextData {
	this := CatalogV1DocumentResourceSpecTextData{}
	this.Type = type_
	this.Content = content
	this.FileType = fileType
	this.ContentType = contentType
	return &this
}

// NewCatalogV1DocumentResourceSpecTextDataWithDefaults instantiates a new CatalogV1DocumentResourceSpecTextData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1DocumentResourceSpecTextDataWithDefaults() *CatalogV1DocumentResourceSpecTextData {
	this := CatalogV1DocumentResourceSpecTextData{}
	return &this
}

// GetType returns the Type field value
func (o *CatalogV1DocumentResourceSpecTextData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogV1DocumentResourceSpecTextData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogV1DocumentResourceSpecTextData) SetType(v string) {
	o.Type = v
}

// GetContent returns the Content field value
func (o *CatalogV1DocumentResourceSpecTextData) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CatalogV1DocumentResourceSpecTextData) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CatalogV1DocumentResourceSpecTextData) SetContent(v string) {
	o.Content = v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *CatalogV1DocumentResourceSpecTextData) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1DocumentResourceSpecTextData) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *CatalogV1DocumentResourceSpecTextData) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *CatalogV1DocumentResourceSpecTextData) SetFileName(v string) {
	o.FileName = &v
}

// GetFileType returns the FileType field value
func (o *CatalogV1DocumentResourceSpecTextData) GetFileType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value
// and a boolean to check if the value has been set.
func (o *CatalogV1DocumentResourceSpecTextData) GetFileTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileType, true
}

// SetFileType sets field value
func (o *CatalogV1DocumentResourceSpecTextData) SetFileType(v string) {
	o.FileType = v
}

// GetContentType returns the ContentType field value
func (o *CatalogV1DocumentResourceSpecTextData) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *CatalogV1DocumentResourceSpecTextData) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *CatalogV1DocumentResourceSpecTextData) SetContentType(v string) {
	o.ContentType = v
}

func (o CatalogV1DocumentResourceSpecTextData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1DocumentResourceSpecTextData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["content"] = o.Content
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	toSerialize["fileType"] = o.FileType
	toSerialize["contentType"] = o.ContentType
	return toSerialize, nil
}

func (o *CatalogV1DocumentResourceSpecTextData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"content",
		"fileType",
		"contentType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1DocumentResourceSpecTextData := _CatalogV1DocumentResourceSpecTextData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1DocumentResourceSpecTextData)

	if err != nil {
		return err
	}

	*o = CatalogV1DocumentResourceSpecTextData(varCatalogV1DocumentResourceSpecTextData)

	return err
}

type NullableCatalogV1DocumentResourceSpecTextData struct {
	value *CatalogV1DocumentResourceSpecTextData
	isSet bool
}

func (v NullableCatalogV1DocumentResourceSpecTextData) Get() *CatalogV1DocumentResourceSpecTextData {
	return v.value
}

func (v *NullableCatalogV1DocumentResourceSpecTextData) Set(val *CatalogV1DocumentResourceSpecTextData) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1DocumentResourceSpecTextData) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1DocumentResourceSpecTextData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1DocumentResourceSpecTextData(val *CatalogV1DocumentResourceSpecTextData) *NullableCatalogV1DocumentResourceSpecTextData {
	return &NullableCatalogV1DocumentResourceSpecTextData{value: val, isSet: true}
}

func (v NullableCatalogV1DocumentResourceSpecTextData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1DocumentResourceSpecTextData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


