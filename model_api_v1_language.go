/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiV1Language type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiV1Language{}

// ApiV1Language Defines information about a specific language defined on the resource.
type ApiV1Language struct {
	Metadata *ApiV1LanguageMetadata `json:"metadata,omitempty"`
	// Defines the language specific values set on the resource.
	Values []ApiV1LanguageValuesInner `json:"values,omitempty"`
}

// NewApiV1Language instantiates a new ApiV1Language object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV1Language() *ApiV1Language {
	this := ApiV1Language{}
	return &this
}

// NewApiV1LanguageWithDefaults instantiates a new ApiV1Language object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV1LanguageWithDefaults() *ApiV1Language {
	this := ApiV1Language{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ApiV1Language) GetMetadata() ApiV1LanguageMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ApiV1LanguageMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Language) GetMetadataOk() (*ApiV1LanguageMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ApiV1Language) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ApiV1LanguageMetadata and assigns it to the Metadata field.
func (o *ApiV1Language) SetMetadata(v ApiV1LanguageMetadata) {
	o.Metadata = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ApiV1Language) GetValues() []ApiV1LanguageValuesInner {
	if o == nil || IsNil(o.Values) {
		var ret []ApiV1LanguageValuesInner
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Language) GetValuesOk() ([]ApiV1LanguageValuesInner, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ApiV1Language) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []ApiV1LanguageValuesInner and assigns it to the Values field.
func (o *ApiV1Language) SetValues(v []ApiV1LanguageValuesInner) {
	o.Values = v
}

func (o ApiV1Language) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiV1Language) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableApiV1Language struct {
	value *ApiV1Language
	isSet bool
}

func (v NullableApiV1Language) Get() *ApiV1Language {
	return v.value
}

func (v *NullableApiV1Language) Set(val *ApiV1Language) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV1Language) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV1Language) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV1Language(val *ApiV1Language) *NullableApiV1Language {
	return &NullableApiV1Language{value: val, isSet: true}
}

func (v NullableApiV1Language) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV1Language) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


