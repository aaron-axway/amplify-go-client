/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1QuotaSpecFixedPricingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1QuotaSpecFixedPricingType{}

// CatalogV1QuotaSpecFixedPricingType struct for CatalogV1QuotaSpecFixedPricingType
type CatalogV1QuotaSpecFixedPricingType struct {
	Type string `json:"type"`
	Interval string `json:"interval"`
	Limit CatalogV1QuotaSpecFixedPricingTypeLimit `json:"limit"`
}

type _CatalogV1QuotaSpecFixedPricingType CatalogV1QuotaSpecFixedPricingType

// NewCatalogV1QuotaSpecFixedPricingType instantiates a new CatalogV1QuotaSpecFixedPricingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1QuotaSpecFixedPricingType(type_ string, interval string, limit CatalogV1QuotaSpecFixedPricingTypeLimit) *CatalogV1QuotaSpecFixedPricingType {
	this := CatalogV1QuotaSpecFixedPricingType{}
	this.Type = type_
	this.Interval = interval
	this.Limit = limit
	return &this
}

// NewCatalogV1QuotaSpecFixedPricingTypeWithDefaults instantiates a new CatalogV1QuotaSpecFixedPricingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1QuotaSpecFixedPricingTypeWithDefaults() *CatalogV1QuotaSpecFixedPricingType {
	this := CatalogV1QuotaSpecFixedPricingType{}
	return &this
}

// GetType returns the Type field value
func (o *CatalogV1QuotaSpecFixedPricingType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogV1QuotaSpecFixedPricingType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogV1QuotaSpecFixedPricingType) SetType(v string) {
	o.Type = v
}

// GetInterval returns the Interval field value
func (o *CatalogV1QuotaSpecFixedPricingType) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *CatalogV1QuotaSpecFixedPricingType) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *CatalogV1QuotaSpecFixedPricingType) SetInterval(v string) {
	o.Interval = v
}

// GetLimit returns the Limit field value
func (o *CatalogV1QuotaSpecFixedPricingType) GetLimit() CatalogV1QuotaSpecFixedPricingTypeLimit {
	if o == nil {
		var ret CatalogV1QuotaSpecFixedPricingTypeLimit
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *CatalogV1QuotaSpecFixedPricingType) GetLimitOk() (*CatalogV1QuotaSpecFixedPricingTypeLimit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *CatalogV1QuotaSpecFixedPricingType) SetLimit(v CatalogV1QuotaSpecFixedPricingTypeLimit) {
	o.Limit = v
}

func (o CatalogV1QuotaSpecFixedPricingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1QuotaSpecFixedPricingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["interval"] = o.Interval
	toSerialize["limit"] = o.Limit
	return toSerialize, nil
}

func (o *CatalogV1QuotaSpecFixedPricingType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"interval",
		"limit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1QuotaSpecFixedPricingType := _CatalogV1QuotaSpecFixedPricingType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1QuotaSpecFixedPricingType)

	if err != nil {
		return err
	}

	*o = CatalogV1QuotaSpecFixedPricingType(varCatalogV1QuotaSpecFixedPricingType)

	return err
}

type NullableCatalogV1QuotaSpecFixedPricingType struct {
	value *CatalogV1QuotaSpecFixedPricingType
	isSet bool
}

func (v NullableCatalogV1QuotaSpecFixedPricingType) Get() *CatalogV1QuotaSpecFixedPricingType {
	return v.value
}

func (v *NullableCatalogV1QuotaSpecFixedPricingType) Set(val *CatalogV1QuotaSpecFixedPricingType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1QuotaSpecFixedPricingType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1QuotaSpecFixedPricingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1QuotaSpecFixedPricingType(val *CatalogV1QuotaSpecFixedPricingType) *NullableCatalogV1QuotaSpecFixedPricingType {
	return &NullableCatalogV1QuotaSpecFixedPricingType{value: val, isSet: true}
}

func (v NullableCatalogV1QuotaSpecFixedPricingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1QuotaSpecFixedPricingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


