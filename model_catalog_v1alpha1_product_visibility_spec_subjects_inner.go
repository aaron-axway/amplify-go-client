/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogV1alpha1ProductVisibilitySpecSubjectsInner - struct for CatalogV1alpha1ProductVisibilitySpecSubjectsInner
type CatalogV1alpha1ProductVisibilitySpecSubjectsInner struct {
	CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef *CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef
	CatalogV1alpha1ProductVisibilitySpecTagRef *CatalogV1alpha1ProductVisibilitySpecTagRef
	CatalogV1alpha1ProductVisibilitySpecTeamRef *CatalogV1alpha1ProductVisibilitySpecTeamRef
}

// CatalogV1alpha1ProductVisibilitySpecAuthenticatedRefAsCatalogV1alpha1ProductVisibilitySpecSubjectsInner is a convenience function that returns CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef wrapped in CatalogV1alpha1ProductVisibilitySpecSubjectsInner
func CatalogV1alpha1ProductVisibilitySpecAuthenticatedRefAsCatalogV1alpha1ProductVisibilitySpecSubjectsInner(v *CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef) CatalogV1alpha1ProductVisibilitySpecSubjectsInner {
	return CatalogV1alpha1ProductVisibilitySpecSubjectsInner{
		CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef: v,
	}
}

// CatalogV1alpha1ProductVisibilitySpecTagRefAsCatalogV1alpha1ProductVisibilitySpecSubjectsInner is a convenience function that returns CatalogV1alpha1ProductVisibilitySpecTagRef wrapped in CatalogV1alpha1ProductVisibilitySpecSubjectsInner
func CatalogV1alpha1ProductVisibilitySpecTagRefAsCatalogV1alpha1ProductVisibilitySpecSubjectsInner(v *CatalogV1alpha1ProductVisibilitySpecTagRef) CatalogV1alpha1ProductVisibilitySpecSubjectsInner {
	return CatalogV1alpha1ProductVisibilitySpecSubjectsInner{
		CatalogV1alpha1ProductVisibilitySpecTagRef: v,
	}
}

// CatalogV1alpha1ProductVisibilitySpecTeamRefAsCatalogV1alpha1ProductVisibilitySpecSubjectsInner is a convenience function that returns CatalogV1alpha1ProductVisibilitySpecTeamRef wrapped in CatalogV1alpha1ProductVisibilitySpecSubjectsInner
func CatalogV1alpha1ProductVisibilitySpecTeamRefAsCatalogV1alpha1ProductVisibilitySpecSubjectsInner(v *CatalogV1alpha1ProductVisibilitySpecTeamRef) CatalogV1alpha1ProductVisibilitySpecSubjectsInner {
	return CatalogV1alpha1ProductVisibilitySpecSubjectsInner{
		CatalogV1alpha1ProductVisibilitySpecTeamRef: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogV1alpha1ProductVisibilitySpecSubjectsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef
	err = newStrictDecoder(data).Decode(&dst.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef)
	if err == nil {
		jsonCatalogV1alpha1ProductVisibilitySpecAuthenticatedRef, _ := json.Marshal(dst.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef)
		if string(jsonCatalogV1alpha1ProductVisibilitySpecAuthenticatedRef) == "{}" { // empty struct
			dst.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef = nil
		} else {
			if err = validator.Validate(dst.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef); err != nil {
				dst.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef = nil
	}

	// try to unmarshal data into CatalogV1alpha1ProductVisibilitySpecTagRef
	err = newStrictDecoder(data).Decode(&dst.CatalogV1alpha1ProductVisibilitySpecTagRef)
	if err == nil {
		jsonCatalogV1alpha1ProductVisibilitySpecTagRef, _ := json.Marshal(dst.CatalogV1alpha1ProductVisibilitySpecTagRef)
		if string(jsonCatalogV1alpha1ProductVisibilitySpecTagRef) == "{}" { // empty struct
			dst.CatalogV1alpha1ProductVisibilitySpecTagRef = nil
		} else {
			if err = validator.Validate(dst.CatalogV1alpha1ProductVisibilitySpecTagRef); err != nil {
				dst.CatalogV1alpha1ProductVisibilitySpecTagRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1alpha1ProductVisibilitySpecTagRef = nil
	}

	// try to unmarshal data into CatalogV1alpha1ProductVisibilitySpecTeamRef
	err = newStrictDecoder(data).Decode(&dst.CatalogV1alpha1ProductVisibilitySpecTeamRef)
	if err == nil {
		jsonCatalogV1alpha1ProductVisibilitySpecTeamRef, _ := json.Marshal(dst.CatalogV1alpha1ProductVisibilitySpecTeamRef)
		if string(jsonCatalogV1alpha1ProductVisibilitySpecTeamRef) == "{}" { // empty struct
			dst.CatalogV1alpha1ProductVisibilitySpecTeamRef = nil
		} else {
			if err = validator.Validate(dst.CatalogV1alpha1ProductVisibilitySpecTeamRef); err != nil {
				dst.CatalogV1alpha1ProductVisibilitySpecTeamRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1alpha1ProductVisibilitySpecTeamRef = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef = nil
		dst.CatalogV1alpha1ProductVisibilitySpecTagRef = nil
		dst.CatalogV1alpha1ProductVisibilitySpecTeamRef = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogV1alpha1ProductVisibilitySpecSubjectsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogV1alpha1ProductVisibilitySpecSubjectsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogV1alpha1ProductVisibilitySpecSubjectsInner) MarshalJSON() ([]byte, error) {
	if src.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef != nil {
		return json.Marshal(&src.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef)
	}

	if src.CatalogV1alpha1ProductVisibilitySpecTagRef != nil {
		return json.Marshal(&src.CatalogV1alpha1ProductVisibilitySpecTagRef)
	}

	if src.CatalogV1alpha1ProductVisibilitySpecTeamRef != nil {
		return json.Marshal(&src.CatalogV1alpha1ProductVisibilitySpecTeamRef)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogV1alpha1ProductVisibilitySpecSubjectsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef != nil {
		return obj.CatalogV1alpha1ProductVisibilitySpecAuthenticatedRef
	}

	if obj.CatalogV1alpha1ProductVisibilitySpecTagRef != nil {
		return obj.CatalogV1alpha1ProductVisibilitySpecTagRef
	}

	if obj.CatalogV1alpha1ProductVisibilitySpecTeamRef != nil {
		return obj.CatalogV1alpha1ProductVisibilitySpecTeamRef
	}

	// all schemas are nil
	return nil
}

type NullableCatalogV1alpha1ProductVisibilitySpecSubjectsInner struct {
	value *CatalogV1alpha1ProductVisibilitySpecSubjectsInner
	isSet bool
}

func (v NullableCatalogV1alpha1ProductVisibilitySpecSubjectsInner) Get() *CatalogV1alpha1ProductVisibilitySpecSubjectsInner {
	return v.value
}

func (v *NullableCatalogV1alpha1ProductVisibilitySpecSubjectsInner) Set(val *CatalogV1alpha1ProductVisibilitySpecSubjectsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ProductVisibilitySpecSubjectsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ProductVisibilitySpecSubjectsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ProductVisibilitySpecSubjectsInner(val *CatalogV1alpha1ProductVisibilitySpecSubjectsInner) *NullableCatalogV1alpha1ProductVisibilitySpecSubjectsInner {
	return &NullableCatalogV1alpha1ProductVisibilitySpecSubjectsInner{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ProductVisibilitySpecSubjectsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ProductVisibilitySpecSubjectsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


