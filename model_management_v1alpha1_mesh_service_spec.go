/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
)

// checks if the ManagementV1alpha1MeshServiceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1MeshServiceSpec{}

// ManagementV1alpha1MeshServiceSpec struct for ManagementV1alpha1MeshServiceSpec
type ManagementV1alpha1MeshServiceSpec struct {
	// The labels used by the service to match workloads it exposes.
	Selector *map[string]string `json:"selector,omitempty"`
	// Reference to the K8SResource derived from the Kubernetes Service.
	Resource *string `json:"resource,omitempty"`
	// References to workloads exposed by the service.
	Workloads []string `json:"workloads,omitempty"`
	// Details per port.
	Ports []ManagementV1alpha1MeshServiceSpecPortsInner `json:"ports,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManagementV1alpha1MeshServiceSpec ManagementV1alpha1MeshServiceSpec

// NewManagementV1alpha1MeshServiceSpec instantiates a new ManagementV1alpha1MeshServiceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1MeshServiceSpec() *ManagementV1alpha1MeshServiceSpec {
	this := ManagementV1alpha1MeshServiceSpec{}
	return &this
}

// NewManagementV1alpha1MeshServiceSpecWithDefaults instantiates a new ManagementV1alpha1MeshServiceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1MeshServiceSpecWithDefaults() *ManagementV1alpha1MeshServiceSpec {
	this := ManagementV1alpha1MeshServiceSpec{}
	return &this
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *ManagementV1alpha1MeshServiceSpec) GetSelector() map[string]string {
	if o == nil || IsNil(o.Selector) {
		var ret map[string]string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1MeshServiceSpec) GetSelectorOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *ManagementV1alpha1MeshServiceSpec) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given map[string]string and assigns it to the Selector field.
func (o *ManagementV1alpha1MeshServiceSpec) SetSelector(v map[string]string) {
	o.Selector = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *ManagementV1alpha1MeshServiceSpec) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1MeshServiceSpec) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *ManagementV1alpha1MeshServiceSpec) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *ManagementV1alpha1MeshServiceSpec) SetResource(v string) {
	o.Resource = &v
}

// GetWorkloads returns the Workloads field value if set, zero value otherwise.
func (o *ManagementV1alpha1MeshServiceSpec) GetWorkloads() []string {
	if o == nil || IsNil(o.Workloads) {
		var ret []string
		return ret
	}
	return o.Workloads
}

// GetWorkloadsOk returns a tuple with the Workloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1MeshServiceSpec) GetWorkloadsOk() ([]string, bool) {
	if o == nil || IsNil(o.Workloads) {
		return nil, false
	}
	return o.Workloads, true
}

// HasWorkloads returns a boolean if a field has been set.
func (o *ManagementV1alpha1MeshServiceSpec) HasWorkloads() bool {
	if o != nil && !IsNil(o.Workloads) {
		return true
	}

	return false
}

// SetWorkloads gets a reference to the given []string and assigns it to the Workloads field.
func (o *ManagementV1alpha1MeshServiceSpec) SetWorkloads(v []string) {
	o.Workloads = v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *ManagementV1alpha1MeshServiceSpec) GetPorts() []ManagementV1alpha1MeshServiceSpecPortsInner {
	if o == nil || IsNil(o.Ports) {
		var ret []ManagementV1alpha1MeshServiceSpecPortsInner
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1MeshServiceSpec) GetPortsOk() ([]ManagementV1alpha1MeshServiceSpecPortsInner, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *ManagementV1alpha1MeshServiceSpec) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []ManagementV1alpha1MeshServiceSpecPortsInner and assigns it to the Ports field.
func (o *ManagementV1alpha1MeshServiceSpec) SetPorts(v []ManagementV1alpha1MeshServiceSpecPortsInner) {
	o.Ports = v
}

func (o ManagementV1alpha1MeshServiceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1MeshServiceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Workloads) {
		toSerialize["workloads"] = o.Workloads
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManagementV1alpha1MeshServiceSpec) UnmarshalJSON(data []byte) (err error) {
	varManagementV1alpha1MeshServiceSpec := _ManagementV1alpha1MeshServiceSpec{}

	err = json.Unmarshal(data, &varManagementV1alpha1MeshServiceSpec)

	if err != nil {
		return err
	}

	*o = ManagementV1alpha1MeshServiceSpec(varManagementV1alpha1MeshServiceSpec)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "selector")
		delete(additionalProperties, "resource")
		delete(additionalProperties, "workloads")
		delete(additionalProperties, "ports")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManagementV1alpha1MeshServiceSpec struct {
	value *ManagementV1alpha1MeshServiceSpec
	isSet bool
}

func (v NullableManagementV1alpha1MeshServiceSpec) Get() *ManagementV1alpha1MeshServiceSpec {
	return v.value
}

func (v *NullableManagementV1alpha1MeshServiceSpec) Set(val *ManagementV1alpha1MeshServiceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1MeshServiceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1MeshServiceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1MeshServiceSpec(val *ManagementV1alpha1MeshServiceSpec) *NullableManagementV1alpha1MeshServiceSpec {
	return &NullableManagementV1alpha1MeshServiceSpec{value: val, isSet: true}
}

func (v NullableManagementV1alpha1MeshServiceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1MeshServiceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


