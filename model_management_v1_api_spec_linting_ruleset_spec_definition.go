/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManagementV1APISpecLintingRulesetSpecDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1APISpecLintingRulesetSpecDefinition{}

// ManagementV1APISpecLintingRulesetSpecDefinition The API Specification Ruleset details.
type ManagementV1APISpecLintingRulesetSpecDefinition struct {
	// The type of the API Specification Linting Ruleset.
	LintingType string `json:"lintingType"`
	// Base64 encoded value of the API Specification Linting Ruleset.
	Value string `json:"value"`
	// The MIME type of property \"value\" such as \"application/json\" or \"application/yaml\".
	ContentType string `json:"contentType"`
	// File name and extension of the APISpecLintingRuleset such as \"my-file.json\".
	FileName *string `json:"fileName,omitempty"`
	// Defines if the APISpecLintingRuleset is default.
	IsDefault *bool `json:"isDefault,omitempty"`
	// Indicates which API specification types can be linted by this ruleset.
	ApiTypes []string `json:"apiTypes"`
}

type _ManagementV1APISpecLintingRulesetSpecDefinition ManagementV1APISpecLintingRulesetSpecDefinition

// NewManagementV1APISpecLintingRulesetSpecDefinition instantiates a new ManagementV1APISpecLintingRulesetSpecDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1APISpecLintingRulesetSpecDefinition(lintingType string, value string, contentType string, apiTypes []string) *ManagementV1APISpecLintingRulesetSpecDefinition {
	this := ManagementV1APISpecLintingRulesetSpecDefinition{}
	this.LintingType = lintingType
	this.Value = value
	this.ContentType = contentType
	this.ApiTypes = apiTypes
	return &this
}

// NewManagementV1APISpecLintingRulesetSpecDefinitionWithDefaults instantiates a new ManagementV1APISpecLintingRulesetSpecDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1APISpecLintingRulesetSpecDefinitionWithDefaults() *ManagementV1APISpecLintingRulesetSpecDefinition {
	this := ManagementV1APISpecLintingRulesetSpecDefinition{}
	return &this
}

// GetLintingType returns the LintingType field value
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetLintingType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LintingType
}

// GetLintingTypeOk returns a tuple with the LintingType field value
// and a boolean to check if the value has been set.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetLintingTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LintingType, true
}

// SetLintingType sets field value
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) SetLintingType(v string) {
	o.LintingType = v
}

// GetValue returns the Value field value
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) SetValue(v string) {
	o.Value = v
}

// GetContentType returns the ContentType field value
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) SetContentType(v string) {
	o.ContentType = v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) SetFileName(v string) {
	o.FileName = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetApiTypes returns the ApiTypes field value
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetApiTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ApiTypes
}

// GetApiTypesOk returns a tuple with the ApiTypes field value
// and a boolean to check if the value has been set.
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) GetApiTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiTypes, true
}

// SetApiTypes sets field value
func (o *ManagementV1APISpecLintingRulesetSpecDefinition) SetApiTypes(v []string) {
	o.ApiTypes = v
}

func (o ManagementV1APISpecLintingRulesetSpecDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1APISpecLintingRulesetSpecDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lintingType"] = o.LintingType
	toSerialize["value"] = o.Value
	toSerialize["contentType"] = o.ContentType
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	toSerialize["apiTypes"] = o.ApiTypes
	return toSerialize, nil
}

func (o *ManagementV1APISpecLintingRulesetSpecDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lintingType",
		"value",
		"contentType",
		"apiTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagementV1APISpecLintingRulesetSpecDefinition := _ManagementV1APISpecLintingRulesetSpecDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagementV1APISpecLintingRulesetSpecDefinition)

	if err != nil {
		return err
	}

	*o = ManagementV1APISpecLintingRulesetSpecDefinition(varManagementV1APISpecLintingRulesetSpecDefinition)

	return err
}

type NullableManagementV1APISpecLintingRulesetSpecDefinition struct {
	value *ManagementV1APISpecLintingRulesetSpecDefinition
	isSet bool
}

func (v NullableManagementV1APISpecLintingRulesetSpecDefinition) Get() *ManagementV1APISpecLintingRulesetSpecDefinition {
	return v.value
}

func (v *NullableManagementV1APISpecLintingRulesetSpecDefinition) Set(val *ManagementV1APISpecLintingRulesetSpecDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1APISpecLintingRulesetSpecDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1APISpecLintingRulesetSpecDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1APISpecLintingRulesetSpecDefinition(val *ManagementV1APISpecLintingRulesetSpecDefinition) *NullableManagementV1APISpecLintingRulesetSpecDefinition {
	return &NullableManagementV1APISpecLintingRulesetSpecDefinition{value: val, isSet: true}
}

func (v NullableManagementV1APISpecLintingRulesetSpecDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1APISpecLintingRulesetSpecDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


