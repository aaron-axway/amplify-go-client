/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1AssetRequestDefinitionSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1AssetRequestDefinitionSpec{}

// CatalogV1alpha1AssetRequestDefinitionSpec struct for CatalogV1alpha1AssetRequestDefinitionSpec
type CatalogV1alpha1AssetRequestDefinitionSpec struct {
	// JSON Schema draft \\#7 for defining the AssetRequest properties needed to get access to an AssetResource.
	Schema map[string]interface{} `json:"schema"`
	Provision *CatalogV1alpha1AssetRequestDefinitionSpecProvision `json:"provision,omitempty"`
}

type _CatalogV1alpha1AssetRequestDefinitionSpec CatalogV1alpha1AssetRequestDefinitionSpec

// NewCatalogV1alpha1AssetRequestDefinitionSpec instantiates a new CatalogV1alpha1AssetRequestDefinitionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1AssetRequestDefinitionSpec(schema map[string]interface{}) *CatalogV1alpha1AssetRequestDefinitionSpec {
	this := CatalogV1alpha1AssetRequestDefinitionSpec{}
	this.Schema = schema
	return &this
}

// NewCatalogV1alpha1AssetRequestDefinitionSpecWithDefaults instantiates a new CatalogV1alpha1AssetRequestDefinitionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1AssetRequestDefinitionSpecWithDefaults() *CatalogV1alpha1AssetRequestDefinitionSpec {
	this := CatalogV1alpha1AssetRequestDefinitionSpec{}
	return &this
}

// GetSchema returns the Schema field value
func (o *CatalogV1alpha1AssetRequestDefinitionSpec) GetSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetRequestDefinitionSpec) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Schema, true
}

// SetSchema sets field value
func (o *CatalogV1alpha1AssetRequestDefinitionSpec) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

// GetProvision returns the Provision field value if set, zero value otherwise.
func (o *CatalogV1alpha1AssetRequestDefinitionSpec) GetProvision() CatalogV1alpha1AssetRequestDefinitionSpecProvision {
	if o == nil || IsNil(o.Provision) {
		var ret CatalogV1alpha1AssetRequestDefinitionSpecProvision
		return ret
	}
	return *o.Provision
}

// GetProvisionOk returns a tuple with the Provision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetRequestDefinitionSpec) GetProvisionOk() (*CatalogV1alpha1AssetRequestDefinitionSpecProvision, bool) {
	if o == nil || IsNil(o.Provision) {
		return nil, false
	}
	return o.Provision, true
}

// HasProvision returns a boolean if a field has been set.
func (o *CatalogV1alpha1AssetRequestDefinitionSpec) HasProvision() bool {
	if o != nil && !IsNil(o.Provision) {
		return true
	}

	return false
}

// SetProvision gets a reference to the given CatalogV1alpha1AssetRequestDefinitionSpecProvision and assigns it to the Provision field.
func (o *CatalogV1alpha1AssetRequestDefinitionSpec) SetProvision(v CatalogV1alpha1AssetRequestDefinitionSpecProvision) {
	o.Provision = &v
}

func (o CatalogV1alpha1AssetRequestDefinitionSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1AssetRequestDefinitionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schema"] = o.Schema
	if !IsNil(o.Provision) {
		toSerialize["provision"] = o.Provision
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1AssetRequestDefinitionSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"schema",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1AssetRequestDefinitionSpec := _CatalogV1alpha1AssetRequestDefinitionSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1AssetRequestDefinitionSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1AssetRequestDefinitionSpec(varCatalogV1alpha1AssetRequestDefinitionSpec)

	return err
}

type NullableCatalogV1alpha1AssetRequestDefinitionSpec struct {
	value *CatalogV1alpha1AssetRequestDefinitionSpec
	isSet bool
}

func (v NullableCatalogV1alpha1AssetRequestDefinitionSpec) Get() *CatalogV1alpha1AssetRequestDefinitionSpec {
	return v.value
}

func (v *NullableCatalogV1alpha1AssetRequestDefinitionSpec) Set(val *CatalogV1alpha1AssetRequestDefinitionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1AssetRequestDefinitionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1AssetRequestDefinitionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1AssetRequestDefinitionSpec(val *CatalogV1alpha1AssetRequestDefinitionSpec) *NullableCatalogV1alpha1AssetRequestDefinitionSpec {
	return &NullableCatalogV1alpha1AssetRequestDefinitionSpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1AssetRequestDefinitionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1AssetRequestDefinitionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


