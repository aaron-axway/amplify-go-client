/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"fmt"
)

// CatalogV1alpha1ApplicationState the model 'CatalogV1alpha1ApplicationState'
type CatalogV1alpha1ApplicationState string

// List of catalog.v1alpha1.ApplicationState
const (
	ARCHIVED CatalogV1alpha1ApplicationState = "archived"
	ARCHIVING CatalogV1alpha1ApplicationState = "archiving"
)

// All allowed values of CatalogV1alpha1ApplicationState enum
var AllowedCatalogV1alpha1ApplicationStateEnumValues = []CatalogV1alpha1ApplicationState{
	"archived",
	"archiving",
}

func (v *CatalogV1alpha1ApplicationState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CatalogV1alpha1ApplicationState(value)
	for _, existing := range AllowedCatalogV1alpha1ApplicationStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CatalogV1alpha1ApplicationState", value)
}

// NewCatalogV1alpha1ApplicationStateFromValue returns a pointer to a valid CatalogV1alpha1ApplicationState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogV1alpha1ApplicationStateFromValue(v string) (*CatalogV1alpha1ApplicationState, error) {
	ev := CatalogV1alpha1ApplicationState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogV1alpha1ApplicationState: valid values are %v", v, AllowedCatalogV1alpha1ApplicationStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogV1alpha1ApplicationState) IsValid() bool {
	for _, existing := range AllowedCatalogV1alpha1ApplicationStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to catalog.v1alpha1.ApplicationState value
func (v CatalogV1alpha1ApplicationState) Ptr() *CatalogV1alpha1ApplicationState {
	return &v
}

type NullableCatalogV1alpha1ApplicationState struct {
	value *CatalogV1alpha1ApplicationState
	isSet bool
}

func (v NullableCatalogV1alpha1ApplicationState) Get() *CatalogV1alpha1ApplicationState {
	return v.value
}

func (v *NullableCatalogV1alpha1ApplicationState) Set(val *CatalogV1alpha1ApplicationState) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ApplicationState) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ApplicationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ApplicationState(val *CatalogV1alpha1ApplicationState) *NullableCatalogV1alpha1ApplicationState {
	return &NullableCatalogV1alpha1ApplicationState{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ApplicationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ApplicationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

