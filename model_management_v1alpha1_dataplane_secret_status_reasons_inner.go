/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ManagementV1alpha1DataplaneSecretStatusReasonsInner - struct for ManagementV1alpha1DataplaneSecretStatusReasonsInner
type ManagementV1alpha1DataplaneSecretStatusReasonsInner struct {
	ManagementV1alpha1DataplaneSecretStatusError *ManagementV1alpha1DataplaneSecretStatusError
	ManagementV1alpha1DataplaneSecretStatusSuccess *ManagementV1alpha1DataplaneSecretStatusSuccess
}

// ManagementV1alpha1DataplaneSecretStatusErrorAsManagementV1alpha1DataplaneSecretStatusReasonsInner is a convenience function that returns ManagementV1alpha1DataplaneSecretStatusError wrapped in ManagementV1alpha1DataplaneSecretStatusReasonsInner
func ManagementV1alpha1DataplaneSecretStatusErrorAsManagementV1alpha1DataplaneSecretStatusReasonsInner(v *ManagementV1alpha1DataplaneSecretStatusError) ManagementV1alpha1DataplaneSecretStatusReasonsInner {
	return ManagementV1alpha1DataplaneSecretStatusReasonsInner{
		ManagementV1alpha1DataplaneSecretStatusError: v,
	}
}

// ManagementV1alpha1DataplaneSecretStatusSuccessAsManagementV1alpha1DataplaneSecretStatusReasonsInner is a convenience function that returns ManagementV1alpha1DataplaneSecretStatusSuccess wrapped in ManagementV1alpha1DataplaneSecretStatusReasonsInner
func ManagementV1alpha1DataplaneSecretStatusSuccessAsManagementV1alpha1DataplaneSecretStatusReasonsInner(v *ManagementV1alpha1DataplaneSecretStatusSuccess) ManagementV1alpha1DataplaneSecretStatusReasonsInner {
	return ManagementV1alpha1DataplaneSecretStatusReasonsInner{
		ManagementV1alpha1DataplaneSecretStatusSuccess: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ManagementV1alpha1DataplaneSecretStatusReasonsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ManagementV1alpha1DataplaneSecretStatusError
	err = newStrictDecoder(data).Decode(&dst.ManagementV1alpha1DataplaneSecretStatusError)
	if err == nil {
		jsonManagementV1alpha1DataplaneSecretStatusError, _ := json.Marshal(dst.ManagementV1alpha1DataplaneSecretStatusError)
		if string(jsonManagementV1alpha1DataplaneSecretStatusError) == "{}" { // empty struct
			dst.ManagementV1alpha1DataplaneSecretStatusError = nil
		} else {
			if err = validator.Validate(dst.ManagementV1alpha1DataplaneSecretStatusError); err != nil {
				dst.ManagementV1alpha1DataplaneSecretStatusError = nil
			} else {
				match++
			}
		}
	} else {
		dst.ManagementV1alpha1DataplaneSecretStatusError = nil
	}

	// try to unmarshal data into ManagementV1alpha1DataplaneSecretStatusSuccess
	err = newStrictDecoder(data).Decode(&dst.ManagementV1alpha1DataplaneSecretStatusSuccess)
	if err == nil {
		jsonManagementV1alpha1DataplaneSecretStatusSuccess, _ := json.Marshal(dst.ManagementV1alpha1DataplaneSecretStatusSuccess)
		if string(jsonManagementV1alpha1DataplaneSecretStatusSuccess) == "{}" { // empty struct
			dst.ManagementV1alpha1DataplaneSecretStatusSuccess = nil
		} else {
			if err = validator.Validate(dst.ManagementV1alpha1DataplaneSecretStatusSuccess); err != nil {
				dst.ManagementV1alpha1DataplaneSecretStatusSuccess = nil
			} else {
				match++
			}
		}
	} else {
		dst.ManagementV1alpha1DataplaneSecretStatusSuccess = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ManagementV1alpha1DataplaneSecretStatusError = nil
		dst.ManagementV1alpha1DataplaneSecretStatusSuccess = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ManagementV1alpha1DataplaneSecretStatusReasonsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ManagementV1alpha1DataplaneSecretStatusReasonsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ManagementV1alpha1DataplaneSecretStatusReasonsInner) MarshalJSON() ([]byte, error) {
	if src.ManagementV1alpha1DataplaneSecretStatusError != nil {
		return json.Marshal(&src.ManagementV1alpha1DataplaneSecretStatusError)
	}

	if src.ManagementV1alpha1DataplaneSecretStatusSuccess != nil {
		return json.Marshal(&src.ManagementV1alpha1DataplaneSecretStatusSuccess)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ManagementV1alpha1DataplaneSecretStatusReasonsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ManagementV1alpha1DataplaneSecretStatusError != nil {
		return obj.ManagementV1alpha1DataplaneSecretStatusError
	}

	if obj.ManagementV1alpha1DataplaneSecretStatusSuccess != nil {
		return obj.ManagementV1alpha1DataplaneSecretStatusSuccess
	}

	// all schemas are nil
	return nil
}

type NullableManagementV1alpha1DataplaneSecretStatusReasonsInner struct {
	value *ManagementV1alpha1DataplaneSecretStatusReasonsInner
	isSet bool
}

func (v NullableManagementV1alpha1DataplaneSecretStatusReasonsInner) Get() *ManagementV1alpha1DataplaneSecretStatusReasonsInner {
	return v.value
}

func (v *NullableManagementV1alpha1DataplaneSecretStatusReasonsInner) Set(val *ManagementV1alpha1DataplaneSecretStatusReasonsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1DataplaneSecretStatusReasonsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1DataplaneSecretStatusReasonsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1DataplaneSecretStatusReasonsInner(val *ManagementV1alpha1DataplaneSecretStatusReasonsInner) *NullableManagementV1alpha1DataplaneSecretStatusReasonsInner {
	return &NullableManagementV1alpha1DataplaneSecretStatusReasonsInner{value: val, isSet: true}
}

func (v NullableManagementV1alpha1DataplaneSecretStatusReasonsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1DataplaneSecretStatusReasonsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


