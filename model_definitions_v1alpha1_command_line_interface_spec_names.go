/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DefinitionsV1alpha1CommandLineInterfaceSpecNames type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionsV1alpha1CommandLineInterfaceSpecNames{}

// DefinitionsV1alpha1CommandLineInterfaceSpecNames struct for DefinitionsV1alpha1CommandLineInterfaceSpecNames
type DefinitionsV1alpha1CommandLineInterfaceSpecNames struct {
	// Defines the name used to access resources in this group. Also provided as default in the autocomplete for listing commands.
	Plural string `json:"plural"`
	// Defines the name used to access a resource in this group. Also provided as default in the autocomplete for single resource access commands.
	Singular string `json:"singular"`
	// Defines the short names that the cli can use to fetch a resource in the group.
	ShortNames []string `json:"shortNames"`
	// Defines the short names alias that the cli can use to fetch a resource in the group.
	ShortNamesAlias []string `json:"shortNamesAlias,omitempty"`
}

type _DefinitionsV1alpha1CommandLineInterfaceSpecNames DefinitionsV1alpha1CommandLineInterfaceSpecNames

// NewDefinitionsV1alpha1CommandLineInterfaceSpecNames instantiates a new DefinitionsV1alpha1CommandLineInterfaceSpecNames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionsV1alpha1CommandLineInterfaceSpecNames(plural string, singular string, shortNames []string) *DefinitionsV1alpha1CommandLineInterfaceSpecNames {
	this := DefinitionsV1alpha1CommandLineInterfaceSpecNames{}
	this.Plural = plural
	this.Singular = singular
	this.ShortNames = shortNames
	return &this
}

// NewDefinitionsV1alpha1CommandLineInterfaceSpecNamesWithDefaults instantiates a new DefinitionsV1alpha1CommandLineInterfaceSpecNames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionsV1alpha1CommandLineInterfaceSpecNamesWithDefaults() *DefinitionsV1alpha1CommandLineInterfaceSpecNames {
	this := DefinitionsV1alpha1CommandLineInterfaceSpecNames{}
	return &this
}

// GetPlural returns the Plural field value
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) GetPlural() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Plural
}

// GetPluralOk returns a tuple with the Plural field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) GetPluralOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plural, true
}

// SetPlural sets field value
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) SetPlural(v string) {
	o.Plural = v
}

// GetSingular returns the Singular field value
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) GetSingular() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Singular
}

// GetSingularOk returns a tuple with the Singular field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) GetSingularOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Singular, true
}

// SetSingular sets field value
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) SetSingular(v string) {
	o.Singular = v
}

// GetShortNames returns the ShortNames field value
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) GetShortNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ShortNames
}

// GetShortNamesOk returns a tuple with the ShortNames field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) GetShortNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShortNames, true
}

// SetShortNames sets field value
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) SetShortNames(v []string) {
	o.ShortNames = v
}

// GetShortNamesAlias returns the ShortNamesAlias field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) GetShortNamesAlias() []string {
	if o == nil || IsNil(o.ShortNamesAlias) {
		var ret []string
		return ret
	}
	return o.ShortNamesAlias
}

// GetShortNamesAliasOk returns a tuple with the ShortNamesAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) GetShortNamesAliasOk() ([]string, bool) {
	if o == nil || IsNil(o.ShortNamesAlias) {
		return nil, false
	}
	return o.ShortNamesAlias, true
}

// HasShortNamesAlias returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) HasShortNamesAlias() bool {
	if o != nil && !IsNil(o.ShortNamesAlias) {
		return true
	}

	return false
}

// SetShortNamesAlias gets a reference to the given []string and assigns it to the ShortNamesAlias field.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) SetShortNamesAlias(v []string) {
	o.ShortNamesAlias = v
}

func (o DefinitionsV1alpha1CommandLineInterfaceSpecNames) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionsV1alpha1CommandLineInterfaceSpecNames) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plural"] = o.Plural
	toSerialize["singular"] = o.Singular
	toSerialize["shortNames"] = o.ShortNames
	if !IsNil(o.ShortNamesAlias) {
		toSerialize["shortNamesAlias"] = o.ShortNamesAlias
	}
	return toSerialize, nil
}

func (o *DefinitionsV1alpha1CommandLineInterfaceSpecNames) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plural",
		"singular",
		"shortNames",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDefinitionsV1alpha1CommandLineInterfaceSpecNames := _DefinitionsV1alpha1CommandLineInterfaceSpecNames{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDefinitionsV1alpha1CommandLineInterfaceSpecNames)

	if err != nil {
		return err
	}

	*o = DefinitionsV1alpha1CommandLineInterfaceSpecNames(varDefinitionsV1alpha1CommandLineInterfaceSpecNames)

	return err
}

type NullableDefinitionsV1alpha1CommandLineInterfaceSpecNames struct {
	value *DefinitionsV1alpha1CommandLineInterfaceSpecNames
	isSet bool
}

func (v NullableDefinitionsV1alpha1CommandLineInterfaceSpecNames) Get() *DefinitionsV1alpha1CommandLineInterfaceSpecNames {
	return v.value
}

func (v *NullableDefinitionsV1alpha1CommandLineInterfaceSpecNames) Set(val *DefinitionsV1alpha1CommandLineInterfaceSpecNames) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionsV1alpha1CommandLineInterfaceSpecNames) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionsV1alpha1CommandLineInterfaceSpecNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionsV1alpha1CommandLineInterfaceSpecNames(val *DefinitionsV1alpha1CommandLineInterfaceSpecNames) *NullableDefinitionsV1alpha1CommandLineInterfaceSpecNames {
	return &NullableDefinitionsV1alpha1CommandLineInterfaceSpecNames{value: val, isSet: true}
}

func (v NullableDefinitionsV1alpha1CommandLineInterfaceSpecNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionsV1alpha1CommandLineInterfaceSpecNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


