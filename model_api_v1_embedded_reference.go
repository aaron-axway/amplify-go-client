/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
)

// checks if the ApiV1EmbeddedReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiV1EmbeddedReference{}

// ApiV1EmbeddedReference struct for ApiV1EmbeddedReference
type ApiV1EmbeddedReference struct {
	// Defines the group from which the resource belongs to.
	Group *string `json:"group,omitempty" validate:"regexp=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"`
	// Defines the api version of the resource.
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Defines the kind of the resource. The server infers this from the endpoint the client submits the request to.
	Kind *string `json:"kind,omitempty"`
	Name *string `json:"name,omitempty" validate:"regexp=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"`
	Title *string `json:"title,omitempty"`
	Metadata *ApiV1EmbeddedReferenceMetadata `json:"metadata,omitempty"`
}

// NewApiV1EmbeddedReference instantiates a new ApiV1EmbeddedReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV1EmbeddedReference() *ApiV1EmbeddedReference {
	this := ApiV1EmbeddedReference{}
	return &this
}

// NewApiV1EmbeddedReferenceWithDefaults instantiates a new ApiV1EmbeddedReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV1EmbeddedReferenceWithDefaults() *ApiV1EmbeddedReference {
	this := ApiV1EmbeddedReference{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *ApiV1EmbeddedReference) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1EmbeddedReference) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *ApiV1EmbeddedReference) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *ApiV1EmbeddedReference) SetGroup(v string) {
	o.Group = &v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *ApiV1EmbeddedReference) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1EmbeddedReference) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *ApiV1EmbeddedReference) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *ApiV1EmbeddedReference) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ApiV1EmbeddedReference) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1EmbeddedReference) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ApiV1EmbeddedReference) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ApiV1EmbeddedReference) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiV1EmbeddedReference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1EmbeddedReference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiV1EmbeddedReference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiV1EmbeddedReference) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ApiV1EmbeddedReference) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1EmbeddedReference) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ApiV1EmbeddedReference) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ApiV1EmbeddedReference) SetTitle(v string) {
	o.Title = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ApiV1EmbeddedReference) GetMetadata() ApiV1EmbeddedReferenceMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ApiV1EmbeddedReferenceMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1EmbeddedReference) GetMetadataOk() (*ApiV1EmbeddedReferenceMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ApiV1EmbeddedReference) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ApiV1EmbeddedReferenceMetadata and assigns it to the Metadata field.
func (o *ApiV1EmbeddedReference) SetMetadata(v ApiV1EmbeddedReferenceMetadata) {
	o.Metadata = &v
}

func (o ApiV1EmbeddedReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiV1EmbeddedReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableApiV1EmbeddedReference struct {
	value *ApiV1EmbeddedReference
	isSet bool
}

func (v NullableApiV1EmbeddedReference) Get() *ApiV1EmbeddedReference {
	return v.value
}

func (v *NullableApiV1EmbeddedReference) Set(val *ApiV1EmbeddedReference) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV1EmbeddedReference) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV1EmbeddedReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV1EmbeddedReference(val *ApiV1EmbeddedReference) *NullableApiV1EmbeddedReference {
	return &NullableApiV1EmbeddedReference{value: val, isSet: true}
}

func (v NullableApiV1EmbeddedReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV1EmbeddedReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


