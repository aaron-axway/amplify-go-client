/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DefinitionsV1alpha1ResourceDefinitionSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionsV1alpha1ResourceDefinitionSpec{}

// DefinitionsV1alpha1ResourceDefinitionSpec struct for DefinitionsV1alpha1ResourceDefinitionSpec
type DefinitionsV1alpha1ResourceDefinitionSpec struct {
	// Value used in the endpoint path for accessing the resource.
	Plural string `json:"plural"`
	// Defines the kind of the resource. The server infers this from the endpoint the client submits the request to.
	Kind string `json:"kind"`
	Scope *DefinitionsV1alpha1ResourceDefinitionSpecScope `json:"scope,omitempty"`
	QueryParams []string `json:"queryParams,omitempty"`
	SubResources *DefinitionsV1alpha1ResourceDefinitionSpecSubResources `json:"subResources,omitempty"`
	References *DefinitionsV1alpha1ResourceDefinitionSpecReferences `json:"references,omitempty"`
}

type _DefinitionsV1alpha1ResourceDefinitionSpec DefinitionsV1alpha1ResourceDefinitionSpec

// NewDefinitionsV1alpha1ResourceDefinitionSpec instantiates a new DefinitionsV1alpha1ResourceDefinitionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionsV1alpha1ResourceDefinitionSpec(plural string, kind string) *DefinitionsV1alpha1ResourceDefinitionSpec {
	this := DefinitionsV1alpha1ResourceDefinitionSpec{}
	this.Plural = plural
	this.Kind = kind
	return &this
}

// NewDefinitionsV1alpha1ResourceDefinitionSpecWithDefaults instantiates a new DefinitionsV1alpha1ResourceDefinitionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionsV1alpha1ResourceDefinitionSpecWithDefaults() *DefinitionsV1alpha1ResourceDefinitionSpec {
	this := DefinitionsV1alpha1ResourceDefinitionSpec{}
	return &this
}

// GetPlural returns the Plural field value
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetPlural() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Plural
}

// GetPluralOk returns a tuple with the Plural field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetPluralOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plural, true
}

// SetPlural sets field value
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) SetPlural(v string) {
	o.Plural = v
}

// GetKind returns the Kind field value
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) SetKind(v string) {
	o.Kind = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetScope() DefinitionsV1alpha1ResourceDefinitionSpecScope {
	if o == nil || IsNil(o.Scope) {
		var ret DefinitionsV1alpha1ResourceDefinitionSpecScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetScopeOk() (*DefinitionsV1alpha1ResourceDefinitionSpecScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given DefinitionsV1alpha1ResourceDefinitionSpecScope and assigns it to the Scope field.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) SetScope(v DefinitionsV1alpha1ResourceDefinitionSpecScope) {
	o.Scope = &v
}

// GetQueryParams returns the QueryParams field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetQueryParams() []string {
	if o == nil || IsNil(o.QueryParams) {
		var ret []string
		return ret
	}
	return o.QueryParams
}

// GetQueryParamsOk returns a tuple with the QueryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetQueryParamsOk() ([]string, bool) {
	if o == nil || IsNil(o.QueryParams) {
		return nil, false
	}
	return o.QueryParams, true
}

// HasQueryParams returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) HasQueryParams() bool {
	if o != nil && !IsNil(o.QueryParams) {
		return true
	}

	return false
}

// SetQueryParams gets a reference to the given []string and assigns it to the QueryParams field.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) SetQueryParams(v []string) {
	o.QueryParams = v
}

// GetSubResources returns the SubResources field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetSubResources() DefinitionsV1alpha1ResourceDefinitionSpecSubResources {
	if o == nil || IsNil(o.SubResources) {
		var ret DefinitionsV1alpha1ResourceDefinitionSpecSubResources
		return ret
	}
	return *o.SubResources
}

// GetSubResourcesOk returns a tuple with the SubResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetSubResourcesOk() (*DefinitionsV1alpha1ResourceDefinitionSpecSubResources, bool) {
	if o == nil || IsNil(o.SubResources) {
		return nil, false
	}
	return o.SubResources, true
}

// HasSubResources returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) HasSubResources() bool {
	if o != nil && !IsNil(o.SubResources) {
		return true
	}

	return false
}

// SetSubResources gets a reference to the given DefinitionsV1alpha1ResourceDefinitionSpecSubResources and assigns it to the SubResources field.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) SetSubResources(v DefinitionsV1alpha1ResourceDefinitionSpecSubResources) {
	o.SubResources = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetReferences() DefinitionsV1alpha1ResourceDefinitionSpecReferences {
	if o == nil || IsNil(o.References) {
		var ret DefinitionsV1alpha1ResourceDefinitionSpecReferences
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) GetReferencesOk() (*DefinitionsV1alpha1ResourceDefinitionSpecReferences, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given DefinitionsV1alpha1ResourceDefinitionSpecReferences and assigns it to the References field.
func (o *DefinitionsV1alpha1ResourceDefinitionSpec) SetReferences(v DefinitionsV1alpha1ResourceDefinitionSpecReferences) {
	o.References = &v
}

func (o DefinitionsV1alpha1ResourceDefinitionSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionsV1alpha1ResourceDefinitionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plural"] = o.Plural
	toSerialize["kind"] = o.Kind
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.QueryParams) {
		toSerialize["queryParams"] = o.QueryParams
	}
	if !IsNil(o.SubResources) {
		toSerialize["subResources"] = o.SubResources
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	return toSerialize, nil
}

func (o *DefinitionsV1alpha1ResourceDefinitionSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plural",
		"kind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDefinitionsV1alpha1ResourceDefinitionSpec := _DefinitionsV1alpha1ResourceDefinitionSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDefinitionsV1alpha1ResourceDefinitionSpec)

	if err != nil {
		return err
	}

	*o = DefinitionsV1alpha1ResourceDefinitionSpec(varDefinitionsV1alpha1ResourceDefinitionSpec)

	return err
}

type NullableDefinitionsV1alpha1ResourceDefinitionSpec struct {
	value *DefinitionsV1alpha1ResourceDefinitionSpec
	isSet bool
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionSpec) Get() *DefinitionsV1alpha1ResourceDefinitionSpec {
	return v.value
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionSpec) Set(val *DefinitionsV1alpha1ResourceDefinitionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionsV1alpha1ResourceDefinitionSpec(val *DefinitionsV1alpha1ResourceDefinitionSpec) *NullableDefinitionsV1alpha1ResourceDefinitionSpec {
	return &NullableDefinitionsV1alpha1ResourceDefinitionSpec{value: val, isSet: true}
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


