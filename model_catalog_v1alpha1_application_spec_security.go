/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1ApplicationSpecSecurity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1ApplicationSpecSecurity{}

// CatalogV1alpha1ApplicationSpecSecurity struct for CatalogV1alpha1ApplicationSpecSecurity
type CatalogV1alpha1ApplicationSpecSecurity struct {
	// public key to be used to encrypt the credentials linked to this Application.
	EncryptionKey string `json:"encryptionKey"`
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty"`
	EncryptionHash *string `json:"encryptionHash,omitempty"`
}

type _CatalogV1alpha1ApplicationSpecSecurity CatalogV1alpha1ApplicationSpecSecurity

// NewCatalogV1alpha1ApplicationSpecSecurity instantiates a new CatalogV1alpha1ApplicationSpecSecurity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1ApplicationSpecSecurity(encryptionKey string) *CatalogV1alpha1ApplicationSpecSecurity {
	this := CatalogV1alpha1ApplicationSpecSecurity{}
	this.EncryptionKey = encryptionKey
	return &this
}

// NewCatalogV1alpha1ApplicationSpecSecurityWithDefaults instantiates a new CatalogV1alpha1ApplicationSpecSecurity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1ApplicationSpecSecurityWithDefaults() *CatalogV1alpha1ApplicationSpecSecurity {
	this := CatalogV1alpha1ApplicationSpecSecurity{}
	return &this
}

// GetEncryptionKey returns the EncryptionKey field value
func (o *CatalogV1alpha1ApplicationSpecSecurity) GetEncryptionKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ApplicationSpecSecurity) GetEncryptionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionKey, true
}

// SetEncryptionKey sets field value
func (o *CatalogV1alpha1ApplicationSpecSecurity) SetEncryptionKey(v string) {
	o.EncryptionKey = v
}

// GetEncryptionAlgorithm returns the EncryptionAlgorithm field value if set, zero value otherwise.
func (o *CatalogV1alpha1ApplicationSpecSecurity) GetEncryptionAlgorithm() string {
	if o == nil || IsNil(o.EncryptionAlgorithm) {
		var ret string
		return ret
	}
	return *o.EncryptionAlgorithm
}

// GetEncryptionAlgorithmOk returns a tuple with the EncryptionAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ApplicationSpecSecurity) GetEncryptionAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionAlgorithm) {
		return nil, false
	}
	return o.EncryptionAlgorithm, true
}

// HasEncryptionAlgorithm returns a boolean if a field has been set.
func (o *CatalogV1alpha1ApplicationSpecSecurity) HasEncryptionAlgorithm() bool {
	if o != nil && !IsNil(o.EncryptionAlgorithm) {
		return true
	}

	return false
}

// SetEncryptionAlgorithm gets a reference to the given string and assigns it to the EncryptionAlgorithm field.
func (o *CatalogV1alpha1ApplicationSpecSecurity) SetEncryptionAlgorithm(v string) {
	o.EncryptionAlgorithm = &v
}

// GetEncryptionHash returns the EncryptionHash field value if set, zero value otherwise.
func (o *CatalogV1alpha1ApplicationSpecSecurity) GetEncryptionHash() string {
	if o == nil || IsNil(o.EncryptionHash) {
		var ret string
		return ret
	}
	return *o.EncryptionHash
}

// GetEncryptionHashOk returns a tuple with the EncryptionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ApplicationSpecSecurity) GetEncryptionHashOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionHash) {
		return nil, false
	}
	return o.EncryptionHash, true
}

// HasEncryptionHash returns a boolean if a field has been set.
func (o *CatalogV1alpha1ApplicationSpecSecurity) HasEncryptionHash() bool {
	if o != nil && !IsNil(o.EncryptionHash) {
		return true
	}

	return false
}

// SetEncryptionHash gets a reference to the given string and assigns it to the EncryptionHash field.
func (o *CatalogV1alpha1ApplicationSpecSecurity) SetEncryptionHash(v string) {
	o.EncryptionHash = &v
}

func (o CatalogV1alpha1ApplicationSpecSecurity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1ApplicationSpecSecurity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["encryptionKey"] = o.EncryptionKey
	if !IsNil(o.EncryptionAlgorithm) {
		toSerialize["encryptionAlgorithm"] = o.EncryptionAlgorithm
	}
	if !IsNil(o.EncryptionHash) {
		toSerialize["encryptionHash"] = o.EncryptionHash
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1ApplicationSpecSecurity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"encryptionKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1ApplicationSpecSecurity := _CatalogV1alpha1ApplicationSpecSecurity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1ApplicationSpecSecurity)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1ApplicationSpecSecurity(varCatalogV1alpha1ApplicationSpecSecurity)

	return err
}

type NullableCatalogV1alpha1ApplicationSpecSecurity struct {
	value *CatalogV1alpha1ApplicationSpecSecurity
	isSet bool
}

func (v NullableCatalogV1alpha1ApplicationSpecSecurity) Get() *CatalogV1alpha1ApplicationSpecSecurity {
	return v.value
}

func (v *NullableCatalogV1alpha1ApplicationSpecSecurity) Set(val *CatalogV1alpha1ApplicationSpecSecurity) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ApplicationSpecSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ApplicationSpecSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ApplicationSpecSecurity(val *CatalogV1alpha1ApplicationSpecSecurity) *NullableCatalogV1alpha1ApplicationSpecSecurity {
	return &NullableCatalogV1alpha1ApplicationSpecSecurity{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ApplicationSpecSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ApplicationSpecSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


