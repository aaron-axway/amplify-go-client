/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1SubscriptionApproval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1SubscriptionApproval{}

// CatalogV1alpha1SubscriptionApproval struct for CatalogV1alpha1SubscriptionApproval
type CatalogV1alpha1SubscriptionApproval struct {
	State string `json:"state"`
	// Reason for the state.
	Reason *string `json:"reason,omitempty"`
	// Id of the user that approved or reject the subscription.
	UserId *string `json:"userId,omitempty"`
}

type _CatalogV1alpha1SubscriptionApproval CatalogV1alpha1SubscriptionApproval

// NewCatalogV1alpha1SubscriptionApproval instantiates a new CatalogV1alpha1SubscriptionApproval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1SubscriptionApproval(state string) *CatalogV1alpha1SubscriptionApproval {
	this := CatalogV1alpha1SubscriptionApproval{}
	this.State = state
	return &this
}

// NewCatalogV1alpha1SubscriptionApprovalWithDefaults instantiates a new CatalogV1alpha1SubscriptionApproval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1SubscriptionApprovalWithDefaults() *CatalogV1alpha1SubscriptionApproval {
	this := CatalogV1alpha1SubscriptionApproval{}
	return &this
}

// GetState returns the State field value
func (o *CatalogV1alpha1SubscriptionApproval) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionApproval) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CatalogV1alpha1SubscriptionApproval) SetState(v string) {
	o.State = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CatalogV1alpha1SubscriptionApproval) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionApproval) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CatalogV1alpha1SubscriptionApproval) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CatalogV1alpha1SubscriptionApproval) SetReason(v string) {
	o.Reason = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *CatalogV1alpha1SubscriptionApproval) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionApproval) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *CatalogV1alpha1SubscriptionApproval) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *CatalogV1alpha1SubscriptionApproval) SetUserId(v string) {
	o.UserId = &v
}

func (o CatalogV1alpha1SubscriptionApproval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1SubscriptionApproval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["state"] = o.State
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1SubscriptionApproval) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1SubscriptionApproval := _CatalogV1alpha1SubscriptionApproval{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1SubscriptionApproval)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1SubscriptionApproval(varCatalogV1alpha1SubscriptionApproval)

	return err
}

type NullableCatalogV1alpha1SubscriptionApproval struct {
	value *CatalogV1alpha1SubscriptionApproval
	isSet bool
}

func (v NullableCatalogV1alpha1SubscriptionApproval) Get() *CatalogV1alpha1SubscriptionApproval {
	return v.value
}

func (v *NullableCatalogV1alpha1SubscriptionApproval) Set(val *CatalogV1alpha1SubscriptionApproval) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1SubscriptionApproval) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1SubscriptionApproval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1SubscriptionApproval(val *CatalogV1alpha1SubscriptionApproval) *NullableCatalogV1alpha1SubscriptionApproval {
	return &NullableCatalogV1alpha1SubscriptionApproval{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1SubscriptionApproval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1SubscriptionApproval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


