/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ManagementV1alpha1DataplaneSpecGitHubFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1DataplaneSpecGitHubFilter{}

// ManagementV1alpha1DataplaneSpecGitHubFilter struct for ManagementV1alpha1DataplaneSpecGitHubFilter
type ManagementV1alpha1DataplaneSpecGitHubFilter struct {
	// The paths within the repository that the agent will gather files for looking for specs
	Paths []string `json:"paths,omitempty"`
	// The regular expressions that when a file name passes any of the patterns, a spec file will be used to create an api service
	Pattern []string `json:"pattern,omitempty"`
	// The GitHub repository branch that'll be used for the discovery process
	Branch *string `json:"branch,omitempty"`
}

// NewManagementV1alpha1DataplaneSpecGitHubFilter instantiates a new ManagementV1alpha1DataplaneSpecGitHubFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1DataplaneSpecGitHubFilter() *ManagementV1alpha1DataplaneSpecGitHubFilter {
	this := ManagementV1alpha1DataplaneSpecGitHubFilter{}
	return &this
}

// NewManagementV1alpha1DataplaneSpecGitHubFilterWithDefaults instantiates a new ManagementV1alpha1DataplaneSpecGitHubFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1DataplaneSpecGitHubFilterWithDefaults() *ManagementV1alpha1DataplaneSpecGitHubFilter {
	this := ManagementV1alpha1DataplaneSpecGitHubFilter{}
	return &this
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) GetPaths() []string {
	if o == nil || IsNil(o.Paths) {
		var ret []string
		return ret
	}
	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) GetPathsOk() ([]string, bool) {
	if o == nil || IsNil(o.Paths) {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) HasPaths() bool {
	if o != nil && !IsNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given []string and assigns it to the Paths field.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) SetPaths(v []string) {
	o.Paths = v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) GetPattern() []string {
	if o == nil || IsNil(o.Pattern) {
		var ret []string
		return ret
	}
	return o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) GetPatternOk() ([]string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given []string and assigns it to the Pattern field.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) SetPattern(v []string) {
	o.Pattern = v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *ManagementV1alpha1DataplaneSpecGitHubFilter) SetBranch(v string) {
	o.Branch = &v
}

func (o ManagementV1alpha1DataplaneSpecGitHubFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1DataplaneSpecGitHubFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Paths) {
		toSerialize["paths"] = o.Paths
	}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	return toSerialize, nil
}

type NullableManagementV1alpha1DataplaneSpecGitHubFilter struct {
	value *ManagementV1alpha1DataplaneSpecGitHubFilter
	isSet bool
}

func (v NullableManagementV1alpha1DataplaneSpecGitHubFilter) Get() *ManagementV1alpha1DataplaneSpecGitHubFilter {
	return v.value
}

func (v *NullableManagementV1alpha1DataplaneSpecGitHubFilter) Set(val *ManagementV1alpha1DataplaneSpecGitHubFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1DataplaneSpecGitHubFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1DataplaneSpecGitHubFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1DataplaneSpecGitHubFilter(val *ManagementV1alpha1DataplaneSpecGitHubFilter) *NullableManagementV1alpha1DataplaneSpecGitHubFilter {
	return &NullableManagementV1alpha1DataplaneSpecGitHubFilter{value: val, isSet: true}
}

func (v NullableManagementV1alpha1DataplaneSpecGitHubFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1DataplaneSpecGitHubFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


