/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner{}

// DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner struct for DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner
type DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner struct {
	// Defines the kind of the resource.
	Group *string `json:"group,omitempty"`
	// Defines the kind of the resource.
	Kind *string `json:"kind,omitempty"`
	// Defines the scope kind of the resource. Omit for unscoped resources.
	ScopeKind *string `json:"scopeKind,omitempty"`
	// The type of the reference.
	Types []string `json:"types,omitempty"`
	From *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInnerFrom `json:"from,omitempty"`
}

// NewDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner instantiates a new DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner() *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner {
	this := DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner{}
	return &this
}

// NewDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInnerWithDefaults instantiates a new DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInnerWithDefaults() *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner {
	this := DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) SetGroup(v string) {
	o.Group = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) SetKind(v string) {
	o.Kind = &v
}

// GetScopeKind returns the ScopeKind field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) GetScopeKind() string {
	if o == nil || IsNil(o.ScopeKind) {
		var ret string
		return ret
	}
	return *o.ScopeKind
}

// GetScopeKindOk returns a tuple with the ScopeKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) GetScopeKindOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeKind) {
		return nil, false
	}
	return o.ScopeKind, true
}

// HasScopeKind returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) HasScopeKind() bool {
	if o != nil && !IsNil(o.ScopeKind) {
		return true
	}

	return false
}

// SetScopeKind gets a reference to the given string and assigns it to the ScopeKind field.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) SetScopeKind(v string) {
	o.ScopeKind = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) GetTypes() []string {
	if o == nil || IsNil(o.Types) {
		var ret []string
		return ret
	}
	return o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) GetTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.Types) {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) HasTypes() bool {
	if o != nil && !IsNil(o.Types) {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) SetTypes(v []string) {
	o.Types = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) GetFrom() DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInnerFrom {
	if o == nil || IsNil(o.From) {
		var ret DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInnerFrom
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) GetFromOk() (*DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInnerFrom, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInnerFrom and assigns it to the From field.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) SetFrom(v DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInnerFrom) {
	o.From = &v
}

func (o DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.ScopeKind) {
		toSerialize["scopeKind"] = o.ScopeKind
	}
	if !IsNil(o.Types) {
		toSerialize["types"] = o.Types
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	return toSerialize, nil
}

type NullableDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner struct {
	value *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner
	isSet bool
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) Get() *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner {
	return v.value
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) Set(val *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner(val *DefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) *NullableDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner {
	return &NullableDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner{value: val, isSet: true}
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionSpecReferencesToResourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


