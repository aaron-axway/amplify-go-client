/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1ProductPlanSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1ProductPlanSpec{}

// CatalogV1alpha1ProductPlanSpec struct for CatalogV1alpha1ProductPlanSpec
type CatalogV1alpha1ProductPlanSpec struct {
	Product string `json:"product"`
	// description of the Plan.
	Description *string `json:"description,omitempty"`
	// The type of the Plan.
	Type string `json:"type"`
	Billing *CatalogV1alpha1ProductPlanSpecBilling `json:"billing,omitempty"`
	// Defines all features supported by the Plan.
	Features []CatalogV1alpha1ProductPlanSpecFeaturesInner `json:"features,omitempty"`
	Subscription *CatalogV1alpha1ProductPlanSpecSubscription `json:"subscription,omitempty"`
}

type _CatalogV1alpha1ProductPlanSpec CatalogV1alpha1ProductPlanSpec

// NewCatalogV1alpha1ProductPlanSpec instantiates a new CatalogV1alpha1ProductPlanSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1ProductPlanSpec(product string, type_ string) *CatalogV1alpha1ProductPlanSpec {
	this := CatalogV1alpha1ProductPlanSpec{}
	this.Product = product
	this.Type = type_
	return &this
}

// NewCatalogV1alpha1ProductPlanSpecWithDefaults instantiates a new CatalogV1alpha1ProductPlanSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1ProductPlanSpecWithDefaults() *CatalogV1alpha1ProductPlanSpec {
	this := CatalogV1alpha1ProductPlanSpec{}
	return &this
}

// GetProduct returns the Product field value
func (o *CatalogV1alpha1ProductPlanSpec) GetProduct() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpec) GetProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *CatalogV1alpha1ProductPlanSpec) SetProduct(v string) {
	o.Product = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CatalogV1alpha1ProductPlanSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogV1alpha1ProductPlanSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CatalogV1alpha1ProductPlanSpec) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *CatalogV1alpha1ProductPlanSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogV1alpha1ProductPlanSpec) SetType(v string) {
	o.Type = v
}

// GetBilling returns the Billing field value if set, zero value otherwise.
func (o *CatalogV1alpha1ProductPlanSpec) GetBilling() CatalogV1alpha1ProductPlanSpecBilling {
	if o == nil || IsNil(o.Billing) {
		var ret CatalogV1alpha1ProductPlanSpecBilling
		return ret
	}
	return *o.Billing
}

// GetBillingOk returns a tuple with the Billing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpec) GetBillingOk() (*CatalogV1alpha1ProductPlanSpecBilling, bool) {
	if o == nil || IsNil(o.Billing) {
		return nil, false
	}
	return o.Billing, true
}

// HasBilling returns a boolean if a field has been set.
func (o *CatalogV1alpha1ProductPlanSpec) HasBilling() bool {
	if o != nil && !IsNil(o.Billing) {
		return true
	}

	return false
}

// SetBilling gets a reference to the given CatalogV1alpha1ProductPlanSpecBilling and assigns it to the Billing field.
func (o *CatalogV1alpha1ProductPlanSpec) SetBilling(v CatalogV1alpha1ProductPlanSpecBilling) {
	o.Billing = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *CatalogV1alpha1ProductPlanSpec) GetFeatures() []CatalogV1alpha1ProductPlanSpecFeaturesInner {
	if o == nil || IsNil(o.Features) {
		var ret []CatalogV1alpha1ProductPlanSpecFeaturesInner
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpec) GetFeaturesOk() ([]CatalogV1alpha1ProductPlanSpecFeaturesInner, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *CatalogV1alpha1ProductPlanSpec) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []CatalogV1alpha1ProductPlanSpecFeaturesInner and assigns it to the Features field.
func (o *CatalogV1alpha1ProductPlanSpec) SetFeatures(v []CatalogV1alpha1ProductPlanSpecFeaturesInner) {
	o.Features = v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *CatalogV1alpha1ProductPlanSpec) GetSubscription() CatalogV1alpha1ProductPlanSpecSubscription {
	if o == nil || IsNil(o.Subscription) {
		var ret CatalogV1alpha1ProductPlanSpecSubscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpec) GetSubscriptionOk() (*CatalogV1alpha1ProductPlanSpecSubscription, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *CatalogV1alpha1ProductPlanSpec) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given CatalogV1alpha1ProductPlanSpecSubscription and assigns it to the Subscription field.
func (o *CatalogV1alpha1ProductPlanSpec) SetSubscription(v CatalogV1alpha1ProductPlanSpecSubscription) {
	o.Subscription = &v
}

func (o CatalogV1alpha1ProductPlanSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1ProductPlanSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["product"] = o.Product
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Billing) {
		toSerialize["billing"] = o.Billing
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1ProductPlanSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1ProductPlanSpec := _CatalogV1alpha1ProductPlanSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1ProductPlanSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1ProductPlanSpec(varCatalogV1alpha1ProductPlanSpec)

	return err
}

type NullableCatalogV1alpha1ProductPlanSpec struct {
	value *CatalogV1alpha1ProductPlanSpec
	isSet bool
}

func (v NullableCatalogV1alpha1ProductPlanSpec) Get() *CatalogV1alpha1ProductPlanSpec {
	return v.value
}

func (v *NullableCatalogV1alpha1ProductPlanSpec) Set(val *CatalogV1alpha1ProductPlanSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ProductPlanSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ProductPlanSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ProductPlanSpec(val *CatalogV1alpha1ProductPlanSpec) *NullableCatalogV1alpha1ProductPlanSpec {
	return &NullableCatalogV1alpha1ProductPlanSpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ProductPlanSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ProductPlanSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


