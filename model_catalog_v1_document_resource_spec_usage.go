/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1DocumentResourceSpecUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1DocumentResourceSpecUsage{}

// CatalogV1DocumentResourceSpecUsage Defines where the DocumentResource can be used.
type CatalogV1DocumentResourceSpecUsage struct {
	MarketplaceSettings CatalogV1DocumentResourceSpecUsageMarketplaceSettings `json:"marketplaceSettings"`
	Products CatalogV1DocumentResourceSpecUsageProducts `json:"products"`
}

type _CatalogV1DocumentResourceSpecUsage CatalogV1DocumentResourceSpecUsage

// NewCatalogV1DocumentResourceSpecUsage instantiates a new CatalogV1DocumentResourceSpecUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1DocumentResourceSpecUsage(marketplaceSettings CatalogV1DocumentResourceSpecUsageMarketplaceSettings, products CatalogV1DocumentResourceSpecUsageProducts) *CatalogV1DocumentResourceSpecUsage {
	this := CatalogV1DocumentResourceSpecUsage{}
	this.MarketplaceSettings = marketplaceSettings
	this.Products = products
	return &this
}

// NewCatalogV1DocumentResourceSpecUsageWithDefaults instantiates a new CatalogV1DocumentResourceSpecUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1DocumentResourceSpecUsageWithDefaults() *CatalogV1DocumentResourceSpecUsage {
	this := CatalogV1DocumentResourceSpecUsage{}
	return &this
}

// GetMarketplaceSettings returns the MarketplaceSettings field value
func (o *CatalogV1DocumentResourceSpecUsage) GetMarketplaceSettings() CatalogV1DocumentResourceSpecUsageMarketplaceSettings {
	if o == nil {
		var ret CatalogV1DocumentResourceSpecUsageMarketplaceSettings
		return ret
	}

	return o.MarketplaceSettings
}

// GetMarketplaceSettingsOk returns a tuple with the MarketplaceSettings field value
// and a boolean to check if the value has been set.
func (o *CatalogV1DocumentResourceSpecUsage) GetMarketplaceSettingsOk() (*CatalogV1DocumentResourceSpecUsageMarketplaceSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MarketplaceSettings, true
}

// SetMarketplaceSettings sets field value
func (o *CatalogV1DocumentResourceSpecUsage) SetMarketplaceSettings(v CatalogV1DocumentResourceSpecUsageMarketplaceSettings) {
	o.MarketplaceSettings = v
}

// GetProducts returns the Products field value
func (o *CatalogV1DocumentResourceSpecUsage) GetProducts() CatalogV1DocumentResourceSpecUsageProducts {
	if o == nil {
		var ret CatalogV1DocumentResourceSpecUsageProducts
		return ret
	}

	return o.Products
}

// GetProductsOk returns a tuple with the Products field value
// and a boolean to check if the value has been set.
func (o *CatalogV1DocumentResourceSpecUsage) GetProductsOk() (*CatalogV1DocumentResourceSpecUsageProducts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Products, true
}

// SetProducts sets field value
func (o *CatalogV1DocumentResourceSpecUsage) SetProducts(v CatalogV1DocumentResourceSpecUsageProducts) {
	o.Products = v
}

func (o CatalogV1DocumentResourceSpecUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1DocumentResourceSpecUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["marketplaceSettings"] = o.MarketplaceSettings
	toSerialize["products"] = o.Products
	return toSerialize, nil
}

func (o *CatalogV1DocumentResourceSpecUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"marketplaceSettings",
		"products",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1DocumentResourceSpecUsage := _CatalogV1DocumentResourceSpecUsage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1DocumentResourceSpecUsage)

	if err != nil {
		return err
	}

	*o = CatalogV1DocumentResourceSpecUsage(varCatalogV1DocumentResourceSpecUsage)

	return err
}

type NullableCatalogV1DocumentResourceSpecUsage struct {
	value *CatalogV1DocumentResourceSpecUsage
	isSet bool
}

func (v NullableCatalogV1DocumentResourceSpecUsage) Get() *CatalogV1DocumentResourceSpecUsage {
	return v.value
}

func (v *NullableCatalogV1DocumentResourceSpecUsage) Set(val *CatalogV1DocumentResourceSpecUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1DocumentResourceSpecUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1DocumentResourceSpecUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1DocumentResourceSpecUsage(val *CatalogV1DocumentResourceSpecUsage) *NullableCatalogV1DocumentResourceSpecUsage {
	return &NullableCatalogV1DocumentResourceSpecUsage{value: val, isSet: true}
}

func (v NullableCatalogV1DocumentResourceSpecUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1DocumentResourceSpecUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


