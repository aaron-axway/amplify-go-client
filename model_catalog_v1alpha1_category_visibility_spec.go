/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1CategoryVisibilitySpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1CategoryVisibilitySpec{}

// CatalogV1alpha1CategoryVisibilitySpec struct for CatalogV1alpha1CategoryVisibilitySpec
type CatalogV1alpha1CategoryVisibilitySpec struct {
	Category string `json:"category"`
	// Defines if the Category is featured in the marketplace.
	Featured bool `json:"featured"`
}

type _CatalogV1alpha1CategoryVisibilitySpec CatalogV1alpha1CategoryVisibilitySpec

// NewCatalogV1alpha1CategoryVisibilitySpec instantiates a new CatalogV1alpha1CategoryVisibilitySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1CategoryVisibilitySpec(category string, featured bool) *CatalogV1alpha1CategoryVisibilitySpec {
	this := CatalogV1alpha1CategoryVisibilitySpec{}
	this.Category = category
	this.Featured = featured
	return &this
}

// NewCatalogV1alpha1CategoryVisibilitySpecWithDefaults instantiates a new CatalogV1alpha1CategoryVisibilitySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1CategoryVisibilitySpecWithDefaults() *CatalogV1alpha1CategoryVisibilitySpec {
	this := CatalogV1alpha1CategoryVisibilitySpec{}
	return &this
}

// GetCategory returns the Category field value
func (o *CatalogV1alpha1CategoryVisibilitySpec) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1CategoryVisibilitySpec) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *CatalogV1alpha1CategoryVisibilitySpec) SetCategory(v string) {
	o.Category = v
}

// GetFeatured returns the Featured field value
func (o *CatalogV1alpha1CategoryVisibilitySpec) GetFeatured() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Featured
}

// GetFeaturedOk returns a tuple with the Featured field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1CategoryVisibilitySpec) GetFeaturedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Featured, true
}

// SetFeatured sets field value
func (o *CatalogV1alpha1CategoryVisibilitySpec) SetFeatured(v bool) {
	o.Featured = v
}

func (o CatalogV1alpha1CategoryVisibilitySpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1CategoryVisibilitySpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category"] = o.Category
	toSerialize["featured"] = o.Featured
	return toSerialize, nil
}

func (o *CatalogV1alpha1CategoryVisibilitySpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
		"featured",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1CategoryVisibilitySpec := _CatalogV1alpha1CategoryVisibilitySpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1CategoryVisibilitySpec)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1CategoryVisibilitySpec(varCatalogV1alpha1CategoryVisibilitySpec)

	return err
}

type NullableCatalogV1alpha1CategoryVisibilitySpec struct {
	value *CatalogV1alpha1CategoryVisibilitySpec
	isSet bool
}

func (v NullableCatalogV1alpha1CategoryVisibilitySpec) Get() *CatalogV1alpha1CategoryVisibilitySpec {
	return v.value
}

func (v *NullableCatalogV1alpha1CategoryVisibilitySpec) Set(val *CatalogV1alpha1CategoryVisibilitySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1CategoryVisibilitySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1CategoryVisibilitySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1CategoryVisibilitySpec(val *CatalogV1alpha1CategoryVisibilitySpec) *NullableCatalogV1alpha1CategoryVisibilitySpec {
	return &NullableCatalogV1alpha1CategoryVisibilitySpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1CategoryVisibilitySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1CategoryVisibilitySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


