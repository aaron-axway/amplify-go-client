/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogV1CategorySpecRestriction - struct for CatalogV1CategorySpecRestriction
type CatalogV1CategorySpecRestriction struct {
	CatalogV1CategorySpecAPIServiceRestriction *CatalogV1CategorySpecAPIServiceRestriction
	CatalogV1CategorySpecAssetRestriction *CatalogV1CategorySpecAssetRestriction
	CatalogV1CategorySpecProductRestriction *CatalogV1CategorySpecProductRestriction
}

// CatalogV1CategorySpecAPIServiceRestrictionAsCatalogV1CategorySpecRestriction is a convenience function that returns CatalogV1CategorySpecAPIServiceRestriction wrapped in CatalogV1CategorySpecRestriction
func CatalogV1CategorySpecAPIServiceRestrictionAsCatalogV1CategorySpecRestriction(v *CatalogV1CategorySpecAPIServiceRestriction) CatalogV1CategorySpecRestriction {
	return CatalogV1CategorySpecRestriction{
		CatalogV1CategorySpecAPIServiceRestriction: v,
	}
}

// CatalogV1CategorySpecAssetRestrictionAsCatalogV1CategorySpecRestriction is a convenience function that returns CatalogV1CategorySpecAssetRestriction wrapped in CatalogV1CategorySpecRestriction
func CatalogV1CategorySpecAssetRestrictionAsCatalogV1CategorySpecRestriction(v *CatalogV1CategorySpecAssetRestriction) CatalogV1CategorySpecRestriction {
	return CatalogV1CategorySpecRestriction{
		CatalogV1CategorySpecAssetRestriction: v,
	}
}

// CatalogV1CategorySpecProductRestrictionAsCatalogV1CategorySpecRestriction is a convenience function that returns CatalogV1CategorySpecProductRestriction wrapped in CatalogV1CategorySpecRestriction
func CatalogV1CategorySpecProductRestrictionAsCatalogV1CategorySpecRestriction(v *CatalogV1CategorySpecProductRestriction) CatalogV1CategorySpecRestriction {
	return CatalogV1CategorySpecRestriction{
		CatalogV1CategorySpecProductRestriction: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogV1CategorySpecRestriction) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogV1CategorySpecAPIServiceRestriction
	err = newStrictDecoder(data).Decode(&dst.CatalogV1CategorySpecAPIServiceRestriction)
	if err == nil {
		jsonCatalogV1CategorySpecAPIServiceRestriction, _ := json.Marshal(dst.CatalogV1CategorySpecAPIServiceRestriction)
		if string(jsonCatalogV1CategorySpecAPIServiceRestriction) == "{}" { // empty struct
			dst.CatalogV1CategorySpecAPIServiceRestriction = nil
		} else {
			if err = validator.Validate(dst.CatalogV1CategorySpecAPIServiceRestriction); err != nil {
				dst.CatalogV1CategorySpecAPIServiceRestriction = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1CategorySpecAPIServiceRestriction = nil
	}

	// try to unmarshal data into CatalogV1CategorySpecAssetRestriction
	err = newStrictDecoder(data).Decode(&dst.CatalogV1CategorySpecAssetRestriction)
	if err == nil {
		jsonCatalogV1CategorySpecAssetRestriction, _ := json.Marshal(dst.CatalogV1CategorySpecAssetRestriction)
		if string(jsonCatalogV1CategorySpecAssetRestriction) == "{}" { // empty struct
			dst.CatalogV1CategorySpecAssetRestriction = nil
		} else {
			if err = validator.Validate(dst.CatalogV1CategorySpecAssetRestriction); err != nil {
				dst.CatalogV1CategorySpecAssetRestriction = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1CategorySpecAssetRestriction = nil
	}

	// try to unmarshal data into CatalogV1CategorySpecProductRestriction
	err = newStrictDecoder(data).Decode(&dst.CatalogV1CategorySpecProductRestriction)
	if err == nil {
		jsonCatalogV1CategorySpecProductRestriction, _ := json.Marshal(dst.CatalogV1CategorySpecProductRestriction)
		if string(jsonCatalogV1CategorySpecProductRestriction) == "{}" { // empty struct
			dst.CatalogV1CategorySpecProductRestriction = nil
		} else {
			if err = validator.Validate(dst.CatalogV1CategorySpecProductRestriction); err != nil {
				dst.CatalogV1CategorySpecProductRestriction = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1CategorySpecProductRestriction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogV1CategorySpecAPIServiceRestriction = nil
		dst.CatalogV1CategorySpecAssetRestriction = nil
		dst.CatalogV1CategorySpecProductRestriction = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogV1CategorySpecRestriction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogV1CategorySpecRestriction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogV1CategorySpecRestriction) MarshalJSON() ([]byte, error) {
	if src.CatalogV1CategorySpecAPIServiceRestriction != nil {
		return json.Marshal(&src.CatalogV1CategorySpecAPIServiceRestriction)
	}

	if src.CatalogV1CategorySpecAssetRestriction != nil {
		return json.Marshal(&src.CatalogV1CategorySpecAssetRestriction)
	}

	if src.CatalogV1CategorySpecProductRestriction != nil {
		return json.Marshal(&src.CatalogV1CategorySpecProductRestriction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogV1CategorySpecRestriction) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogV1CategorySpecAPIServiceRestriction != nil {
		return obj.CatalogV1CategorySpecAPIServiceRestriction
	}

	if obj.CatalogV1CategorySpecAssetRestriction != nil {
		return obj.CatalogV1CategorySpecAssetRestriction
	}

	if obj.CatalogV1CategorySpecProductRestriction != nil {
		return obj.CatalogV1CategorySpecProductRestriction
	}

	// all schemas are nil
	return nil
}

type NullableCatalogV1CategorySpecRestriction struct {
	value *CatalogV1CategorySpecRestriction
	isSet bool
}

func (v NullableCatalogV1CategorySpecRestriction) Get() *CatalogV1CategorySpecRestriction {
	return v.value
}

func (v *NullableCatalogV1CategorySpecRestriction) Set(val *CatalogV1CategorySpecRestriction) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1CategorySpecRestriction) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1CategorySpecRestriction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1CategorySpecRestriction(val *CatalogV1CategorySpecRestriction) *NullableCatalogV1CategorySpecRestriction {
	return &NullableCatalogV1CategorySpecRestriction{value: val, isSet: true}
}

func (v NullableCatalogV1CategorySpecRestriction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1CategorySpecRestriction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


