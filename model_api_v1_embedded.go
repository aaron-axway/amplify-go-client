/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiV1Embedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiV1Embedded{}

// ApiV1Embedded Embedded information attached to the resource if the embed request parameters are used
type ApiV1Embedded struct {
	Metadata *ApiV1EmbeddedMetadata `json:"metadata,omitempty"`
}

// NewApiV1Embedded instantiates a new ApiV1Embedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV1Embedded() *ApiV1Embedded {
	this := ApiV1Embedded{}
	return &this
}

// NewApiV1EmbeddedWithDefaults instantiates a new ApiV1Embedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV1EmbeddedWithDefaults() *ApiV1Embedded {
	this := ApiV1Embedded{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ApiV1Embedded) GetMetadata() ApiV1EmbeddedMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ApiV1EmbeddedMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Embedded) GetMetadataOk() (*ApiV1EmbeddedMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ApiV1Embedded) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ApiV1EmbeddedMetadata and assigns it to the Metadata field.
func (o *ApiV1Embedded) SetMetadata(v ApiV1EmbeddedMetadata) {
	o.Metadata = &v
}

func (o ApiV1Embedded) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiV1Embedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableApiV1Embedded struct {
	value *ApiV1Embedded
	isSet bool
}

func (v NullableApiV1Embedded) Get() *ApiV1Embedded {
	return v.value
}

func (v *NullableApiV1Embedded) Set(val *ApiV1Embedded) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV1Embedded) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV1Embedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV1Embedded(val *ApiV1Embedded) *NullableApiV1Embedded {
	return &NullableApiV1Embedded{value: val, isSet: true}
}

func (v NullableApiV1Embedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV1Embedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


