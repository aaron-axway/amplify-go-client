/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogV1DocumentStatusReasonsInner - struct for CatalogV1DocumentStatusReasonsInner
type CatalogV1DocumentStatusReasonsInner struct {
	CatalogV1DocumentStatusError *CatalogV1DocumentStatusError
	CatalogV1DocumentStatusSuccess *CatalogV1DocumentStatusSuccess
}

// CatalogV1DocumentStatusErrorAsCatalogV1DocumentStatusReasonsInner is a convenience function that returns CatalogV1DocumentStatusError wrapped in CatalogV1DocumentStatusReasonsInner
func CatalogV1DocumentStatusErrorAsCatalogV1DocumentStatusReasonsInner(v *CatalogV1DocumentStatusError) CatalogV1DocumentStatusReasonsInner {
	return CatalogV1DocumentStatusReasonsInner{
		CatalogV1DocumentStatusError: v,
	}
}

// CatalogV1DocumentStatusSuccessAsCatalogV1DocumentStatusReasonsInner is a convenience function that returns CatalogV1DocumentStatusSuccess wrapped in CatalogV1DocumentStatusReasonsInner
func CatalogV1DocumentStatusSuccessAsCatalogV1DocumentStatusReasonsInner(v *CatalogV1DocumentStatusSuccess) CatalogV1DocumentStatusReasonsInner {
	return CatalogV1DocumentStatusReasonsInner{
		CatalogV1DocumentStatusSuccess: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogV1DocumentStatusReasonsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogV1DocumentStatusError
	err = newStrictDecoder(data).Decode(&dst.CatalogV1DocumentStatusError)
	if err == nil {
		jsonCatalogV1DocumentStatusError, _ := json.Marshal(dst.CatalogV1DocumentStatusError)
		if string(jsonCatalogV1DocumentStatusError) == "{}" { // empty struct
			dst.CatalogV1DocumentStatusError = nil
		} else {
			if err = validator.Validate(dst.CatalogV1DocumentStatusError); err != nil {
				dst.CatalogV1DocumentStatusError = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1DocumentStatusError = nil
	}

	// try to unmarshal data into CatalogV1DocumentStatusSuccess
	err = newStrictDecoder(data).Decode(&dst.CatalogV1DocumentStatusSuccess)
	if err == nil {
		jsonCatalogV1DocumentStatusSuccess, _ := json.Marshal(dst.CatalogV1DocumentStatusSuccess)
		if string(jsonCatalogV1DocumentStatusSuccess) == "{}" { // empty struct
			dst.CatalogV1DocumentStatusSuccess = nil
		} else {
			if err = validator.Validate(dst.CatalogV1DocumentStatusSuccess); err != nil {
				dst.CatalogV1DocumentStatusSuccess = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1DocumentStatusSuccess = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogV1DocumentStatusError = nil
		dst.CatalogV1DocumentStatusSuccess = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogV1DocumentStatusReasonsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogV1DocumentStatusReasonsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogV1DocumentStatusReasonsInner) MarshalJSON() ([]byte, error) {
	if src.CatalogV1DocumentStatusError != nil {
		return json.Marshal(&src.CatalogV1DocumentStatusError)
	}

	if src.CatalogV1DocumentStatusSuccess != nil {
		return json.Marshal(&src.CatalogV1DocumentStatusSuccess)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogV1DocumentStatusReasonsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogV1DocumentStatusError != nil {
		return obj.CatalogV1DocumentStatusError
	}

	if obj.CatalogV1DocumentStatusSuccess != nil {
		return obj.CatalogV1DocumentStatusSuccess
	}

	// all schemas are nil
	return nil
}

type NullableCatalogV1DocumentStatusReasonsInner struct {
	value *CatalogV1DocumentStatusReasonsInner
	isSet bool
}

func (v NullableCatalogV1DocumentStatusReasonsInner) Get() *CatalogV1DocumentStatusReasonsInner {
	return v.value
}

func (v *NullableCatalogV1DocumentStatusReasonsInner) Set(val *CatalogV1DocumentStatusReasonsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1DocumentStatusReasonsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1DocumentStatusReasonsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1DocumentStatusReasonsInner(val *CatalogV1DocumentStatusReasonsInner) *NullableCatalogV1DocumentStatusReasonsInner {
	return &NullableCatalogV1DocumentStatusReasonsInner{value: val, isSet: true}
}

func (v NullableCatalogV1DocumentStatusReasonsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1DocumentStatusReasonsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


