/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration{}

// CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration struct for CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration
type CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration struct {
	Type string `json:"type"`
	// The Product Plan to which to migrate the existing Product Subscriptions.
	ProductPlan string `json:"productPlan"`
	// Description on why the subscriptions was migrated.
	Reason *string `json:"reason,omitempty"`
	// Filter the subscriptions that are wanted to be migrated.
	Filters []CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigrationFiltersInner `json:"filters,omitempty"`
}

type _CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration

// NewCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration instantiates a new CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration(type_ string, productPlan string) *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration {
	this := CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration{}
	this.Type = type_
	this.ProductPlan = productPlan
	return &this
}

// NewCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigrationWithDefaults instantiates a new CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigrationWithDefaults() *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration {
	this := CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration{}
	return &this
}

// GetType returns the Type field value
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) SetType(v string) {
	o.Type = v
}

// GetProductPlan returns the ProductPlan field value
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) GetProductPlan() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductPlan
}

// GetProductPlanOk returns a tuple with the ProductPlan field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) GetProductPlanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductPlan, true
}

// SetProductPlan sets field value
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) SetProductPlan(v string) {
	o.ProductPlan = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) SetReason(v string) {
	o.Reason = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) GetFilters() []CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigrationFiltersInner {
	if o == nil || IsNil(o.Filters) {
		var ret []CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigrationFiltersInner
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) GetFiltersOk() ([]CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigrationFiltersInner, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigrationFiltersInner and assigns it to the Filters field.
func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) SetFilters(v []CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigrationFiltersInner) {
	o.Filters = v
}

func (o CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["productPlan"] = o.ProductPlan
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"productPlan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration := _CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration(varCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration)

	return err
}

type NullableCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration struct {
	value *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration
	isSet bool
}

func (v NullableCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) Get() *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration {
	return v.value
}

func (v *NullableCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) Set(val *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration(val *CatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) *NullableCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration {
	return &NullableCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ProductPlanJobSpecSubscriptionsMigration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


