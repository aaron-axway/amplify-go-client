/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
)

// checks if the ApiV1Reference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiV1Reference{}

// ApiV1Reference List of objects dependent by this object.
type ApiV1Reference struct {
	// Unique id generated by the server.
	Id *string `json:"id,omitempty"`
	// The kind of the referenced resource.
	Kind *string `json:"kind,omitempty"`
	// The name of the referenced resource.
	Name *string `json:"name,omitempty" validate:"regexp=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"`
	// The kind of the referenced resource scope.
	ScopeKind *string `json:"scopeKind,omitempty"`
	// The name of the referenced resource scope.
	ScopeName *string `json:"scopeName,omitempty" validate:"regexp=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"`
	// The URL representing the referenced resource.
	SelfLink *string `json:"selfLink,omitempty"`
	// Defines the type of the reference: * soft - spec property that has this reference will get nulled out if the referenced resource gets removed. * hard - dictates that the current resource will get removed when the referenced resource gets removed. 
	Type *string `json:"type,omitempty"`
}

// NewApiV1Reference instantiates a new ApiV1Reference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV1Reference() *ApiV1Reference {
	this := ApiV1Reference{}
	var type_ string = "hard"
	this.Type = &type_
	return &this
}

// NewApiV1ReferenceWithDefaults instantiates a new ApiV1Reference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV1ReferenceWithDefaults() *ApiV1Reference {
	this := ApiV1Reference{}
	var type_ string = "hard"
	this.Type = &type_
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiV1Reference) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Reference) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiV1Reference) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiV1Reference) SetId(v string) {
	o.Id = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ApiV1Reference) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Reference) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ApiV1Reference) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ApiV1Reference) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiV1Reference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Reference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiV1Reference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiV1Reference) SetName(v string) {
	o.Name = &v
}

// GetScopeKind returns the ScopeKind field value if set, zero value otherwise.
func (o *ApiV1Reference) GetScopeKind() string {
	if o == nil || IsNil(o.ScopeKind) {
		var ret string
		return ret
	}
	return *o.ScopeKind
}

// GetScopeKindOk returns a tuple with the ScopeKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Reference) GetScopeKindOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeKind) {
		return nil, false
	}
	return o.ScopeKind, true
}

// HasScopeKind returns a boolean if a field has been set.
func (o *ApiV1Reference) HasScopeKind() bool {
	if o != nil && !IsNil(o.ScopeKind) {
		return true
	}

	return false
}

// SetScopeKind gets a reference to the given string and assigns it to the ScopeKind field.
func (o *ApiV1Reference) SetScopeKind(v string) {
	o.ScopeKind = &v
}

// GetScopeName returns the ScopeName field value if set, zero value otherwise.
func (o *ApiV1Reference) GetScopeName() string {
	if o == nil || IsNil(o.ScopeName) {
		var ret string
		return ret
	}
	return *o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Reference) GetScopeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeName) {
		return nil, false
	}
	return o.ScopeName, true
}

// HasScopeName returns a boolean if a field has been set.
func (o *ApiV1Reference) HasScopeName() bool {
	if o != nil && !IsNil(o.ScopeName) {
		return true
	}

	return false
}

// SetScopeName gets a reference to the given string and assigns it to the ScopeName field.
func (o *ApiV1Reference) SetScopeName(v string) {
	o.ScopeName = &v
}

// GetSelfLink returns the SelfLink field value if set, zero value otherwise.
func (o *ApiV1Reference) GetSelfLink() string {
	if o == nil || IsNil(o.SelfLink) {
		var ret string
		return ret
	}
	return *o.SelfLink
}

// GetSelfLinkOk returns a tuple with the SelfLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Reference) GetSelfLinkOk() (*string, bool) {
	if o == nil || IsNil(o.SelfLink) {
		return nil, false
	}
	return o.SelfLink, true
}

// HasSelfLink returns a boolean if a field has been set.
func (o *ApiV1Reference) HasSelfLink() bool {
	if o != nil && !IsNil(o.SelfLink) {
		return true
	}

	return false
}

// SetSelfLink gets a reference to the given string and assigns it to the SelfLink field.
func (o *ApiV1Reference) SetSelfLink(v string) {
	o.SelfLink = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiV1Reference) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Reference) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiV1Reference) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiV1Reference) SetType(v string) {
	o.Type = &v
}

func (o ApiV1Reference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiV1Reference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ScopeKind) {
		toSerialize["scopeKind"] = o.ScopeKind
	}
	if !IsNil(o.ScopeName) {
		toSerialize["scopeName"] = o.ScopeName
	}
	if !IsNil(o.SelfLink) {
		toSerialize["selfLink"] = o.SelfLink
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableApiV1Reference struct {
	value *ApiV1Reference
	isSet bool
}

func (v NullableApiV1Reference) Get() *ApiV1Reference {
	return v.value
}

func (v *NullableApiV1Reference) Set(val *ApiV1Reference) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV1Reference) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV1Reference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV1Reference(val *ApiV1Reference) *NullableApiV1Reference {
	return &NullableApiV1Reference{value: val, isSet: true}
}

func (v NullableApiV1Reference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV1Reference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


