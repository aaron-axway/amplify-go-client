/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CatalogV1alpha1ReleaseTagStatusReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1ReleaseTagStatusReference{}

// CatalogV1alpha1ReleaseTagStatusReference The resource reference that was created/updated.
type CatalogV1alpha1ReleaseTagStatusReference struct {
	// message of the status of the reference
	Message *string `json:"message,omitempty"`
	Kind *string `json:"kind,omitempty"`
	// The name of the resource that got created.
	Name *string `json:"name,omitempty"`
	ScopeKind *string `json:"scopeKind,omitempty"`
	ScopeName *string `json:"scopeName,omitempty"`
}

// NewCatalogV1alpha1ReleaseTagStatusReference instantiates a new CatalogV1alpha1ReleaseTagStatusReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1ReleaseTagStatusReference() *CatalogV1alpha1ReleaseTagStatusReference {
	this := CatalogV1alpha1ReleaseTagStatusReference{}
	return &this
}

// NewCatalogV1alpha1ReleaseTagStatusReferenceWithDefaults instantiates a new CatalogV1alpha1ReleaseTagStatusReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1ReleaseTagStatusReferenceWithDefaults() *CatalogV1alpha1ReleaseTagStatusReference {
	this := CatalogV1alpha1ReleaseTagStatusReference{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CatalogV1alpha1ReleaseTagStatusReference) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ReleaseTagStatusReference) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CatalogV1alpha1ReleaseTagStatusReference) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CatalogV1alpha1ReleaseTagStatusReference) SetMessage(v string) {
	o.Message = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *CatalogV1alpha1ReleaseTagStatusReference) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ReleaseTagStatusReference) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *CatalogV1alpha1ReleaseTagStatusReference) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *CatalogV1alpha1ReleaseTagStatusReference) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CatalogV1alpha1ReleaseTagStatusReference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ReleaseTagStatusReference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CatalogV1alpha1ReleaseTagStatusReference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CatalogV1alpha1ReleaseTagStatusReference) SetName(v string) {
	o.Name = &v
}

// GetScopeKind returns the ScopeKind field value if set, zero value otherwise.
func (o *CatalogV1alpha1ReleaseTagStatusReference) GetScopeKind() string {
	if o == nil || IsNil(o.ScopeKind) {
		var ret string
		return ret
	}
	return *o.ScopeKind
}

// GetScopeKindOk returns a tuple with the ScopeKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ReleaseTagStatusReference) GetScopeKindOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeKind) {
		return nil, false
	}
	return o.ScopeKind, true
}

// HasScopeKind returns a boolean if a field has been set.
func (o *CatalogV1alpha1ReleaseTagStatusReference) HasScopeKind() bool {
	if o != nil && !IsNil(o.ScopeKind) {
		return true
	}

	return false
}

// SetScopeKind gets a reference to the given string and assigns it to the ScopeKind field.
func (o *CatalogV1alpha1ReleaseTagStatusReference) SetScopeKind(v string) {
	o.ScopeKind = &v
}

// GetScopeName returns the ScopeName field value if set, zero value otherwise.
func (o *CatalogV1alpha1ReleaseTagStatusReference) GetScopeName() string {
	if o == nil || IsNil(o.ScopeName) {
		var ret string
		return ret
	}
	return *o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ReleaseTagStatusReference) GetScopeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeName) {
		return nil, false
	}
	return o.ScopeName, true
}

// HasScopeName returns a boolean if a field has been set.
func (o *CatalogV1alpha1ReleaseTagStatusReference) HasScopeName() bool {
	if o != nil && !IsNil(o.ScopeName) {
		return true
	}

	return false
}

// SetScopeName gets a reference to the given string and assigns it to the ScopeName field.
func (o *CatalogV1alpha1ReleaseTagStatusReference) SetScopeName(v string) {
	o.ScopeName = &v
}

func (o CatalogV1alpha1ReleaseTagStatusReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1ReleaseTagStatusReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ScopeKind) {
		toSerialize["scopeKind"] = o.ScopeKind
	}
	if !IsNil(o.ScopeName) {
		toSerialize["scopeName"] = o.ScopeName
	}
	return toSerialize, nil
}

type NullableCatalogV1alpha1ReleaseTagStatusReference struct {
	value *CatalogV1alpha1ReleaseTagStatusReference
	isSet bool
}

func (v NullableCatalogV1alpha1ReleaseTagStatusReference) Get() *CatalogV1alpha1ReleaseTagStatusReference {
	return v.value
}

func (v *NullableCatalogV1alpha1ReleaseTagStatusReference) Set(val *CatalogV1alpha1ReleaseTagStatusReference) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ReleaseTagStatusReference) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ReleaseTagStatusReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ReleaseTagStatusReference(val *CatalogV1alpha1ReleaseTagStatusReference) *NullableCatalogV1alpha1ReleaseTagStatusReference {
	return &NullableCatalogV1alpha1ReleaseTagStatusReference{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ReleaseTagStatusReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ReleaseTagStatusReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


