/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManagementV1alpha1DataplaneSpecGitHub type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1DataplaneSpecGitHub{}

// ManagementV1alpha1DataplaneSpecGitHub The configuration common to all GitHub agents that use this dataplane
type ManagementV1alpha1DataplaneSpecGitHub struct {
	Type *string `json:"type,omitempty"`
	// The repository name used for api specs discovery
	Name string `json:"name" validate:"regexp=^[\\\\w-\\\\.]+$"`
	// The repository owner Name
	OwnerName string `json:"ownerName" validate:"regexp=^(?!-)(?!.*--)[a-zA-Z0-9-]{1,37}(?<!-)$"`
	Filter *ManagementV1alpha1DataplaneSpecGitHubFilter `json:"filter,omitempty"`
}

type _ManagementV1alpha1DataplaneSpecGitHub ManagementV1alpha1DataplaneSpecGitHub

// NewManagementV1alpha1DataplaneSpecGitHub instantiates a new ManagementV1alpha1DataplaneSpecGitHub object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1DataplaneSpecGitHub(name string, ownerName string) *ManagementV1alpha1DataplaneSpecGitHub {
	this := ManagementV1alpha1DataplaneSpecGitHub{}
	this.Name = name
	this.OwnerName = ownerName
	return &this
}

// NewManagementV1alpha1DataplaneSpecGitHubWithDefaults instantiates a new ManagementV1alpha1DataplaneSpecGitHub object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1DataplaneSpecGitHubWithDefaults() *ManagementV1alpha1DataplaneSpecGitHub {
	this := ManagementV1alpha1DataplaneSpecGitHub{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ManagementV1alpha1DataplaneSpecGitHub) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHub) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHub) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ManagementV1alpha1DataplaneSpecGitHub) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value
func (o *ManagementV1alpha1DataplaneSpecGitHub) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHub) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ManagementV1alpha1DataplaneSpecGitHub) SetName(v string) {
	o.Name = v
}

// GetOwnerName returns the OwnerName field value
func (o *ManagementV1alpha1DataplaneSpecGitHub) GetOwnerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHub) GetOwnerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerName, true
}

// SetOwnerName sets field value
func (o *ManagementV1alpha1DataplaneSpecGitHub) SetOwnerName(v string) {
	o.OwnerName = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ManagementV1alpha1DataplaneSpecGitHub) GetFilter() ManagementV1alpha1DataplaneSpecGitHubFilter {
	if o == nil || IsNil(o.Filter) {
		var ret ManagementV1alpha1DataplaneSpecGitHubFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHub) GetFilterOk() (*ManagementV1alpha1DataplaneSpecGitHubFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ManagementV1alpha1DataplaneSpecGitHub) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given ManagementV1alpha1DataplaneSpecGitHubFilter and assigns it to the Filter field.
func (o *ManagementV1alpha1DataplaneSpecGitHub) SetFilter(v ManagementV1alpha1DataplaneSpecGitHubFilter) {
	o.Filter = &v
}

func (o ManagementV1alpha1DataplaneSpecGitHub) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1DataplaneSpecGitHub) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["name"] = o.Name
	toSerialize["ownerName"] = o.OwnerName
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	return toSerialize, nil
}

func (o *ManagementV1alpha1DataplaneSpecGitHub) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"ownerName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagementV1alpha1DataplaneSpecGitHub := _ManagementV1alpha1DataplaneSpecGitHub{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagementV1alpha1DataplaneSpecGitHub)

	if err != nil {
		return err
	}

	*o = ManagementV1alpha1DataplaneSpecGitHub(varManagementV1alpha1DataplaneSpecGitHub)

	return err
}

type NullableManagementV1alpha1DataplaneSpecGitHub struct {
	value *ManagementV1alpha1DataplaneSpecGitHub
	isSet bool
}

func (v NullableManagementV1alpha1DataplaneSpecGitHub) Get() *ManagementV1alpha1DataplaneSpecGitHub {
	return v.value
}

func (v *NullableManagementV1alpha1DataplaneSpecGitHub) Set(val *ManagementV1alpha1DataplaneSpecGitHub) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1DataplaneSpecGitHub) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1DataplaneSpecGitHub) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1DataplaneSpecGitHub(val *ManagementV1alpha1DataplaneSpecGitHub) *NullableManagementV1alpha1DataplaneSpecGitHub {
	return &NullableManagementV1alpha1DataplaneSpecGitHub{value: val, isSet: true}
}

func (v NullableManagementV1alpha1DataplaneSpecGitHub) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1DataplaneSpecGitHub) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


