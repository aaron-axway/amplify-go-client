/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CatalogV1alpha1PublishedProductSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1PublishedProductSpec{}

// CatalogV1alpha1PublishedProductSpec struct for CatalogV1alpha1PublishedProductSpec
type CatalogV1alpha1PublishedProductSpec struct {
	Product *CatalogV1alpha1PublishedProductSpecProduct `json:"product,omitempty"`
	Resources *CatalogV1alpha1PublishedProductSpecResources `json:"resources,omitempty"`
}

// NewCatalogV1alpha1PublishedProductSpec instantiates a new CatalogV1alpha1PublishedProductSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1PublishedProductSpec() *CatalogV1alpha1PublishedProductSpec {
	this := CatalogV1alpha1PublishedProductSpec{}
	return &this
}

// NewCatalogV1alpha1PublishedProductSpecWithDefaults instantiates a new CatalogV1alpha1PublishedProductSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1PublishedProductSpecWithDefaults() *CatalogV1alpha1PublishedProductSpec {
	this := CatalogV1alpha1PublishedProductSpec{}
	return &this
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *CatalogV1alpha1PublishedProductSpec) GetProduct() CatalogV1alpha1PublishedProductSpecProduct {
	if o == nil || IsNil(o.Product) {
		var ret CatalogV1alpha1PublishedProductSpecProduct
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1PublishedProductSpec) GetProductOk() (*CatalogV1alpha1PublishedProductSpecProduct, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *CatalogV1alpha1PublishedProductSpec) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given CatalogV1alpha1PublishedProductSpecProduct and assigns it to the Product field.
func (o *CatalogV1alpha1PublishedProductSpec) SetProduct(v CatalogV1alpha1PublishedProductSpecProduct) {
	o.Product = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *CatalogV1alpha1PublishedProductSpec) GetResources() CatalogV1alpha1PublishedProductSpecResources {
	if o == nil || IsNil(o.Resources) {
		var ret CatalogV1alpha1PublishedProductSpecResources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1PublishedProductSpec) GetResourcesOk() (*CatalogV1alpha1PublishedProductSpecResources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *CatalogV1alpha1PublishedProductSpec) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given CatalogV1alpha1PublishedProductSpecResources and assigns it to the Resources field.
func (o *CatalogV1alpha1PublishedProductSpec) SetResources(v CatalogV1alpha1PublishedProductSpecResources) {
	o.Resources = &v
}

func (o CatalogV1alpha1PublishedProductSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1PublishedProductSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	return toSerialize, nil
}

type NullableCatalogV1alpha1PublishedProductSpec struct {
	value *CatalogV1alpha1PublishedProductSpec
	isSet bool
}

func (v NullableCatalogV1alpha1PublishedProductSpec) Get() *CatalogV1alpha1PublishedProductSpec {
	return v.value
}

func (v *NullableCatalogV1alpha1PublishedProductSpec) Set(val *CatalogV1alpha1PublishedProductSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1PublishedProductSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1PublishedProductSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1PublishedProductSpec(val *CatalogV1alpha1PublishedProductSpec) *NullableCatalogV1alpha1PublishedProductSpec {
	return &NullableCatalogV1alpha1PublishedProductSpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1PublishedProductSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1PublishedProductSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


