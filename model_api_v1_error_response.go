/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiV1ErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiV1ErrorResponse{}

// ApiV1ErrorResponse Detail for standard error responses.
type ApiV1ErrorResponse struct {
	Errors []ApiV1ErrorResponseErrorsInner `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApiV1ErrorResponse ApiV1ErrorResponse

// NewApiV1ErrorResponse instantiates a new ApiV1ErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV1ErrorResponse() *ApiV1ErrorResponse {
	this := ApiV1ErrorResponse{}
	return &this
}

// NewApiV1ErrorResponseWithDefaults instantiates a new ApiV1ErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV1ErrorResponseWithDefaults() *ApiV1ErrorResponse {
	this := ApiV1ErrorResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ApiV1ErrorResponse) GetErrors() []ApiV1ErrorResponseErrorsInner {
	if o == nil || IsNil(o.Errors) {
		var ret []ApiV1ErrorResponseErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1ErrorResponse) GetErrorsOk() ([]ApiV1ErrorResponseErrorsInner, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ApiV1ErrorResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ApiV1ErrorResponseErrorsInner and assigns it to the Errors field.
func (o *ApiV1ErrorResponse) SetErrors(v []ApiV1ErrorResponseErrorsInner) {
	o.Errors = v
}

func (o ApiV1ErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiV1ErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiV1ErrorResponse) UnmarshalJSON(data []byte) (err error) {
	varApiV1ErrorResponse := _ApiV1ErrorResponse{}

	err = json.Unmarshal(data, &varApiV1ErrorResponse)

	if err != nil {
		return err
	}

	*o = ApiV1ErrorResponse(varApiV1ErrorResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiV1ErrorResponse struct {
	value *ApiV1ErrorResponse
	isSet bool
}

func (v NullableApiV1ErrorResponse) Get() *ApiV1ErrorResponse {
	return v.value
}

func (v *NullableApiV1ErrorResponse) Set(val *ApiV1ErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV1ErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV1ErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV1ErrorResponse(val *ApiV1ErrorResponse) *NullableApiV1ErrorResponse {
	return &NullableApiV1ErrorResponse{value: val, isSet: true}
}

func (v NullableApiV1ErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV1ErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


