/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogV1DocumentResourceSpecData - struct for CatalogV1DocumentResourceSpecData
type CatalogV1DocumentResourceSpecData struct {
	CatalogV1DocumentResourceSpecBinaryData *CatalogV1DocumentResourceSpecBinaryData
	CatalogV1DocumentResourceSpecTextData *CatalogV1DocumentResourceSpecTextData
	CatalogV1DocumentResourceSpecUrl *CatalogV1DocumentResourceSpecUrl
}

// CatalogV1DocumentResourceSpecBinaryDataAsCatalogV1DocumentResourceSpecData is a convenience function that returns CatalogV1DocumentResourceSpecBinaryData wrapped in CatalogV1DocumentResourceSpecData
func CatalogV1DocumentResourceSpecBinaryDataAsCatalogV1DocumentResourceSpecData(v *CatalogV1DocumentResourceSpecBinaryData) CatalogV1DocumentResourceSpecData {
	return CatalogV1DocumentResourceSpecData{
		CatalogV1DocumentResourceSpecBinaryData: v,
	}
}

// CatalogV1DocumentResourceSpecTextDataAsCatalogV1DocumentResourceSpecData is a convenience function that returns CatalogV1DocumentResourceSpecTextData wrapped in CatalogV1DocumentResourceSpecData
func CatalogV1DocumentResourceSpecTextDataAsCatalogV1DocumentResourceSpecData(v *CatalogV1DocumentResourceSpecTextData) CatalogV1DocumentResourceSpecData {
	return CatalogV1DocumentResourceSpecData{
		CatalogV1DocumentResourceSpecTextData: v,
	}
}

// CatalogV1DocumentResourceSpecUrlAsCatalogV1DocumentResourceSpecData is a convenience function that returns CatalogV1DocumentResourceSpecUrl wrapped in CatalogV1DocumentResourceSpecData
func CatalogV1DocumentResourceSpecUrlAsCatalogV1DocumentResourceSpecData(v *CatalogV1DocumentResourceSpecUrl) CatalogV1DocumentResourceSpecData {
	return CatalogV1DocumentResourceSpecData{
		CatalogV1DocumentResourceSpecUrl: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogV1DocumentResourceSpecData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogV1DocumentResourceSpecBinaryData
	err = newStrictDecoder(data).Decode(&dst.CatalogV1DocumentResourceSpecBinaryData)
	if err == nil {
		jsonCatalogV1DocumentResourceSpecBinaryData, _ := json.Marshal(dst.CatalogV1DocumentResourceSpecBinaryData)
		if string(jsonCatalogV1DocumentResourceSpecBinaryData) == "{}" { // empty struct
			dst.CatalogV1DocumentResourceSpecBinaryData = nil
		} else {
			if err = validator.Validate(dst.CatalogV1DocumentResourceSpecBinaryData); err != nil {
				dst.CatalogV1DocumentResourceSpecBinaryData = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1DocumentResourceSpecBinaryData = nil
	}

	// try to unmarshal data into CatalogV1DocumentResourceSpecTextData
	err = newStrictDecoder(data).Decode(&dst.CatalogV1DocumentResourceSpecTextData)
	if err == nil {
		jsonCatalogV1DocumentResourceSpecTextData, _ := json.Marshal(dst.CatalogV1DocumentResourceSpecTextData)
		if string(jsonCatalogV1DocumentResourceSpecTextData) == "{}" { // empty struct
			dst.CatalogV1DocumentResourceSpecTextData = nil
		} else {
			if err = validator.Validate(dst.CatalogV1DocumentResourceSpecTextData); err != nil {
				dst.CatalogV1DocumentResourceSpecTextData = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1DocumentResourceSpecTextData = nil
	}

	// try to unmarshal data into CatalogV1DocumentResourceSpecUrl
	err = newStrictDecoder(data).Decode(&dst.CatalogV1DocumentResourceSpecUrl)
	if err == nil {
		jsonCatalogV1DocumentResourceSpecUrl, _ := json.Marshal(dst.CatalogV1DocumentResourceSpecUrl)
		if string(jsonCatalogV1DocumentResourceSpecUrl) == "{}" { // empty struct
			dst.CatalogV1DocumentResourceSpecUrl = nil
		} else {
			if err = validator.Validate(dst.CatalogV1DocumentResourceSpecUrl); err != nil {
				dst.CatalogV1DocumentResourceSpecUrl = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1DocumentResourceSpecUrl = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogV1DocumentResourceSpecBinaryData = nil
		dst.CatalogV1DocumentResourceSpecTextData = nil
		dst.CatalogV1DocumentResourceSpecUrl = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogV1DocumentResourceSpecData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogV1DocumentResourceSpecData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogV1DocumentResourceSpecData) MarshalJSON() ([]byte, error) {
	if src.CatalogV1DocumentResourceSpecBinaryData != nil {
		return json.Marshal(&src.CatalogV1DocumentResourceSpecBinaryData)
	}

	if src.CatalogV1DocumentResourceSpecTextData != nil {
		return json.Marshal(&src.CatalogV1DocumentResourceSpecTextData)
	}

	if src.CatalogV1DocumentResourceSpecUrl != nil {
		return json.Marshal(&src.CatalogV1DocumentResourceSpecUrl)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogV1DocumentResourceSpecData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogV1DocumentResourceSpecBinaryData != nil {
		return obj.CatalogV1DocumentResourceSpecBinaryData
	}

	if obj.CatalogV1DocumentResourceSpecTextData != nil {
		return obj.CatalogV1DocumentResourceSpecTextData
	}

	if obj.CatalogV1DocumentResourceSpecUrl != nil {
		return obj.CatalogV1DocumentResourceSpecUrl
	}

	// all schemas are nil
	return nil
}

type NullableCatalogV1DocumentResourceSpecData struct {
	value *CatalogV1DocumentResourceSpecData
	isSet bool
}

func (v NullableCatalogV1DocumentResourceSpecData) Get() *CatalogV1DocumentResourceSpecData {
	return v.value
}

func (v *NullableCatalogV1DocumentResourceSpecData) Set(val *CatalogV1DocumentResourceSpecData) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1DocumentResourceSpecData) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1DocumentResourceSpecData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1DocumentResourceSpecData(val *CatalogV1DocumentResourceSpecData) *NullableCatalogV1DocumentResourceSpecData {
	return &NullableCatalogV1DocumentResourceSpecData{value: val, isSet: true}
}

func (v NullableCatalogV1DocumentResourceSpecData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1DocumentResourceSpecData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


