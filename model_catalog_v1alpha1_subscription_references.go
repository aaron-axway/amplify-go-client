/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
)

// checks if the CatalogV1alpha1SubscriptionReferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1SubscriptionReferences{}

// CatalogV1alpha1SubscriptionReferences struct for CatalogV1alpha1SubscriptionReferences
type CatalogV1alpha1SubscriptionReferences struct {
	// Reference a source Subscription if the Subscription was generated from a Subscription migration to a new Product Plan.
	Subscription *string `json:"subscription,omitempty"`
}

// NewCatalogV1alpha1SubscriptionReferences instantiates a new CatalogV1alpha1SubscriptionReferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1SubscriptionReferences() *CatalogV1alpha1SubscriptionReferences {
	this := CatalogV1alpha1SubscriptionReferences{}
	return &this
}

// NewCatalogV1alpha1SubscriptionReferencesWithDefaults instantiates a new CatalogV1alpha1SubscriptionReferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1SubscriptionReferencesWithDefaults() *CatalogV1alpha1SubscriptionReferences {
	this := CatalogV1alpha1SubscriptionReferences{}
	return &this
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *CatalogV1alpha1SubscriptionReferences) GetSubscription() string {
	if o == nil || IsNil(o.Subscription) {
		var ret string
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionReferences) GetSubscriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *CatalogV1alpha1SubscriptionReferences) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given string and assigns it to the Subscription field.
func (o *CatalogV1alpha1SubscriptionReferences) SetSubscription(v string) {
	o.Subscription = &v
}

func (o CatalogV1alpha1SubscriptionReferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1SubscriptionReferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	return toSerialize, nil
}

type NullableCatalogV1alpha1SubscriptionReferences struct {
	value *CatalogV1alpha1SubscriptionReferences
	isSet bool
}

func (v NullableCatalogV1alpha1SubscriptionReferences) Get() *CatalogV1alpha1SubscriptionReferences {
	return v.value
}

func (v *NullableCatalogV1alpha1SubscriptionReferences) Set(val *CatalogV1alpha1SubscriptionReferences) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1SubscriptionReferences) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1SubscriptionReferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1SubscriptionReferences(val *CatalogV1alpha1SubscriptionReferences) *NullableCatalogV1alpha1SubscriptionReferences {
	return &NullableCatalogV1alpha1SubscriptionReferences{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1SubscriptionReferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1SubscriptionReferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


