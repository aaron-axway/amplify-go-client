/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
)

// checks if the ManagementV1alpha1K8SResourceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1K8SResourceSpec{}

// ManagementV1alpha1K8SResourceSpec struct for ManagementV1alpha1K8SResourceSpec
type ManagementV1alpha1K8SResourceSpec struct {
	ResourceDiscovery *string `json:"resourceDiscovery,omitempty"`
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	Uid *string `json:"uid,omitempty"`
	OwnerReferences []ManagementV1alpha1K8SResourceSpecOwnerReferencesInner `json:"ownerReferences,omitempty"`
	ResourceSpec map[string]interface{} `json:"resourceSpec,omitempty"`
	ResourceStatus map[string]interface{} `json:"resourceStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManagementV1alpha1K8SResourceSpec ManagementV1alpha1K8SResourceSpec

// NewManagementV1alpha1K8SResourceSpec instantiates a new ManagementV1alpha1K8SResourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1K8SResourceSpec() *ManagementV1alpha1K8SResourceSpec {
	this := ManagementV1alpha1K8SResourceSpec{}
	return &this
}

// NewManagementV1alpha1K8SResourceSpecWithDefaults instantiates a new ManagementV1alpha1K8SResourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1K8SResourceSpecWithDefaults() *ManagementV1alpha1K8SResourceSpec {
	this := ManagementV1alpha1K8SResourceSpec{}
	return &this
}

// GetResourceDiscovery returns the ResourceDiscovery field value if set, zero value otherwise.
func (o *ManagementV1alpha1K8SResourceSpec) GetResourceDiscovery() string {
	if o == nil || IsNil(o.ResourceDiscovery) {
		var ret string
		return ret
	}
	return *o.ResourceDiscovery
}

// GetResourceDiscoveryOk returns a tuple with the ResourceDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1K8SResourceSpec) GetResourceDiscoveryOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceDiscovery) {
		return nil, false
	}
	return o.ResourceDiscovery, true
}

// HasResourceDiscovery returns a boolean if a field has been set.
func (o *ManagementV1alpha1K8SResourceSpec) HasResourceDiscovery() bool {
	if o != nil && !IsNil(o.ResourceDiscovery) {
		return true
	}

	return false
}

// SetResourceDiscovery gets a reference to the given string and assigns it to the ResourceDiscovery field.
func (o *ManagementV1alpha1K8SResourceSpec) SetResourceDiscovery(v string) {
	o.ResourceDiscovery = &v
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *ManagementV1alpha1K8SResourceSpec) GetResourceVersion() string {
	if o == nil || IsNil(o.ResourceVersion) {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1K8SResourceSpec) GetResourceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceVersion) {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *ManagementV1alpha1K8SResourceSpec) HasResourceVersion() bool {
	if o != nil && !IsNil(o.ResourceVersion) {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *ManagementV1alpha1K8SResourceSpec) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *ManagementV1alpha1K8SResourceSpec) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1K8SResourceSpec) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *ManagementV1alpha1K8SResourceSpec) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *ManagementV1alpha1K8SResourceSpec) SetUid(v string) {
	o.Uid = &v
}

// GetOwnerReferences returns the OwnerReferences field value if set, zero value otherwise.
func (o *ManagementV1alpha1K8SResourceSpec) GetOwnerReferences() []ManagementV1alpha1K8SResourceSpecOwnerReferencesInner {
	if o == nil || IsNil(o.OwnerReferences) {
		var ret []ManagementV1alpha1K8SResourceSpecOwnerReferencesInner
		return ret
	}
	return o.OwnerReferences
}

// GetOwnerReferencesOk returns a tuple with the OwnerReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1K8SResourceSpec) GetOwnerReferencesOk() ([]ManagementV1alpha1K8SResourceSpecOwnerReferencesInner, bool) {
	if o == nil || IsNil(o.OwnerReferences) {
		return nil, false
	}
	return o.OwnerReferences, true
}

// HasOwnerReferences returns a boolean if a field has been set.
func (o *ManagementV1alpha1K8SResourceSpec) HasOwnerReferences() bool {
	if o != nil && !IsNil(o.OwnerReferences) {
		return true
	}

	return false
}

// SetOwnerReferences gets a reference to the given []ManagementV1alpha1K8SResourceSpecOwnerReferencesInner and assigns it to the OwnerReferences field.
func (o *ManagementV1alpha1K8SResourceSpec) SetOwnerReferences(v []ManagementV1alpha1K8SResourceSpecOwnerReferencesInner) {
	o.OwnerReferences = v
}

// GetResourceSpec returns the ResourceSpec field value if set, zero value otherwise.
func (o *ManagementV1alpha1K8SResourceSpec) GetResourceSpec() map[string]interface{} {
	if o == nil || IsNil(o.ResourceSpec) {
		var ret map[string]interface{}
		return ret
	}
	return o.ResourceSpec
}

// GetResourceSpecOk returns a tuple with the ResourceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1K8SResourceSpec) GetResourceSpecOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ResourceSpec) {
		return map[string]interface{}{}, false
	}
	return o.ResourceSpec, true
}

// HasResourceSpec returns a boolean if a field has been set.
func (o *ManagementV1alpha1K8SResourceSpec) HasResourceSpec() bool {
	if o != nil && !IsNil(o.ResourceSpec) {
		return true
	}

	return false
}

// SetResourceSpec gets a reference to the given map[string]interface{} and assigns it to the ResourceSpec field.
func (o *ManagementV1alpha1K8SResourceSpec) SetResourceSpec(v map[string]interface{}) {
	o.ResourceSpec = v
}

// GetResourceStatus returns the ResourceStatus field value if set, zero value otherwise.
func (o *ManagementV1alpha1K8SResourceSpec) GetResourceStatus() map[string]interface{} {
	if o == nil || IsNil(o.ResourceStatus) {
		var ret map[string]interface{}
		return ret
	}
	return o.ResourceStatus
}

// GetResourceStatusOk returns a tuple with the ResourceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1K8SResourceSpec) GetResourceStatusOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ResourceStatus) {
		return map[string]interface{}{}, false
	}
	return o.ResourceStatus, true
}

// HasResourceStatus returns a boolean if a field has been set.
func (o *ManagementV1alpha1K8SResourceSpec) HasResourceStatus() bool {
	if o != nil && !IsNil(o.ResourceStatus) {
		return true
	}

	return false
}

// SetResourceStatus gets a reference to the given map[string]interface{} and assigns it to the ResourceStatus field.
func (o *ManagementV1alpha1K8SResourceSpec) SetResourceStatus(v map[string]interface{}) {
	o.ResourceStatus = v
}

func (o ManagementV1alpha1K8SResourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1K8SResourceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceDiscovery) {
		toSerialize["resourceDiscovery"] = o.ResourceDiscovery
	}
	if !IsNil(o.ResourceVersion) {
		toSerialize["resourceVersion"] = o.ResourceVersion
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.OwnerReferences) {
		toSerialize["ownerReferences"] = o.OwnerReferences
	}
	if !IsNil(o.ResourceSpec) {
		toSerialize["resourceSpec"] = o.ResourceSpec
	}
	if !IsNil(o.ResourceStatus) {
		toSerialize["resourceStatus"] = o.ResourceStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManagementV1alpha1K8SResourceSpec) UnmarshalJSON(data []byte) (err error) {
	varManagementV1alpha1K8SResourceSpec := _ManagementV1alpha1K8SResourceSpec{}

	err = json.Unmarshal(data, &varManagementV1alpha1K8SResourceSpec)

	if err != nil {
		return err
	}

	*o = ManagementV1alpha1K8SResourceSpec(varManagementV1alpha1K8SResourceSpec)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resourceDiscovery")
		delete(additionalProperties, "resourceVersion")
		delete(additionalProperties, "uid")
		delete(additionalProperties, "ownerReferences")
		delete(additionalProperties, "resourceSpec")
		delete(additionalProperties, "resourceStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManagementV1alpha1K8SResourceSpec struct {
	value *ManagementV1alpha1K8SResourceSpec
	isSet bool
}

func (v NullableManagementV1alpha1K8SResourceSpec) Get() *ManagementV1alpha1K8SResourceSpec {
	return v.value
}

func (v *NullableManagementV1alpha1K8SResourceSpec) Set(val *ManagementV1alpha1K8SResourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1K8SResourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1K8SResourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1K8SResourceSpec(val *ManagementV1alpha1K8SResourceSpec) *NullableManagementV1alpha1K8SResourceSpec {
	return &NullableManagementV1alpha1K8SResourceSpec{value: val, isSet: true}
}

func (v NullableManagementV1alpha1K8SResourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1K8SResourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


