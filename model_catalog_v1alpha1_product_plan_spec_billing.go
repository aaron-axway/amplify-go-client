/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1ProductPlanSpecBilling type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1ProductPlanSpecBilling{}

// CatalogV1alpha1ProductPlanSpecBilling Paid plan billing details.
type CatalogV1alpha1ProductPlanSpecBilling struct {
	Currency string `json:"currency" validate:"regexp=^[A-Z]{3}$"`
	// The base price for the plan.
	Price *float64 `json:"price,omitempty"`
	// The billing cycle type.
	Cycle *string `json:"cycle,omitempty"`
	Interval string `json:"interval"`
	Setup *CatalogV1alpha1ProductPlanSpecBillingSetup `json:"setup,omitempty"`
}

type _CatalogV1alpha1ProductPlanSpecBilling CatalogV1alpha1ProductPlanSpecBilling

// NewCatalogV1alpha1ProductPlanSpecBilling instantiates a new CatalogV1alpha1ProductPlanSpecBilling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1ProductPlanSpecBilling(currency string, interval string) *CatalogV1alpha1ProductPlanSpecBilling {
	this := CatalogV1alpha1ProductPlanSpecBilling{}
	this.Currency = currency
	var price float64 = 0
	this.Price = &price
	var cycle string = "recurring"
	this.Cycle = &cycle
	this.Interval = interval
	return &this
}

// NewCatalogV1alpha1ProductPlanSpecBillingWithDefaults instantiates a new CatalogV1alpha1ProductPlanSpecBilling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1ProductPlanSpecBillingWithDefaults() *CatalogV1alpha1ProductPlanSpecBilling {
	this := CatalogV1alpha1ProductPlanSpecBilling{}
	var price float64 = 0
	this.Price = &price
	var cycle string = "recurring"
	this.Cycle = &cycle
	return &this
}

// GetCurrency returns the Currency field value
func (o *CatalogV1alpha1ProductPlanSpecBilling) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpecBilling) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CatalogV1alpha1ProductPlanSpecBilling) SetCurrency(v string) {
	o.Currency = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CatalogV1alpha1ProductPlanSpecBilling) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpecBilling) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CatalogV1alpha1ProductPlanSpecBilling) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *CatalogV1alpha1ProductPlanSpecBilling) SetPrice(v float64) {
	o.Price = &v
}

// GetCycle returns the Cycle field value if set, zero value otherwise.
func (o *CatalogV1alpha1ProductPlanSpecBilling) GetCycle() string {
	if o == nil || IsNil(o.Cycle) {
		var ret string
		return ret
	}
	return *o.Cycle
}

// GetCycleOk returns a tuple with the Cycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpecBilling) GetCycleOk() (*string, bool) {
	if o == nil || IsNil(o.Cycle) {
		return nil, false
	}
	return o.Cycle, true
}

// HasCycle returns a boolean if a field has been set.
func (o *CatalogV1alpha1ProductPlanSpecBilling) HasCycle() bool {
	if o != nil && !IsNil(o.Cycle) {
		return true
	}

	return false
}

// SetCycle gets a reference to the given string and assigns it to the Cycle field.
func (o *CatalogV1alpha1ProductPlanSpecBilling) SetCycle(v string) {
	o.Cycle = &v
}

// GetInterval returns the Interval field value
func (o *CatalogV1alpha1ProductPlanSpecBilling) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpecBilling) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *CatalogV1alpha1ProductPlanSpecBilling) SetInterval(v string) {
	o.Interval = v
}

// GetSetup returns the Setup field value if set, zero value otherwise.
func (o *CatalogV1alpha1ProductPlanSpecBilling) GetSetup() CatalogV1alpha1ProductPlanSpecBillingSetup {
	if o == nil || IsNil(o.Setup) {
		var ret CatalogV1alpha1ProductPlanSpecBillingSetup
		return ret
	}
	return *o.Setup
}

// GetSetupOk returns a tuple with the Setup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanSpecBilling) GetSetupOk() (*CatalogV1alpha1ProductPlanSpecBillingSetup, bool) {
	if o == nil || IsNil(o.Setup) {
		return nil, false
	}
	return o.Setup, true
}

// HasSetup returns a boolean if a field has been set.
func (o *CatalogV1alpha1ProductPlanSpecBilling) HasSetup() bool {
	if o != nil && !IsNil(o.Setup) {
		return true
	}

	return false
}

// SetSetup gets a reference to the given CatalogV1alpha1ProductPlanSpecBillingSetup and assigns it to the Setup field.
func (o *CatalogV1alpha1ProductPlanSpecBilling) SetSetup(v CatalogV1alpha1ProductPlanSpecBillingSetup) {
	o.Setup = &v
}

func (o CatalogV1alpha1ProductPlanSpecBilling) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1ProductPlanSpecBilling) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Cycle) {
		toSerialize["cycle"] = o.Cycle
	}
	toSerialize["interval"] = o.Interval
	if !IsNil(o.Setup) {
		toSerialize["setup"] = o.Setup
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1ProductPlanSpecBilling) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"interval",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1ProductPlanSpecBilling := _CatalogV1alpha1ProductPlanSpecBilling{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1ProductPlanSpecBilling)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1ProductPlanSpecBilling(varCatalogV1alpha1ProductPlanSpecBilling)

	return err
}

type NullableCatalogV1alpha1ProductPlanSpecBilling struct {
	value *CatalogV1alpha1ProductPlanSpecBilling
	isSet bool
}

func (v NullableCatalogV1alpha1ProductPlanSpecBilling) Get() *CatalogV1alpha1ProductPlanSpecBilling {
	return v.value
}

func (v *NullableCatalogV1alpha1ProductPlanSpecBilling) Set(val *CatalogV1alpha1ProductPlanSpecBilling) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ProductPlanSpecBilling) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ProductPlanSpecBilling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ProductPlanSpecBilling(val *CatalogV1alpha1ProductPlanSpecBilling) *NullableCatalogV1alpha1ProductPlanSpecBilling {
	return &NullableCatalogV1alpha1ProductPlanSpecBilling{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ProductPlanSpecBilling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ProductPlanSpecBilling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


