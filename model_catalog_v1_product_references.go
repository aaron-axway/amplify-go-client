/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
)

// checks if the CatalogV1ProductReferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1ProductReferences{}

// CatalogV1ProductReferences struct for CatalogV1ProductReferences
type CatalogV1ProductReferences struct {
	// Computed DocumentResources used in all Product's Documents articles.
	DocumentResources []string `json:"documentResources,omitempty"`
	// Computed latest AssetReleases for each Asset reference in the Product.
	Assets []CatalogV1ProductReferencesAssetsInner `json:"assets,omitempty"`
	// The marketplaces this product has been published to.
	Marketplaces []CatalogV1ProductReferencesMarketplacesInner `json:"marketplaces,omitempty"`
}

// NewCatalogV1ProductReferences instantiates a new CatalogV1ProductReferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1ProductReferences() *CatalogV1ProductReferences {
	this := CatalogV1ProductReferences{}
	return &this
}

// NewCatalogV1ProductReferencesWithDefaults instantiates a new CatalogV1ProductReferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1ProductReferencesWithDefaults() *CatalogV1ProductReferences {
	this := CatalogV1ProductReferences{}
	return &this
}

// GetDocumentResources returns the DocumentResources field value if set, zero value otherwise.
func (o *CatalogV1ProductReferences) GetDocumentResources() []string {
	if o == nil || IsNil(o.DocumentResources) {
		var ret []string
		return ret
	}
	return o.DocumentResources
}

// GetDocumentResourcesOk returns a tuple with the DocumentResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1ProductReferences) GetDocumentResourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.DocumentResources) {
		return nil, false
	}
	return o.DocumentResources, true
}

// HasDocumentResources returns a boolean if a field has been set.
func (o *CatalogV1ProductReferences) HasDocumentResources() bool {
	if o != nil && !IsNil(o.DocumentResources) {
		return true
	}

	return false
}

// SetDocumentResources gets a reference to the given []string and assigns it to the DocumentResources field.
func (o *CatalogV1ProductReferences) SetDocumentResources(v []string) {
	o.DocumentResources = v
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *CatalogV1ProductReferences) GetAssets() []CatalogV1ProductReferencesAssetsInner {
	if o == nil || IsNil(o.Assets) {
		var ret []CatalogV1ProductReferencesAssetsInner
		return ret
	}
	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1ProductReferences) GetAssetsOk() ([]CatalogV1ProductReferencesAssetsInner, bool) {
	if o == nil || IsNil(o.Assets) {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *CatalogV1ProductReferences) HasAssets() bool {
	if o != nil && !IsNil(o.Assets) {
		return true
	}

	return false
}

// SetAssets gets a reference to the given []CatalogV1ProductReferencesAssetsInner and assigns it to the Assets field.
func (o *CatalogV1ProductReferences) SetAssets(v []CatalogV1ProductReferencesAssetsInner) {
	o.Assets = v
}

// GetMarketplaces returns the Marketplaces field value if set, zero value otherwise.
func (o *CatalogV1ProductReferences) GetMarketplaces() []CatalogV1ProductReferencesMarketplacesInner {
	if o == nil || IsNil(o.Marketplaces) {
		var ret []CatalogV1ProductReferencesMarketplacesInner
		return ret
	}
	return o.Marketplaces
}

// GetMarketplacesOk returns a tuple with the Marketplaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1ProductReferences) GetMarketplacesOk() ([]CatalogV1ProductReferencesMarketplacesInner, bool) {
	if o == nil || IsNil(o.Marketplaces) {
		return nil, false
	}
	return o.Marketplaces, true
}

// HasMarketplaces returns a boolean if a field has been set.
func (o *CatalogV1ProductReferences) HasMarketplaces() bool {
	if o != nil && !IsNil(o.Marketplaces) {
		return true
	}

	return false
}

// SetMarketplaces gets a reference to the given []CatalogV1ProductReferencesMarketplacesInner and assigns it to the Marketplaces field.
func (o *CatalogV1ProductReferences) SetMarketplaces(v []CatalogV1ProductReferencesMarketplacesInner) {
	o.Marketplaces = v
}

func (o CatalogV1ProductReferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1ProductReferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentResources) {
		toSerialize["documentResources"] = o.DocumentResources
	}
	if !IsNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !IsNil(o.Marketplaces) {
		toSerialize["marketplaces"] = o.Marketplaces
	}
	return toSerialize, nil
}

type NullableCatalogV1ProductReferences struct {
	value *CatalogV1ProductReferences
	isSet bool
}

func (v NullableCatalogV1ProductReferences) Get() *CatalogV1ProductReferences {
	return v.value
}

func (v *NullableCatalogV1ProductReferences) Set(val *CatalogV1ProductReferences) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1ProductReferences) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1ProductReferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1ProductReferences(val *CatalogV1ProductReferences) *NullableCatalogV1ProductReferences {
	return &NullableCatalogV1ProductReferences{value: val, isSet: true}
}

func (v NullableCatalogV1ProductReferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1ProductReferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


