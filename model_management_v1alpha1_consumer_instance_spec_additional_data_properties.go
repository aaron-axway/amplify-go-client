/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties{}

// ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties The Catalog Item properties for additional data.
type ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties struct {
	// Defines the unstructured data type. Example 'APIBuilderConnector' or 'SDK'.
	Type string `json:"type"`
	// Defines the Content Type of the data.
	ContentType string `json:"contentType"`
	// Short name for the unstructured data.
	Label *string `json:"label,omitempty"`
	// File name used to be sent as part of the content disposition header for revision unstructured data download.
	FileName *string `json:"fileName,omitempty"`
	// Base64 encoded data for the Catalog Item revision content.
	Data string `json:"data"`
}

type _ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties

// NewManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties instantiates a new ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties(type_ string, contentType string, data string) *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties {
	this := ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties{}
	this.Type = type_
	this.ContentType = contentType
	this.Data = data
	return &this
}

// NewManagementV1alpha1ConsumerInstanceSpecAdditionalDataPropertiesWithDefaults instantiates a new ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1ConsumerInstanceSpecAdditionalDataPropertiesWithDefaults() *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties {
	this := ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties{}
	return &this
}

// GetType returns the Type field value
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) SetType(v string) {
	o.Type = v
}

// GetContentType returns the ContentType field value
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) SetContentType(v string) {
	o.ContentType = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) SetLabel(v string) {
	o.Label = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) SetFileName(v string) {
	o.FileName = &v
}

// GetData returns the Data field value
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) SetData(v string) {
	o.Data = v
}

func (o ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["contentType"] = o.ContentType
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"contentType",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties := _ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties)

	if err != nil {
		return err
	}

	*o = ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties(varManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties)

	return err
}

type NullableManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties struct {
	value *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties
	isSet bool
}

func (v NullableManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) Get() *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties {
	return v.value
}

func (v *NullableManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) Set(val *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties(val *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) *NullableManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties {
	return &NullableManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties{value: val, isSet: true}
}

func (v NullableManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


