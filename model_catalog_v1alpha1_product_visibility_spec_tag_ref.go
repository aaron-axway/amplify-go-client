/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1ProductVisibilitySpecTagRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1ProductVisibilitySpecTagRef{}

// CatalogV1alpha1ProductVisibilitySpecTagRef struct for CatalogV1alpha1ProductVisibilitySpecTagRef
type CatalogV1alpha1ProductVisibilitySpecTagRef struct {
	Type string `json:"type"`
	// Value of a platform team tag.
	Value string `json:"value"`
}

type _CatalogV1alpha1ProductVisibilitySpecTagRef CatalogV1alpha1ProductVisibilitySpecTagRef

// NewCatalogV1alpha1ProductVisibilitySpecTagRef instantiates a new CatalogV1alpha1ProductVisibilitySpecTagRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1ProductVisibilitySpecTagRef(type_ string, value string) *CatalogV1alpha1ProductVisibilitySpecTagRef {
	this := CatalogV1alpha1ProductVisibilitySpecTagRef{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewCatalogV1alpha1ProductVisibilitySpecTagRefWithDefaults instantiates a new CatalogV1alpha1ProductVisibilitySpecTagRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1ProductVisibilitySpecTagRefWithDefaults() *CatalogV1alpha1ProductVisibilitySpecTagRef {
	this := CatalogV1alpha1ProductVisibilitySpecTagRef{}
	return &this
}

// GetType returns the Type field value
func (o *CatalogV1alpha1ProductVisibilitySpecTagRef) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductVisibilitySpecTagRef) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogV1alpha1ProductVisibilitySpecTagRef) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *CatalogV1alpha1ProductVisibilitySpecTagRef) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductVisibilitySpecTagRef) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CatalogV1alpha1ProductVisibilitySpecTagRef) SetValue(v string) {
	o.Value = v
}

func (o CatalogV1alpha1ProductVisibilitySpecTagRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1ProductVisibilitySpecTagRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *CatalogV1alpha1ProductVisibilitySpecTagRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1ProductVisibilitySpecTagRef := _CatalogV1alpha1ProductVisibilitySpecTagRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1ProductVisibilitySpecTagRef)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1ProductVisibilitySpecTagRef(varCatalogV1alpha1ProductVisibilitySpecTagRef)

	return err
}

type NullableCatalogV1alpha1ProductVisibilitySpecTagRef struct {
	value *CatalogV1alpha1ProductVisibilitySpecTagRef
	isSet bool
}

func (v NullableCatalogV1alpha1ProductVisibilitySpecTagRef) Get() *CatalogV1alpha1ProductVisibilitySpecTagRef {
	return v.value
}

func (v *NullableCatalogV1alpha1ProductVisibilitySpecTagRef) Set(val *CatalogV1alpha1ProductVisibilitySpecTagRef) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ProductVisibilitySpecTagRef) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ProductVisibilitySpecTagRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ProductVisibilitySpecTagRef(val *CatalogV1alpha1ProductVisibilitySpecTagRef) *NullableCatalogV1alpha1ProductVisibilitySpecTagRef {
	return &NullableCatalogV1alpha1ProductVisibilitySpecTagRef{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ProductVisibilitySpecTagRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ProductVisibilitySpecTagRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


