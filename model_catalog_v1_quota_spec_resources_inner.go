/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogV1QuotaSpecResourcesInner - struct for CatalogV1QuotaSpecResourcesInner
type CatalogV1QuotaSpecResourcesInner struct {
	CatalogV1QuotaSpecAssetResourceRef *CatalogV1QuotaSpecAssetResourceRef
}

// CatalogV1QuotaSpecAssetResourceRefAsCatalogV1QuotaSpecResourcesInner is a convenience function that returns CatalogV1QuotaSpecAssetResourceRef wrapped in CatalogV1QuotaSpecResourcesInner
func CatalogV1QuotaSpecAssetResourceRefAsCatalogV1QuotaSpecResourcesInner(v *CatalogV1QuotaSpecAssetResourceRef) CatalogV1QuotaSpecResourcesInner {
	return CatalogV1QuotaSpecResourcesInner{
		CatalogV1QuotaSpecAssetResourceRef: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogV1QuotaSpecResourcesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogV1QuotaSpecAssetResourceRef
	err = newStrictDecoder(data).Decode(&dst.CatalogV1QuotaSpecAssetResourceRef)
	if err == nil {
		jsonCatalogV1QuotaSpecAssetResourceRef, _ := json.Marshal(dst.CatalogV1QuotaSpecAssetResourceRef)
		if string(jsonCatalogV1QuotaSpecAssetResourceRef) == "{}" { // empty struct
			dst.CatalogV1QuotaSpecAssetResourceRef = nil
		} else {
			if err = validator.Validate(dst.CatalogV1QuotaSpecAssetResourceRef); err != nil {
				dst.CatalogV1QuotaSpecAssetResourceRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1QuotaSpecAssetResourceRef = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogV1QuotaSpecAssetResourceRef = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogV1QuotaSpecResourcesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogV1QuotaSpecResourcesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogV1QuotaSpecResourcesInner) MarshalJSON() ([]byte, error) {
	if src.CatalogV1QuotaSpecAssetResourceRef != nil {
		return json.Marshal(&src.CatalogV1QuotaSpecAssetResourceRef)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogV1QuotaSpecResourcesInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogV1QuotaSpecAssetResourceRef != nil {
		return obj.CatalogV1QuotaSpecAssetResourceRef
	}

	// all schemas are nil
	return nil
}

type NullableCatalogV1QuotaSpecResourcesInner struct {
	value *CatalogV1QuotaSpecResourcesInner
	isSet bool
}

func (v NullableCatalogV1QuotaSpecResourcesInner) Get() *CatalogV1QuotaSpecResourcesInner {
	return v.value
}

func (v *NullableCatalogV1QuotaSpecResourcesInner) Set(val *CatalogV1QuotaSpecResourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1QuotaSpecResourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1QuotaSpecResourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1QuotaSpecResourcesInner(val *CatalogV1QuotaSpecResourcesInner) *NullableCatalogV1QuotaSpecResourcesInner {
	return &NullableCatalogV1QuotaSpecResourcesInner{value: val, isSet: true}
}

func (v NullableCatalogV1QuotaSpecResourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1QuotaSpecResourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


