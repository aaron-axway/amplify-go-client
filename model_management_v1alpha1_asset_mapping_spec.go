/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManagementV1alpha1AssetMappingSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1AssetMappingSpec{}

// ManagementV1alpha1AssetMappingSpec struct for ManagementV1alpha1AssetMappingSpec
type ManagementV1alpha1AssetMappingSpec struct {
	// Reference to the executed AssetMappingTemplate.
	AssetMappingTemplate *string `json:"assetMappingTemplate,omitempty"`
	Inputs CatalogV1alpha1AssetMappingSpecInputs `json:"inputs"`
}

type _ManagementV1alpha1AssetMappingSpec ManagementV1alpha1AssetMappingSpec

// NewManagementV1alpha1AssetMappingSpec instantiates a new ManagementV1alpha1AssetMappingSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1AssetMappingSpec(inputs CatalogV1alpha1AssetMappingSpecInputs) *ManagementV1alpha1AssetMappingSpec {
	this := ManagementV1alpha1AssetMappingSpec{}
	this.Inputs = inputs
	return &this
}

// NewManagementV1alpha1AssetMappingSpecWithDefaults instantiates a new ManagementV1alpha1AssetMappingSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1AssetMappingSpecWithDefaults() *ManagementV1alpha1AssetMappingSpec {
	this := ManagementV1alpha1AssetMappingSpec{}
	return &this
}

// GetAssetMappingTemplate returns the AssetMappingTemplate field value if set, zero value otherwise.
func (o *ManagementV1alpha1AssetMappingSpec) GetAssetMappingTemplate() string {
	if o == nil || IsNil(o.AssetMappingTemplate) {
		var ret string
		return ret
	}
	return *o.AssetMappingTemplate
}

// GetAssetMappingTemplateOk returns a tuple with the AssetMappingTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1AssetMappingSpec) GetAssetMappingTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.AssetMappingTemplate) {
		return nil, false
	}
	return o.AssetMappingTemplate, true
}

// HasAssetMappingTemplate returns a boolean if a field has been set.
func (o *ManagementV1alpha1AssetMappingSpec) HasAssetMappingTemplate() bool {
	if o != nil && !IsNil(o.AssetMappingTemplate) {
		return true
	}

	return false
}

// SetAssetMappingTemplate gets a reference to the given string and assigns it to the AssetMappingTemplate field.
func (o *ManagementV1alpha1AssetMappingSpec) SetAssetMappingTemplate(v string) {
	o.AssetMappingTemplate = &v
}

// GetInputs returns the Inputs field value
func (o *ManagementV1alpha1AssetMappingSpec) GetInputs() CatalogV1alpha1AssetMappingSpecInputs {
	if o == nil {
		var ret CatalogV1alpha1AssetMappingSpecInputs
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1AssetMappingSpec) GetInputsOk() (*CatalogV1alpha1AssetMappingSpecInputs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Inputs, true
}

// SetInputs sets field value
func (o *ManagementV1alpha1AssetMappingSpec) SetInputs(v CatalogV1alpha1AssetMappingSpecInputs) {
	o.Inputs = v
}

func (o ManagementV1alpha1AssetMappingSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1AssetMappingSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetMappingTemplate) {
		toSerialize["assetMappingTemplate"] = o.AssetMappingTemplate
	}
	toSerialize["inputs"] = o.Inputs
	return toSerialize, nil
}

func (o *ManagementV1alpha1AssetMappingSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"inputs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagementV1alpha1AssetMappingSpec := _ManagementV1alpha1AssetMappingSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagementV1alpha1AssetMappingSpec)

	if err != nil {
		return err
	}

	*o = ManagementV1alpha1AssetMappingSpec(varManagementV1alpha1AssetMappingSpec)

	return err
}

type NullableManagementV1alpha1AssetMappingSpec struct {
	value *ManagementV1alpha1AssetMappingSpec
	isSet bool
}

func (v NullableManagementV1alpha1AssetMappingSpec) Get() *ManagementV1alpha1AssetMappingSpec {
	return v.value
}

func (v *NullableManagementV1alpha1AssetMappingSpec) Set(val *ManagementV1alpha1AssetMappingSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1AssetMappingSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1AssetMappingSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1AssetMappingSpec(val *ManagementV1alpha1AssetMappingSpec) *NullableManagementV1alpha1AssetMappingSpec {
	return &NullableManagementV1alpha1AssetMappingSpec{value: val, isSet: true}
}

func (v NullableManagementV1alpha1AssetMappingSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1AssetMappingSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


