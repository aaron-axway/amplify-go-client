/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManagementV1alpha1WatchTopicSpecFiltersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1WatchTopicSpecFiltersInner{}

// ManagementV1alpha1WatchTopicSpecFiltersInner struct for ManagementV1alpha1WatchTopicSpecFiltersInner
type ManagementV1alpha1WatchTopicSpecFiltersInner struct {
	// Value for the group of the resource. Use \"*\" for any.
	Group string `json:"group"`
	Scope *ManagementV1alpha1WatchTopicSpecFiltersInnerScope `json:"scope,omitempty"`
	// Value for the Kind of the resource. Use \"*\" for any.
	Kind string `json:"kind"`
	// Name of the resource. Use \"*\" for any.
	Name string `json:"name" validate:"regexp=^([\\\\*])|([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)"`
	Type []string `json:"type"`
}

type _ManagementV1alpha1WatchTopicSpecFiltersInner ManagementV1alpha1WatchTopicSpecFiltersInner

// NewManagementV1alpha1WatchTopicSpecFiltersInner instantiates a new ManagementV1alpha1WatchTopicSpecFiltersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1WatchTopicSpecFiltersInner(group string, kind string, name string, type_ []string) *ManagementV1alpha1WatchTopicSpecFiltersInner {
	this := ManagementV1alpha1WatchTopicSpecFiltersInner{}
	this.Group = group
	this.Kind = kind
	this.Name = name
	this.Type = type_
	return &this
}

// NewManagementV1alpha1WatchTopicSpecFiltersInnerWithDefaults instantiates a new ManagementV1alpha1WatchTopicSpecFiltersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1WatchTopicSpecFiltersInnerWithDefaults() *ManagementV1alpha1WatchTopicSpecFiltersInner {
	this := ManagementV1alpha1WatchTopicSpecFiltersInner{}
	return &this
}

// GetGroup returns the Group field value
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) SetGroup(v string) {
	o.Group = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) GetScope() ManagementV1alpha1WatchTopicSpecFiltersInnerScope {
	if o == nil || IsNil(o.Scope) {
		var ret ManagementV1alpha1WatchTopicSpecFiltersInnerScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) GetScopeOk() (*ManagementV1alpha1WatchTopicSpecFiltersInnerScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given ManagementV1alpha1WatchTopicSpecFiltersInnerScope and assigns it to the Scope field.
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) SetScope(v ManagementV1alpha1WatchTopicSpecFiltersInnerScope) {
	o.Scope = &v
}

// GetKind returns the Kind field value
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) GetType() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) GetTypeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) SetType(v []string) {
	o.Type = v
}

func (o ManagementV1alpha1WatchTopicSpecFiltersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1WatchTopicSpecFiltersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group"] = o.Group
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	toSerialize["kind"] = o.Kind
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ManagementV1alpha1WatchTopicSpecFiltersInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group",
		"kind",
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagementV1alpha1WatchTopicSpecFiltersInner := _ManagementV1alpha1WatchTopicSpecFiltersInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagementV1alpha1WatchTopicSpecFiltersInner)

	if err != nil {
		return err
	}

	*o = ManagementV1alpha1WatchTopicSpecFiltersInner(varManagementV1alpha1WatchTopicSpecFiltersInner)

	return err
}

type NullableManagementV1alpha1WatchTopicSpecFiltersInner struct {
	value *ManagementV1alpha1WatchTopicSpecFiltersInner
	isSet bool
}

func (v NullableManagementV1alpha1WatchTopicSpecFiltersInner) Get() *ManagementV1alpha1WatchTopicSpecFiltersInner {
	return v.value
}

func (v *NullableManagementV1alpha1WatchTopicSpecFiltersInner) Set(val *ManagementV1alpha1WatchTopicSpecFiltersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1WatchTopicSpecFiltersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1WatchTopicSpecFiltersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1WatchTopicSpecFiltersInner(val *ManagementV1alpha1WatchTopicSpecFiltersInner) *NullableManagementV1alpha1WatchTopicSpecFiltersInner {
	return &NullableManagementV1alpha1WatchTopicSpecFiltersInner{value: val, isSet: true}
}

func (v NullableManagementV1alpha1WatchTopicSpecFiltersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1WatchTopicSpecFiltersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


