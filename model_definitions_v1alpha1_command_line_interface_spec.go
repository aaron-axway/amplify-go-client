/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DefinitionsV1alpha1CommandLineInterfaceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionsV1alpha1CommandLineInterfaceSpec{}

// DefinitionsV1alpha1CommandLineInterfaceSpec struct for DefinitionsV1alpha1CommandLineInterfaceSpec
type DefinitionsV1alpha1CommandLineInterfaceSpec struct {
	// A reference to a resource definition.
	ResourceDefinition string `json:"resourceDefinition"`
	Names *DefinitionsV1alpha1CommandLineInterfaceSpecNames `json:"names,omitempty"`
	// Defines an ordered list of the columns and data to be rendered using a table output.
	Columns []DefinitionsV1alpha1CommandLineInterfaceSpecColumnsInner `json:"columns"`
}

type _DefinitionsV1alpha1CommandLineInterfaceSpec DefinitionsV1alpha1CommandLineInterfaceSpec

// NewDefinitionsV1alpha1CommandLineInterfaceSpec instantiates a new DefinitionsV1alpha1CommandLineInterfaceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionsV1alpha1CommandLineInterfaceSpec(resourceDefinition string, columns []DefinitionsV1alpha1CommandLineInterfaceSpecColumnsInner) *DefinitionsV1alpha1CommandLineInterfaceSpec {
	this := DefinitionsV1alpha1CommandLineInterfaceSpec{}
	this.ResourceDefinition = resourceDefinition
	this.Columns = columns
	return &this
}

// NewDefinitionsV1alpha1CommandLineInterfaceSpecWithDefaults instantiates a new DefinitionsV1alpha1CommandLineInterfaceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionsV1alpha1CommandLineInterfaceSpecWithDefaults() *DefinitionsV1alpha1CommandLineInterfaceSpec {
	this := DefinitionsV1alpha1CommandLineInterfaceSpec{}
	return &this
}

// GetResourceDefinition returns the ResourceDefinition field value
func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) GetResourceDefinition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceDefinition
}

// GetResourceDefinitionOk returns a tuple with the ResourceDefinition field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) GetResourceDefinitionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceDefinition, true
}

// SetResourceDefinition sets field value
func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) SetResourceDefinition(v string) {
	o.ResourceDefinition = v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) GetNames() DefinitionsV1alpha1CommandLineInterfaceSpecNames {
	if o == nil || IsNil(o.Names) {
		var ret DefinitionsV1alpha1CommandLineInterfaceSpecNames
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) GetNamesOk() (*DefinitionsV1alpha1CommandLineInterfaceSpecNames, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given DefinitionsV1alpha1CommandLineInterfaceSpecNames and assigns it to the Names field.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) SetNames(v DefinitionsV1alpha1CommandLineInterfaceSpecNames) {
	o.Names = &v
}

// GetColumns returns the Columns field value
func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) GetColumns() []DefinitionsV1alpha1CommandLineInterfaceSpecColumnsInner {
	if o == nil {
		var ret []DefinitionsV1alpha1CommandLineInterfaceSpecColumnsInner
		return ret
	}

	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) GetColumnsOk() ([]DefinitionsV1alpha1CommandLineInterfaceSpecColumnsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Columns, true
}

// SetColumns sets field value
func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) SetColumns(v []DefinitionsV1alpha1CommandLineInterfaceSpecColumnsInner) {
	o.Columns = v
}

func (o DefinitionsV1alpha1CommandLineInterfaceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionsV1alpha1CommandLineInterfaceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceDefinition"] = o.ResourceDefinition
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	toSerialize["columns"] = o.Columns
	return toSerialize, nil
}

func (o *DefinitionsV1alpha1CommandLineInterfaceSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceDefinition",
		"columns",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDefinitionsV1alpha1CommandLineInterfaceSpec := _DefinitionsV1alpha1CommandLineInterfaceSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDefinitionsV1alpha1CommandLineInterfaceSpec)

	if err != nil {
		return err
	}

	*o = DefinitionsV1alpha1CommandLineInterfaceSpec(varDefinitionsV1alpha1CommandLineInterfaceSpec)

	return err
}

type NullableDefinitionsV1alpha1CommandLineInterfaceSpec struct {
	value *DefinitionsV1alpha1CommandLineInterfaceSpec
	isSet bool
}

func (v NullableDefinitionsV1alpha1CommandLineInterfaceSpec) Get() *DefinitionsV1alpha1CommandLineInterfaceSpec {
	return v.value
}

func (v *NullableDefinitionsV1alpha1CommandLineInterfaceSpec) Set(val *DefinitionsV1alpha1CommandLineInterfaceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionsV1alpha1CommandLineInterfaceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionsV1alpha1CommandLineInterfaceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionsV1alpha1CommandLineInterfaceSpec(val *DefinitionsV1alpha1CommandLineInterfaceSpec) *NullableDefinitionsV1alpha1CommandLineInterfaceSpec {
	return &NullableDefinitionsV1alpha1CommandLineInterfaceSpec{value: val, isSet: true}
}

func (v NullableDefinitionsV1alpha1CommandLineInterfaceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionsV1alpha1CommandLineInterfaceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


