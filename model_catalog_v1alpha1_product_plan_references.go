/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CatalogV1alpha1ProductPlanReferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1ProductPlanReferences{}

// CatalogV1alpha1ProductPlanReferences struct for CatalogV1alpha1ProductPlanReferences
type CatalogV1alpha1ProductPlanReferences struct {
	Product *CatalogV1alpha1ProductPlanReferencesProduct `json:"product,omitempty"`
}

// NewCatalogV1alpha1ProductPlanReferences instantiates a new CatalogV1alpha1ProductPlanReferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1ProductPlanReferences() *CatalogV1alpha1ProductPlanReferences {
	this := CatalogV1alpha1ProductPlanReferences{}
	return &this
}

// NewCatalogV1alpha1ProductPlanReferencesWithDefaults instantiates a new CatalogV1alpha1ProductPlanReferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1ProductPlanReferencesWithDefaults() *CatalogV1alpha1ProductPlanReferences {
	this := CatalogV1alpha1ProductPlanReferences{}
	return &this
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *CatalogV1alpha1ProductPlanReferences) GetProduct() CatalogV1alpha1ProductPlanReferencesProduct {
	if o == nil || IsNil(o.Product) {
		var ret CatalogV1alpha1ProductPlanReferencesProduct
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ProductPlanReferences) GetProductOk() (*CatalogV1alpha1ProductPlanReferencesProduct, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *CatalogV1alpha1ProductPlanReferences) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given CatalogV1alpha1ProductPlanReferencesProduct and assigns it to the Product field.
func (o *CatalogV1alpha1ProductPlanReferences) SetProduct(v CatalogV1alpha1ProductPlanReferencesProduct) {
	o.Product = &v
}

func (o CatalogV1alpha1ProductPlanReferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1ProductPlanReferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	return toSerialize, nil
}

type NullableCatalogV1alpha1ProductPlanReferences struct {
	value *CatalogV1alpha1ProductPlanReferences
	isSet bool
}

func (v NullableCatalogV1alpha1ProductPlanReferences) Get() *CatalogV1alpha1ProductPlanReferences {
	return v.value
}

func (v *NullableCatalogV1alpha1ProductPlanReferences) Set(val *CatalogV1alpha1ProductPlanReferences) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ProductPlanReferences) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ProductPlanReferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ProductPlanReferences(val *CatalogV1alpha1ProductPlanReferences) *NullableCatalogV1alpha1ProductPlanReferences {
	return &NullableCatalogV1alpha1ProductPlanReferences{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ProductPlanReferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ProductPlanReferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


