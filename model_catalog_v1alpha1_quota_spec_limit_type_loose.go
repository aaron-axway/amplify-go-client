/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1QuotaSpecLimitTypeLoose type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1QuotaSpecLimitTypeLoose{}

// CatalogV1alpha1QuotaSpecLimitTypeLoose struct for CatalogV1alpha1QuotaSpecLimitTypeLoose
type CatalogV1alpha1QuotaSpecLimitTypeLoose struct {
	Type string `json:"type"`
	// The limit of the unit that is provided.
	Value int32 `json:"value"`
	Overages CatalogV1QuotaSpecLimitTypeLooseOverages `json:"overages"`
}

type _CatalogV1alpha1QuotaSpecLimitTypeLoose CatalogV1alpha1QuotaSpecLimitTypeLoose

// NewCatalogV1alpha1QuotaSpecLimitTypeLoose instantiates a new CatalogV1alpha1QuotaSpecLimitTypeLoose object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1QuotaSpecLimitTypeLoose(type_ string, value int32, overages CatalogV1QuotaSpecLimitTypeLooseOverages) *CatalogV1alpha1QuotaSpecLimitTypeLoose {
	this := CatalogV1alpha1QuotaSpecLimitTypeLoose{}
	this.Type = type_
	this.Value = value
	this.Overages = overages
	return &this
}

// NewCatalogV1alpha1QuotaSpecLimitTypeLooseWithDefaults instantiates a new CatalogV1alpha1QuotaSpecLimitTypeLoose object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1QuotaSpecLimitTypeLooseWithDefaults() *CatalogV1alpha1QuotaSpecLimitTypeLoose {
	this := CatalogV1alpha1QuotaSpecLimitTypeLoose{}
	return &this
}

// GetType returns the Type field value
func (o *CatalogV1alpha1QuotaSpecLimitTypeLoose) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1QuotaSpecLimitTypeLoose) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogV1alpha1QuotaSpecLimitTypeLoose) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *CatalogV1alpha1QuotaSpecLimitTypeLoose) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1QuotaSpecLimitTypeLoose) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CatalogV1alpha1QuotaSpecLimitTypeLoose) SetValue(v int32) {
	o.Value = v
}

// GetOverages returns the Overages field value
func (o *CatalogV1alpha1QuotaSpecLimitTypeLoose) GetOverages() CatalogV1QuotaSpecLimitTypeLooseOverages {
	if o == nil {
		var ret CatalogV1QuotaSpecLimitTypeLooseOverages
		return ret
	}

	return o.Overages
}

// GetOveragesOk returns a tuple with the Overages field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1QuotaSpecLimitTypeLoose) GetOveragesOk() (*CatalogV1QuotaSpecLimitTypeLooseOverages, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Overages, true
}

// SetOverages sets field value
func (o *CatalogV1alpha1QuotaSpecLimitTypeLoose) SetOverages(v CatalogV1QuotaSpecLimitTypeLooseOverages) {
	o.Overages = v
}

func (o CatalogV1alpha1QuotaSpecLimitTypeLoose) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1QuotaSpecLimitTypeLoose) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	toSerialize["overages"] = o.Overages
	return toSerialize, nil
}

func (o *CatalogV1alpha1QuotaSpecLimitTypeLoose) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"value",
		"overages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1QuotaSpecLimitTypeLoose := _CatalogV1alpha1QuotaSpecLimitTypeLoose{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1QuotaSpecLimitTypeLoose)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1QuotaSpecLimitTypeLoose(varCatalogV1alpha1QuotaSpecLimitTypeLoose)

	return err
}

type NullableCatalogV1alpha1QuotaSpecLimitTypeLoose struct {
	value *CatalogV1alpha1QuotaSpecLimitTypeLoose
	isSet bool
}

func (v NullableCatalogV1alpha1QuotaSpecLimitTypeLoose) Get() *CatalogV1alpha1QuotaSpecLimitTypeLoose {
	return v.value
}

func (v *NullableCatalogV1alpha1QuotaSpecLimitTypeLoose) Set(val *CatalogV1alpha1QuotaSpecLimitTypeLoose) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1QuotaSpecLimitTypeLoose) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1QuotaSpecLimitTypeLoose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1QuotaSpecLimitTypeLoose(val *CatalogV1alpha1QuotaSpecLimitTypeLoose) *NullableCatalogV1alpha1QuotaSpecLimitTypeLoose {
	return &NullableCatalogV1alpha1QuotaSpecLimitTypeLoose{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1QuotaSpecLimitTypeLoose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1QuotaSpecLimitTypeLoose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


