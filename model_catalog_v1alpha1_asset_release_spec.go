/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1AssetReleaseSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1AssetReleaseSpec{}

// CatalogV1alpha1AssetReleaseSpec struct for CatalogV1alpha1AssetReleaseSpec
type CatalogV1alpha1AssetReleaseSpec struct {
	// Description of the asset release.
	Description *string `json:"description,omitempty"`
	Type string `json:"type"`
	// version of the asset release.
	Version string `json:"version" validate:"regexp=^(0|([1-9][0-9]*))(\\\\.(0|([1-9][0-9]*))){2}$"`
	Asset string `json:"asset"`
	State *string `json:"state,omitempty"`
	// list of categories for the released asset.
	Categories []string `json:"categories,omitempty"`
}

type _CatalogV1alpha1AssetReleaseSpec CatalogV1alpha1AssetReleaseSpec

// NewCatalogV1alpha1AssetReleaseSpec instantiates a new CatalogV1alpha1AssetReleaseSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1AssetReleaseSpec(type_ string, version string, asset string) *CatalogV1alpha1AssetReleaseSpec {
	this := CatalogV1alpha1AssetReleaseSpec{}
	this.Type = type_
	this.Version = version
	this.Asset = asset
	return &this
}

// NewCatalogV1alpha1AssetReleaseSpecWithDefaults instantiates a new CatalogV1alpha1AssetReleaseSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1AssetReleaseSpecWithDefaults() *CatalogV1alpha1AssetReleaseSpec {
	this := CatalogV1alpha1AssetReleaseSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CatalogV1alpha1AssetReleaseSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetReleaseSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogV1alpha1AssetReleaseSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CatalogV1alpha1AssetReleaseSpec) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *CatalogV1alpha1AssetReleaseSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetReleaseSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogV1alpha1AssetReleaseSpec) SetType(v string) {
	o.Type = v
}

// GetVersion returns the Version field value
func (o *CatalogV1alpha1AssetReleaseSpec) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetReleaseSpec) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *CatalogV1alpha1AssetReleaseSpec) SetVersion(v string) {
	o.Version = v
}

// GetAsset returns the Asset field value
func (o *CatalogV1alpha1AssetReleaseSpec) GetAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetReleaseSpec) GetAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *CatalogV1alpha1AssetReleaseSpec) SetAsset(v string) {
	o.Asset = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CatalogV1alpha1AssetReleaseSpec) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetReleaseSpec) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CatalogV1alpha1AssetReleaseSpec) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CatalogV1alpha1AssetReleaseSpec) SetState(v string) {
	o.State = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *CatalogV1alpha1AssetReleaseSpec) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetReleaseSpec) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *CatalogV1alpha1AssetReleaseSpec) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *CatalogV1alpha1AssetReleaseSpec) SetCategories(v []string) {
	o.Categories = v
}

func (o CatalogV1alpha1AssetReleaseSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1AssetReleaseSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	toSerialize["version"] = o.Version
	toSerialize["asset"] = o.Asset
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1AssetReleaseSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"version",
		"asset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1AssetReleaseSpec := _CatalogV1alpha1AssetReleaseSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1AssetReleaseSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1AssetReleaseSpec(varCatalogV1alpha1AssetReleaseSpec)

	return err
}

type NullableCatalogV1alpha1AssetReleaseSpec struct {
	value *CatalogV1alpha1AssetReleaseSpec
	isSet bool
}

func (v NullableCatalogV1alpha1AssetReleaseSpec) Get() *CatalogV1alpha1AssetReleaseSpec {
	return v.value
}

func (v *NullableCatalogV1alpha1AssetReleaseSpec) Set(val *CatalogV1alpha1AssetReleaseSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1AssetReleaseSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1AssetReleaseSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1AssetReleaseSpec(val *CatalogV1alpha1AssetReleaseSpec) *NullableCatalogV1alpha1AssetReleaseSpec {
	return &NullableCatalogV1alpha1AssetReleaseSpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1AssetReleaseSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1AssetReleaseSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


