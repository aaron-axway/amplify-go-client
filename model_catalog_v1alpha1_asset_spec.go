/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1AssetSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1AssetSpec{}

// CatalogV1alpha1AssetSpec struct for CatalogV1alpha1AssetSpec
type CatalogV1alpha1AssetSpec struct {
	// description of the asset.
	Description *string `json:"description,omitempty"`
	Type string `json:"type"`
	// list of categories for the asset.
	Categories []string `json:"categories,omitempty"`
	AutoRelease *CatalogV1alpha1AssetSpecAutoRelease `json:"autoRelease,omitempty"`
}

type _CatalogV1alpha1AssetSpec CatalogV1alpha1AssetSpec

// NewCatalogV1alpha1AssetSpec instantiates a new CatalogV1alpha1AssetSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1AssetSpec(type_ string) *CatalogV1alpha1AssetSpec {
	this := CatalogV1alpha1AssetSpec{}
	this.Type = type_
	return &this
}

// NewCatalogV1alpha1AssetSpecWithDefaults instantiates a new CatalogV1alpha1AssetSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1AssetSpecWithDefaults() *CatalogV1alpha1AssetSpec {
	this := CatalogV1alpha1AssetSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CatalogV1alpha1AssetSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogV1alpha1AssetSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CatalogV1alpha1AssetSpec) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *CatalogV1alpha1AssetSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogV1alpha1AssetSpec) SetType(v string) {
	o.Type = v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *CatalogV1alpha1AssetSpec) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetSpec) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *CatalogV1alpha1AssetSpec) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *CatalogV1alpha1AssetSpec) SetCategories(v []string) {
	o.Categories = v
}

// GetAutoRelease returns the AutoRelease field value if set, zero value otherwise.
func (o *CatalogV1alpha1AssetSpec) GetAutoRelease() CatalogV1alpha1AssetSpecAutoRelease {
	if o == nil || IsNil(o.AutoRelease) {
		var ret CatalogV1alpha1AssetSpecAutoRelease
		return ret
	}
	return *o.AutoRelease
}

// GetAutoReleaseOk returns a tuple with the AutoRelease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetSpec) GetAutoReleaseOk() (*CatalogV1alpha1AssetSpecAutoRelease, bool) {
	if o == nil || IsNil(o.AutoRelease) {
		return nil, false
	}
	return o.AutoRelease, true
}

// HasAutoRelease returns a boolean if a field has been set.
func (o *CatalogV1alpha1AssetSpec) HasAutoRelease() bool {
	if o != nil && !IsNil(o.AutoRelease) {
		return true
	}

	return false
}

// SetAutoRelease gets a reference to the given CatalogV1alpha1AssetSpecAutoRelease and assigns it to the AutoRelease field.
func (o *CatalogV1alpha1AssetSpec) SetAutoRelease(v CatalogV1alpha1AssetSpecAutoRelease) {
	o.AutoRelease = &v
}

func (o CatalogV1alpha1AssetSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1AssetSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.AutoRelease) {
		toSerialize["autoRelease"] = o.AutoRelease
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1AssetSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1AssetSpec := _CatalogV1alpha1AssetSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1AssetSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1AssetSpec(varCatalogV1alpha1AssetSpec)

	return err
}

type NullableCatalogV1alpha1AssetSpec struct {
	value *CatalogV1alpha1AssetSpec
	isSet bool
}

func (v NullableCatalogV1alpha1AssetSpec) Get() *CatalogV1alpha1AssetSpec {
	return v.value
}

func (v *NullableCatalogV1alpha1AssetSpec) Set(val *CatalogV1alpha1AssetSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1AssetSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1AssetSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1AssetSpec(val *CatalogV1alpha1AssetSpec) *NullableCatalogV1alpha1AssetSpec {
	return &NullableCatalogV1alpha1AssetSpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1AssetSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1AssetSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


