/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
)

// checks if the ApiV1EmbeddedMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiV1EmbeddedMetadata{}

// ApiV1EmbeddedMetadata struct for ApiV1EmbeddedMetadata
type ApiV1EmbeddedMetadata struct {
	// Provides details on resources referencing the current resource. Included if embed parameter contains referencedByResources.
	ReferencedByResources []ApiV1EmbeddedReferencedByResource `json:"referencedByResources,omitempty"`
	// Provides information about resources scoped to the current resource. Included if embed parameter contains metadata.scopedResources.
	ScopedResources []ApiV1EmbeddedScopedResources `json:"scopedResources,omitempty"`
	// Provides additional information about the resources being referenced by the current resource. Included if embed parameter contains metadata.references.
	References []ApiV1EmbeddedReference `json:"references,omitempty"`
}

// NewApiV1EmbeddedMetadata instantiates a new ApiV1EmbeddedMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV1EmbeddedMetadata() *ApiV1EmbeddedMetadata {
	this := ApiV1EmbeddedMetadata{}
	return &this
}

// NewApiV1EmbeddedMetadataWithDefaults instantiates a new ApiV1EmbeddedMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV1EmbeddedMetadataWithDefaults() *ApiV1EmbeddedMetadata {
	this := ApiV1EmbeddedMetadata{}
	return &this
}

// GetReferencedByResources returns the ReferencedByResources field value if set, zero value otherwise.
func (o *ApiV1EmbeddedMetadata) GetReferencedByResources() []ApiV1EmbeddedReferencedByResource {
	if o == nil || IsNil(o.ReferencedByResources) {
		var ret []ApiV1EmbeddedReferencedByResource
		return ret
	}
	return o.ReferencedByResources
}

// GetReferencedByResourcesOk returns a tuple with the ReferencedByResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1EmbeddedMetadata) GetReferencedByResourcesOk() ([]ApiV1EmbeddedReferencedByResource, bool) {
	if o == nil || IsNil(o.ReferencedByResources) {
		return nil, false
	}
	return o.ReferencedByResources, true
}

// HasReferencedByResources returns a boolean if a field has been set.
func (o *ApiV1EmbeddedMetadata) HasReferencedByResources() bool {
	if o != nil && !IsNil(o.ReferencedByResources) {
		return true
	}

	return false
}

// SetReferencedByResources gets a reference to the given []ApiV1EmbeddedReferencedByResource and assigns it to the ReferencedByResources field.
func (o *ApiV1EmbeddedMetadata) SetReferencedByResources(v []ApiV1EmbeddedReferencedByResource) {
	o.ReferencedByResources = v
}

// GetScopedResources returns the ScopedResources field value if set, zero value otherwise.
func (o *ApiV1EmbeddedMetadata) GetScopedResources() []ApiV1EmbeddedScopedResources {
	if o == nil || IsNil(o.ScopedResources) {
		var ret []ApiV1EmbeddedScopedResources
		return ret
	}
	return o.ScopedResources
}

// GetScopedResourcesOk returns a tuple with the ScopedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1EmbeddedMetadata) GetScopedResourcesOk() ([]ApiV1EmbeddedScopedResources, bool) {
	if o == nil || IsNil(o.ScopedResources) {
		return nil, false
	}
	return o.ScopedResources, true
}

// HasScopedResources returns a boolean if a field has been set.
func (o *ApiV1EmbeddedMetadata) HasScopedResources() bool {
	if o != nil && !IsNil(o.ScopedResources) {
		return true
	}

	return false
}

// SetScopedResources gets a reference to the given []ApiV1EmbeddedScopedResources and assigns it to the ScopedResources field.
func (o *ApiV1EmbeddedMetadata) SetScopedResources(v []ApiV1EmbeddedScopedResources) {
	o.ScopedResources = v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *ApiV1EmbeddedMetadata) GetReferences() []ApiV1EmbeddedReference {
	if o == nil || IsNil(o.References) {
		var ret []ApiV1EmbeddedReference
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1EmbeddedMetadata) GetReferencesOk() ([]ApiV1EmbeddedReference, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *ApiV1EmbeddedMetadata) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []ApiV1EmbeddedReference and assigns it to the References field.
func (o *ApiV1EmbeddedMetadata) SetReferences(v []ApiV1EmbeddedReference) {
	o.References = v
}

func (o ApiV1EmbeddedMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiV1EmbeddedMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReferencedByResources) {
		toSerialize["referencedByResources"] = o.ReferencedByResources
	}
	if !IsNil(o.ScopedResources) {
		toSerialize["scopedResources"] = o.ScopedResources
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	return toSerialize, nil
}

type NullableApiV1EmbeddedMetadata struct {
	value *ApiV1EmbeddedMetadata
	isSet bool
}

func (v NullableApiV1EmbeddedMetadata) Get() *ApiV1EmbeddedMetadata {
	return v.value
}

func (v *NullableApiV1EmbeddedMetadata) Set(val *ApiV1EmbeddedMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV1EmbeddedMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV1EmbeddedMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV1EmbeddedMetadata(val *ApiV1EmbeddedMetadata) *NullableApiV1EmbeddedMetadata {
	return &NullableApiV1EmbeddedMetadata{value: val, isSet: true}
}

func (v NullableApiV1EmbeddedMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV1EmbeddedMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


