/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ManagementV1alpha1ConsumerInstanceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1ConsumerInstanceSpec{}

// ManagementV1alpha1ConsumerInstanceSpec struct for ManagementV1alpha1ConsumerInstanceSpec
type ManagementV1alpha1ConsumerInstanceSpec struct {
	// Maps to the name of the Catalog Item. If not provided, the resource title will be used.
	Name *string `json:"name,omitempty"`
	// The name of an APIServiceInstance resource that specifies where the API is deployed.
	ApiServiceInstance *string `json:"apiServiceInstance,omitempty"`
	// Name of the team that owns the Catalog Item. If not provided, the Default team will be used.
	OwningTeam *string `json:"owningTeam,omitempty"`
	// Maps to the description of the Catalog Item. Defaults to the API service description.
	Description *string `json:"description,omitempty"`
	// The visibility of the Catalog Item:  * PUBLIC - If Catalog Item is in PUBLISHED state, it will be visible to the entire organization.  * RESTRICTED - If Catalog Item is in PUBLISHED state, it will be visible to the owning team and teams part of the Catalog Item Access Control List. 
	Visibility *string `json:"visibility,omitempty"`
	// Version name for the revision.
	Version *string `json:"version,omitempty" validate:"regexp=^(?!\\\\s).*(?<!\\\\s)$"`
	// Catalog Item state:  * UNPUBLISHED - Only developers in the owning team will be able to access the Catalog Item.  * PUBLISHED - Developers and Consumers in the owning team and any additional team in the ACL will be able to access the Catalog Item. 
	State *string `json:"state,omitempty"`
	// A way to communicate the status of the service to consumers. Examples: DRAFT, BETA, GA
	Status *string `json:"status,omitempty"`
	// List of tags to be set on the Catalog Item. Max allowed tags for the Catalog Item is 80.
	Tags []string `json:"tags,omitempty"`
	Icon *ManagementV1alpha1ConsumerInstanceSpecIcon `json:"icon,omitempty"`
	// Markdown documentation for the Catalog Item documentation.
	Documentation *string `json:"documentation,omitempty"`
	UnstructuredDataProperties *ManagementV1alpha1ConsumerInstanceSpecUnstructuredDataProperties `json:"unstructuredDataProperties,omitempty"`
	AdditionalDataProperties *ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties `json:"additionalDataProperties,omitempty"`
	Subscription *ManagementV1alpha1ConsumerInstanceSpecSubscription `json:"subscription,omitempty"`
	Categories []string `json:"categories,omitempty"`
}

// NewManagementV1alpha1ConsumerInstanceSpec instantiates a new ManagementV1alpha1ConsumerInstanceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1ConsumerInstanceSpec() *ManagementV1alpha1ConsumerInstanceSpec {
	this := ManagementV1alpha1ConsumerInstanceSpec{}
	return &this
}

// NewManagementV1alpha1ConsumerInstanceSpecWithDefaults instantiates a new ManagementV1alpha1ConsumerInstanceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1ConsumerInstanceSpecWithDefaults() *ManagementV1alpha1ConsumerInstanceSpec {
	this := ManagementV1alpha1ConsumerInstanceSpec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetName(v string) {
	o.Name = &v
}

// GetApiServiceInstance returns the ApiServiceInstance field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetApiServiceInstance() string {
	if o == nil || IsNil(o.ApiServiceInstance) {
		var ret string
		return ret
	}
	return *o.ApiServiceInstance
}

// GetApiServiceInstanceOk returns a tuple with the ApiServiceInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetApiServiceInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.ApiServiceInstance) {
		return nil, false
	}
	return o.ApiServiceInstance, true
}

// HasApiServiceInstance returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasApiServiceInstance() bool {
	if o != nil && !IsNil(o.ApiServiceInstance) {
		return true
	}

	return false
}

// SetApiServiceInstance gets a reference to the given string and assigns it to the ApiServiceInstance field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetApiServiceInstance(v string) {
	o.ApiServiceInstance = &v
}

// GetOwningTeam returns the OwningTeam field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetOwningTeam() string {
	if o == nil || IsNil(o.OwningTeam) {
		var ret string
		return ret
	}
	return *o.OwningTeam
}

// GetOwningTeamOk returns a tuple with the OwningTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetOwningTeamOk() (*string, bool) {
	if o == nil || IsNil(o.OwningTeam) {
		return nil, false
	}
	return o.OwningTeam, true
}

// HasOwningTeam returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasOwningTeam() bool {
	if o != nil && !IsNil(o.OwningTeam) {
		return true
	}

	return false
}

// SetOwningTeam gets a reference to the given string and assigns it to the OwningTeam field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetOwningTeam(v string) {
	o.OwningTeam = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetDescription(v string) {
	o.Description = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetVisibility(v string) {
	o.Visibility = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetVersion(v string) {
	o.Version = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetState(v string) {
	o.State = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetStatus(v string) {
	o.Status = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetTags(v []string) {
	o.Tags = v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetIcon() ManagementV1alpha1ConsumerInstanceSpecIcon {
	if o == nil || IsNil(o.Icon) {
		var ret ManagementV1alpha1ConsumerInstanceSpecIcon
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetIconOk() (*ManagementV1alpha1ConsumerInstanceSpecIcon, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given ManagementV1alpha1ConsumerInstanceSpecIcon and assigns it to the Icon field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetIcon(v ManagementV1alpha1ConsumerInstanceSpecIcon) {
	o.Icon = &v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetDocumentation() string {
	if o == nil || IsNil(o.Documentation) {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetDocumentation(v string) {
	o.Documentation = &v
}

// GetUnstructuredDataProperties returns the UnstructuredDataProperties field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetUnstructuredDataProperties() ManagementV1alpha1ConsumerInstanceSpecUnstructuredDataProperties {
	if o == nil || IsNil(o.UnstructuredDataProperties) {
		var ret ManagementV1alpha1ConsumerInstanceSpecUnstructuredDataProperties
		return ret
	}
	return *o.UnstructuredDataProperties
}

// GetUnstructuredDataPropertiesOk returns a tuple with the UnstructuredDataProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetUnstructuredDataPropertiesOk() (*ManagementV1alpha1ConsumerInstanceSpecUnstructuredDataProperties, bool) {
	if o == nil || IsNil(o.UnstructuredDataProperties) {
		return nil, false
	}
	return o.UnstructuredDataProperties, true
}

// HasUnstructuredDataProperties returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasUnstructuredDataProperties() bool {
	if o != nil && !IsNil(o.UnstructuredDataProperties) {
		return true
	}

	return false
}

// SetUnstructuredDataProperties gets a reference to the given ManagementV1alpha1ConsumerInstanceSpecUnstructuredDataProperties and assigns it to the UnstructuredDataProperties field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetUnstructuredDataProperties(v ManagementV1alpha1ConsumerInstanceSpecUnstructuredDataProperties) {
	o.UnstructuredDataProperties = &v
}

// GetAdditionalDataProperties returns the AdditionalDataProperties field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetAdditionalDataProperties() ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties {
	if o == nil || IsNil(o.AdditionalDataProperties) {
		var ret ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties
		return ret
	}
	return *o.AdditionalDataProperties
}

// GetAdditionalDataPropertiesOk returns a tuple with the AdditionalDataProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetAdditionalDataPropertiesOk() (*ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties, bool) {
	if o == nil || IsNil(o.AdditionalDataProperties) {
		return nil, false
	}
	return o.AdditionalDataProperties, true
}

// HasAdditionalDataProperties returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasAdditionalDataProperties() bool {
	if o != nil && !IsNil(o.AdditionalDataProperties) {
		return true
	}

	return false
}

// SetAdditionalDataProperties gets a reference to the given ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties and assigns it to the AdditionalDataProperties field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetAdditionalDataProperties(v ManagementV1alpha1ConsumerInstanceSpecAdditionalDataProperties) {
	o.AdditionalDataProperties = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetSubscription() ManagementV1alpha1ConsumerInstanceSpecSubscription {
	if o == nil || IsNil(o.Subscription) {
		var ret ManagementV1alpha1ConsumerInstanceSpecSubscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetSubscriptionOk() (*ManagementV1alpha1ConsumerInstanceSpecSubscription, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given ManagementV1alpha1ConsumerInstanceSpecSubscription and assigns it to the Subscription field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetSubscription(v ManagementV1alpha1ConsumerInstanceSpecSubscription) {
	o.Subscription = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ManagementV1alpha1ConsumerInstanceSpec) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *ManagementV1alpha1ConsumerInstanceSpec) SetCategories(v []string) {
	o.Categories = v
}

func (o ManagementV1alpha1ConsumerInstanceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1ConsumerInstanceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ApiServiceInstance) {
		toSerialize["apiServiceInstance"] = o.ApiServiceInstance
	}
	if !IsNil(o.OwningTeam) {
		toSerialize["owningTeam"] = o.OwningTeam
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if !IsNil(o.UnstructuredDataProperties) {
		toSerialize["unstructuredDataProperties"] = o.UnstructuredDataProperties
	}
	if !IsNil(o.AdditionalDataProperties) {
		toSerialize["additionalDataProperties"] = o.AdditionalDataProperties
	}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

type NullableManagementV1alpha1ConsumerInstanceSpec struct {
	value *ManagementV1alpha1ConsumerInstanceSpec
	isSet bool
}

func (v NullableManagementV1alpha1ConsumerInstanceSpec) Get() *ManagementV1alpha1ConsumerInstanceSpec {
	return v.value
}

func (v *NullableManagementV1alpha1ConsumerInstanceSpec) Set(val *ManagementV1alpha1ConsumerInstanceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1ConsumerInstanceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1ConsumerInstanceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1ConsumerInstanceSpec(val *ManagementV1alpha1ConsumerInstanceSpec) *NullableManagementV1alpha1ConsumerInstanceSpec {
	return &NullableManagementV1alpha1ConsumerInstanceSpec{value: val, isSet: true}
}

func (v NullableManagementV1alpha1ConsumerInstanceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1ConsumerInstanceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


