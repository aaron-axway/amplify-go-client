/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ManagementV1alpha1EnvironmentCompliancetasksLinting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1EnvironmentCompliancetasksLinting{}

// ManagementV1alpha1EnvironmentCompliancetasksLinting struct for ManagementV1alpha1EnvironmentCompliancetasksLinting
type ManagementV1alpha1EnvironmentCompliancetasksLinting struct {
	// Name of APISpecLintingRuleset to create linting jobs for.
	StartJobsForRuleset *string `json:"startJobsForRuleset,omitempty"`
	// Name of APISpecLintingRuleset to cancel currently pending linting jobs for.
	CancelJobsForRuleset *string `json:"cancelJobsForRuleset,omitempty"`
}

// NewManagementV1alpha1EnvironmentCompliancetasksLinting instantiates a new ManagementV1alpha1EnvironmentCompliancetasksLinting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1EnvironmentCompliancetasksLinting() *ManagementV1alpha1EnvironmentCompliancetasksLinting {
	this := ManagementV1alpha1EnvironmentCompliancetasksLinting{}
	return &this
}

// NewManagementV1alpha1EnvironmentCompliancetasksLintingWithDefaults instantiates a new ManagementV1alpha1EnvironmentCompliancetasksLinting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1EnvironmentCompliancetasksLintingWithDefaults() *ManagementV1alpha1EnvironmentCompliancetasksLinting {
	this := ManagementV1alpha1EnvironmentCompliancetasksLinting{}
	return &this
}

// GetStartJobsForRuleset returns the StartJobsForRuleset field value if set, zero value otherwise.
func (o *ManagementV1alpha1EnvironmentCompliancetasksLinting) GetStartJobsForRuleset() string {
	if o == nil || IsNil(o.StartJobsForRuleset) {
		var ret string
		return ret
	}
	return *o.StartJobsForRuleset
}

// GetStartJobsForRulesetOk returns a tuple with the StartJobsForRuleset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1EnvironmentCompliancetasksLinting) GetStartJobsForRulesetOk() (*string, bool) {
	if o == nil || IsNil(o.StartJobsForRuleset) {
		return nil, false
	}
	return o.StartJobsForRuleset, true
}

// HasStartJobsForRuleset returns a boolean if a field has been set.
func (o *ManagementV1alpha1EnvironmentCompliancetasksLinting) HasStartJobsForRuleset() bool {
	if o != nil && !IsNil(o.StartJobsForRuleset) {
		return true
	}

	return false
}

// SetStartJobsForRuleset gets a reference to the given string and assigns it to the StartJobsForRuleset field.
func (o *ManagementV1alpha1EnvironmentCompliancetasksLinting) SetStartJobsForRuleset(v string) {
	o.StartJobsForRuleset = &v
}

// GetCancelJobsForRuleset returns the CancelJobsForRuleset field value if set, zero value otherwise.
func (o *ManagementV1alpha1EnvironmentCompliancetasksLinting) GetCancelJobsForRuleset() string {
	if o == nil || IsNil(o.CancelJobsForRuleset) {
		var ret string
		return ret
	}
	return *o.CancelJobsForRuleset
}

// GetCancelJobsForRulesetOk returns a tuple with the CancelJobsForRuleset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1EnvironmentCompliancetasksLinting) GetCancelJobsForRulesetOk() (*string, bool) {
	if o == nil || IsNil(o.CancelJobsForRuleset) {
		return nil, false
	}
	return o.CancelJobsForRuleset, true
}

// HasCancelJobsForRuleset returns a boolean if a field has been set.
func (o *ManagementV1alpha1EnvironmentCompliancetasksLinting) HasCancelJobsForRuleset() bool {
	if o != nil && !IsNil(o.CancelJobsForRuleset) {
		return true
	}

	return false
}

// SetCancelJobsForRuleset gets a reference to the given string and assigns it to the CancelJobsForRuleset field.
func (o *ManagementV1alpha1EnvironmentCompliancetasksLinting) SetCancelJobsForRuleset(v string) {
	o.CancelJobsForRuleset = &v
}

func (o ManagementV1alpha1EnvironmentCompliancetasksLinting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1EnvironmentCompliancetasksLinting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartJobsForRuleset) {
		toSerialize["startJobsForRuleset"] = o.StartJobsForRuleset
	}
	if !IsNil(o.CancelJobsForRuleset) {
		toSerialize["cancelJobsForRuleset"] = o.CancelJobsForRuleset
	}
	return toSerialize, nil
}

type NullableManagementV1alpha1EnvironmentCompliancetasksLinting struct {
	value *ManagementV1alpha1EnvironmentCompliancetasksLinting
	isSet bool
}

func (v NullableManagementV1alpha1EnvironmentCompliancetasksLinting) Get() *ManagementV1alpha1EnvironmentCompliancetasksLinting {
	return v.value
}

func (v *NullableManagementV1alpha1EnvironmentCompliancetasksLinting) Set(val *ManagementV1alpha1EnvironmentCompliancetasksLinting) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1EnvironmentCompliancetasksLinting) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1EnvironmentCompliancetasksLinting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1EnvironmentCompliancetasksLinting(val *ManagementV1alpha1EnvironmentCompliancetasksLinting) *NullableManagementV1alpha1EnvironmentCompliancetasksLinting {
	return &NullableManagementV1alpha1EnvironmentCompliancetasksLinting{value: val, isSet: true}
}

func (v NullableManagementV1alpha1EnvironmentCompliancetasksLinting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1EnvironmentCompliancetasksLinting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


