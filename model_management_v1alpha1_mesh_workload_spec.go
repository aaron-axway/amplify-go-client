/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ManagementV1alpha1MeshWorkloadSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1MeshWorkloadSpec{}

// ManagementV1alpha1MeshWorkloadSpec struct for ManagementV1alpha1MeshWorkloadSpec
type ManagementV1alpha1MeshWorkloadSpec struct {
	// References to k8sresources making up the workload.
	Resources []string `json:"resources,omitempty"`
	// Labels from the k8sresources making up the workload.
	Labels *map[string]string `json:"labels,omitempty"`
	// Discovered ports on the workload.
	Ports []ManagementV1alpha1MeshWorkloadSpecPortsInner `json:"ports,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManagementV1alpha1MeshWorkloadSpec ManagementV1alpha1MeshWorkloadSpec

// NewManagementV1alpha1MeshWorkloadSpec instantiates a new ManagementV1alpha1MeshWorkloadSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1MeshWorkloadSpec() *ManagementV1alpha1MeshWorkloadSpec {
	this := ManagementV1alpha1MeshWorkloadSpec{}
	return &this
}

// NewManagementV1alpha1MeshWorkloadSpecWithDefaults instantiates a new ManagementV1alpha1MeshWorkloadSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1MeshWorkloadSpecWithDefaults() *ManagementV1alpha1MeshWorkloadSpec {
	this := ManagementV1alpha1MeshWorkloadSpec{}
	return &this
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *ManagementV1alpha1MeshWorkloadSpec) GetResources() []string {
	if o == nil || IsNil(o.Resources) {
		var ret []string
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1MeshWorkloadSpec) GetResourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ManagementV1alpha1MeshWorkloadSpec) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []string and assigns it to the Resources field.
func (o *ManagementV1alpha1MeshWorkloadSpec) SetResources(v []string) {
	o.Resources = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ManagementV1alpha1MeshWorkloadSpec) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1MeshWorkloadSpec) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ManagementV1alpha1MeshWorkloadSpec) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ManagementV1alpha1MeshWorkloadSpec) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *ManagementV1alpha1MeshWorkloadSpec) GetPorts() []ManagementV1alpha1MeshWorkloadSpecPortsInner {
	if o == nil || IsNil(o.Ports) {
		var ret []ManagementV1alpha1MeshWorkloadSpecPortsInner
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1MeshWorkloadSpec) GetPortsOk() ([]ManagementV1alpha1MeshWorkloadSpecPortsInner, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *ManagementV1alpha1MeshWorkloadSpec) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []ManagementV1alpha1MeshWorkloadSpecPortsInner and assigns it to the Ports field.
func (o *ManagementV1alpha1MeshWorkloadSpec) SetPorts(v []ManagementV1alpha1MeshWorkloadSpecPortsInner) {
	o.Ports = v
}

func (o ManagementV1alpha1MeshWorkloadSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1MeshWorkloadSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManagementV1alpha1MeshWorkloadSpec) UnmarshalJSON(data []byte) (err error) {
	varManagementV1alpha1MeshWorkloadSpec := _ManagementV1alpha1MeshWorkloadSpec{}

	err = json.Unmarshal(data, &varManagementV1alpha1MeshWorkloadSpec)

	if err != nil {
		return err
	}

	*o = ManagementV1alpha1MeshWorkloadSpec(varManagementV1alpha1MeshWorkloadSpec)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resources")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "ports")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManagementV1alpha1MeshWorkloadSpec struct {
	value *ManagementV1alpha1MeshWorkloadSpec
	isSet bool
}

func (v NullableManagementV1alpha1MeshWorkloadSpec) Get() *ManagementV1alpha1MeshWorkloadSpec {
	return v.value
}

func (v *NullableManagementV1alpha1MeshWorkloadSpec) Set(val *ManagementV1alpha1MeshWorkloadSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1MeshWorkloadSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1MeshWorkloadSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1MeshWorkloadSpec(val *ManagementV1alpha1MeshWorkloadSpec) *NullableManagementV1alpha1MeshWorkloadSpec {
	return &NullableManagementV1alpha1MeshWorkloadSpec{value: val, isSet: true}
}

func (v NullableManagementV1alpha1MeshWorkloadSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1MeshWorkloadSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


