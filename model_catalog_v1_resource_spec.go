/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1ResourceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1ResourceSpec{}

// CatalogV1ResourceSpec struct for CatalogV1ResourceSpec
type CatalogV1ResourceSpec struct {
	// Resource description.
	Description *string `json:"description,omitempty"`
	// Version of the Resource.
	Version *string `json:"version,omitempty"`
	// The type of the resource, example: pdf
	FileType string `json:"fileType"`
	// The content type
	ContentType string `json:"contentType" validate:"regexp=^[-\\\\w.]+\\/[-+\\\\w.]+$"`
	Data CatalogV1ResourceSpecData `json:"data"`
}

type _CatalogV1ResourceSpec CatalogV1ResourceSpec

// NewCatalogV1ResourceSpec instantiates a new CatalogV1ResourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1ResourceSpec(fileType string, contentType string, data CatalogV1ResourceSpecData) *CatalogV1ResourceSpec {
	this := CatalogV1ResourceSpec{}
	this.FileType = fileType
	this.ContentType = contentType
	this.Data = data
	return &this
}

// NewCatalogV1ResourceSpecWithDefaults instantiates a new CatalogV1ResourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1ResourceSpecWithDefaults() *CatalogV1ResourceSpec {
	this := CatalogV1ResourceSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CatalogV1ResourceSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1ResourceSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogV1ResourceSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CatalogV1ResourceSpec) SetDescription(v string) {
	o.Description = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CatalogV1ResourceSpec) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1ResourceSpec) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CatalogV1ResourceSpec) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CatalogV1ResourceSpec) SetVersion(v string) {
	o.Version = &v
}

// GetFileType returns the FileType field value
func (o *CatalogV1ResourceSpec) GetFileType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value
// and a boolean to check if the value has been set.
func (o *CatalogV1ResourceSpec) GetFileTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileType, true
}

// SetFileType sets field value
func (o *CatalogV1ResourceSpec) SetFileType(v string) {
	o.FileType = v
}

// GetContentType returns the ContentType field value
func (o *CatalogV1ResourceSpec) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *CatalogV1ResourceSpec) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *CatalogV1ResourceSpec) SetContentType(v string) {
	o.ContentType = v
}

// GetData returns the Data field value
func (o *CatalogV1ResourceSpec) GetData() CatalogV1ResourceSpecData {
	if o == nil {
		var ret CatalogV1ResourceSpecData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CatalogV1ResourceSpec) GetDataOk() (*CatalogV1ResourceSpecData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CatalogV1ResourceSpec) SetData(v CatalogV1ResourceSpecData) {
	o.Data = v
}

func (o CatalogV1ResourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1ResourceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	toSerialize["fileType"] = o.FileType
	toSerialize["contentType"] = o.ContentType
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *CatalogV1ResourceSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fileType",
		"contentType",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1ResourceSpec := _CatalogV1ResourceSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1ResourceSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1ResourceSpec(varCatalogV1ResourceSpec)

	return err
}

type NullableCatalogV1ResourceSpec struct {
	value *CatalogV1ResourceSpec
	isSet bool
}

func (v NullableCatalogV1ResourceSpec) Get() *CatalogV1ResourceSpec {
	return v.value
}

func (v *NullableCatalogV1ResourceSpec) Set(val *CatalogV1ResourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1ResourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1ResourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1ResourceSpec(val *CatalogV1ResourceSpec) *NullableCatalogV1ResourceSpec {
	return &NullableCatalogV1ResourceSpec{value: val, isSet: true}
}

func (v NullableCatalogV1ResourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1ResourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


