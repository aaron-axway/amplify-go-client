/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogV1DocumentSpecSectionsInnerArticlesInner - struct for CatalogV1DocumentSpecSectionsInnerArticlesInner
type CatalogV1DocumentSpecSectionsInnerArticlesInner struct {
	CatalogV1DocumentSpecDocumentResourceRef *CatalogV1DocumentSpecDocumentResourceRef
	CatalogV1DocumentSpecResourceRef *CatalogV1DocumentSpecResourceRef
}

// CatalogV1DocumentSpecDocumentResourceRefAsCatalogV1DocumentSpecSectionsInnerArticlesInner is a convenience function that returns CatalogV1DocumentSpecDocumentResourceRef wrapped in CatalogV1DocumentSpecSectionsInnerArticlesInner
func CatalogV1DocumentSpecDocumentResourceRefAsCatalogV1DocumentSpecSectionsInnerArticlesInner(v *CatalogV1DocumentSpecDocumentResourceRef) CatalogV1DocumentSpecSectionsInnerArticlesInner {
	return CatalogV1DocumentSpecSectionsInnerArticlesInner{
		CatalogV1DocumentSpecDocumentResourceRef: v,
	}
}

// CatalogV1DocumentSpecResourceRefAsCatalogV1DocumentSpecSectionsInnerArticlesInner is a convenience function that returns CatalogV1DocumentSpecResourceRef wrapped in CatalogV1DocumentSpecSectionsInnerArticlesInner
func CatalogV1DocumentSpecResourceRefAsCatalogV1DocumentSpecSectionsInnerArticlesInner(v *CatalogV1DocumentSpecResourceRef) CatalogV1DocumentSpecSectionsInnerArticlesInner {
	return CatalogV1DocumentSpecSectionsInnerArticlesInner{
		CatalogV1DocumentSpecResourceRef: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogV1DocumentSpecSectionsInnerArticlesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogV1DocumentSpecDocumentResourceRef
	err = newStrictDecoder(data).Decode(&dst.CatalogV1DocumentSpecDocumentResourceRef)
	if err == nil {
		jsonCatalogV1DocumentSpecDocumentResourceRef, _ := json.Marshal(dst.CatalogV1DocumentSpecDocumentResourceRef)
		if string(jsonCatalogV1DocumentSpecDocumentResourceRef) == "{}" { // empty struct
			dst.CatalogV1DocumentSpecDocumentResourceRef = nil
		} else {
			if err = validator.Validate(dst.CatalogV1DocumentSpecDocumentResourceRef); err != nil {
				dst.CatalogV1DocumentSpecDocumentResourceRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1DocumentSpecDocumentResourceRef = nil
	}

	// try to unmarshal data into CatalogV1DocumentSpecResourceRef
	err = newStrictDecoder(data).Decode(&dst.CatalogV1DocumentSpecResourceRef)
	if err == nil {
		jsonCatalogV1DocumentSpecResourceRef, _ := json.Marshal(dst.CatalogV1DocumentSpecResourceRef)
		if string(jsonCatalogV1DocumentSpecResourceRef) == "{}" { // empty struct
			dst.CatalogV1DocumentSpecResourceRef = nil
		} else {
			if err = validator.Validate(dst.CatalogV1DocumentSpecResourceRef); err != nil {
				dst.CatalogV1DocumentSpecResourceRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1DocumentSpecResourceRef = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogV1DocumentSpecDocumentResourceRef = nil
		dst.CatalogV1DocumentSpecResourceRef = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogV1DocumentSpecSectionsInnerArticlesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogV1DocumentSpecSectionsInnerArticlesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogV1DocumentSpecSectionsInnerArticlesInner) MarshalJSON() ([]byte, error) {
	if src.CatalogV1DocumentSpecDocumentResourceRef != nil {
		return json.Marshal(&src.CatalogV1DocumentSpecDocumentResourceRef)
	}

	if src.CatalogV1DocumentSpecResourceRef != nil {
		return json.Marshal(&src.CatalogV1DocumentSpecResourceRef)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogV1DocumentSpecSectionsInnerArticlesInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogV1DocumentSpecDocumentResourceRef != nil {
		return obj.CatalogV1DocumentSpecDocumentResourceRef
	}

	if obj.CatalogV1DocumentSpecResourceRef != nil {
		return obj.CatalogV1DocumentSpecResourceRef
	}

	// all schemas are nil
	return nil
}

type NullableCatalogV1DocumentSpecSectionsInnerArticlesInner struct {
	value *CatalogV1DocumentSpecSectionsInnerArticlesInner
	isSet bool
}

func (v NullableCatalogV1DocumentSpecSectionsInnerArticlesInner) Get() *CatalogV1DocumentSpecSectionsInnerArticlesInner {
	return v.value
}

func (v *NullableCatalogV1DocumentSpecSectionsInnerArticlesInner) Set(val *CatalogV1DocumentSpecSectionsInnerArticlesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1DocumentSpecSectionsInnerArticlesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1DocumentSpecSectionsInnerArticlesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1DocumentSpecSectionsInnerArticlesInner(val *CatalogV1DocumentSpecSectionsInnerArticlesInner) *NullableCatalogV1DocumentSpecSectionsInnerArticlesInner {
	return &NullableCatalogV1DocumentSpecSectionsInnerArticlesInner{value: val, isSet: true}
}

func (v NullableCatalogV1DocumentSpecSectionsInnerArticlesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1DocumentSpecSectionsInnerArticlesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


