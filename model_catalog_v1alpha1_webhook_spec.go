/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1WebhookSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1WebhookSpec{}

// CatalogV1alpha1WebhookSpec struct for CatalogV1alpha1WebhookSpec
type CatalogV1alpha1WebhookSpec struct {
	Auth *ManagementV1alpha1WebhookSpecAuth `json:"auth,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Url string `json:"url" validate:"regexp=^https?:\\/\\/[\\\\w-_\\\\:\\\\.\\\\?\\/=%&#~\\\\[\\\\]\\\\(\\\\)@!$&',;]*$"`
	// A list of headers that will be sent as par of the http call to the webhook endpoint.
	Headers *map[string]string `json:"headers,omitempty"`
}

type _CatalogV1alpha1WebhookSpec CatalogV1alpha1WebhookSpec

// NewCatalogV1alpha1WebhookSpec instantiates a new CatalogV1alpha1WebhookSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1WebhookSpec(url string) *CatalogV1alpha1WebhookSpec {
	this := CatalogV1alpha1WebhookSpec{}
	this.Url = url
	return &this
}

// NewCatalogV1alpha1WebhookSpecWithDefaults instantiates a new CatalogV1alpha1WebhookSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1WebhookSpecWithDefaults() *CatalogV1alpha1WebhookSpec {
	this := CatalogV1alpha1WebhookSpec{}
	return &this
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *CatalogV1alpha1WebhookSpec) GetAuth() ManagementV1alpha1WebhookSpecAuth {
	if o == nil || IsNil(o.Auth) {
		var ret ManagementV1alpha1WebhookSpecAuth
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1WebhookSpec) GetAuthOk() (*ManagementV1alpha1WebhookSpecAuth, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *CatalogV1alpha1WebhookSpec) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given ManagementV1alpha1WebhookSpecAuth and assigns it to the Auth field.
func (o *CatalogV1alpha1WebhookSpec) SetAuth(v ManagementV1alpha1WebhookSpecAuth) {
	o.Auth = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CatalogV1alpha1WebhookSpec) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1WebhookSpec) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CatalogV1alpha1WebhookSpec) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CatalogV1alpha1WebhookSpec) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetUrl returns the Url field value
func (o *CatalogV1alpha1WebhookSpec) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1WebhookSpec) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CatalogV1alpha1WebhookSpec) SetUrl(v string) {
	o.Url = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *CatalogV1alpha1WebhookSpec) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1WebhookSpec) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *CatalogV1alpha1WebhookSpec) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *CatalogV1alpha1WebhookSpec) SetHeaders(v map[string]string) {
	o.Headers = &v
}

func (o CatalogV1alpha1WebhookSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1WebhookSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["url"] = o.Url
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1WebhookSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1WebhookSpec := _CatalogV1alpha1WebhookSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1WebhookSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1WebhookSpec(varCatalogV1alpha1WebhookSpec)

	return err
}

type NullableCatalogV1alpha1WebhookSpec struct {
	value *CatalogV1alpha1WebhookSpec
	isSet bool
}

func (v NullableCatalogV1alpha1WebhookSpec) Get() *CatalogV1alpha1WebhookSpec {
	return v.value
}

func (v *NullableCatalogV1alpha1WebhookSpec) Set(val *CatalogV1alpha1WebhookSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1WebhookSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1WebhookSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1WebhookSpec(val *CatalogV1alpha1WebhookSpec) *NullableCatalogV1alpha1WebhookSpec {
	return &NullableCatalogV1alpha1WebhookSpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1WebhookSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1WebhookSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


