/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1CategorySpecProductRestriction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1CategorySpecProductRestriction{}

// CatalogV1CategorySpecProductRestriction struct for CatalogV1CategorySpecProductRestriction
type CatalogV1CategorySpecProductRestriction struct {
	Type string `json:"type"`
	Marketplace *CatalogV1CategorySpecProductRestrictionMarketplace `json:"marketplace,omitempty"`
}

type _CatalogV1CategorySpecProductRestriction CatalogV1CategorySpecProductRestriction

// NewCatalogV1CategorySpecProductRestriction instantiates a new CatalogV1CategorySpecProductRestriction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1CategorySpecProductRestriction(type_ string) *CatalogV1CategorySpecProductRestriction {
	this := CatalogV1CategorySpecProductRestriction{}
	this.Type = type_
	return &this
}

// NewCatalogV1CategorySpecProductRestrictionWithDefaults instantiates a new CatalogV1CategorySpecProductRestriction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1CategorySpecProductRestrictionWithDefaults() *CatalogV1CategorySpecProductRestriction {
	this := CatalogV1CategorySpecProductRestriction{}
	return &this
}

// GetType returns the Type field value
func (o *CatalogV1CategorySpecProductRestriction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogV1CategorySpecProductRestriction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogV1CategorySpecProductRestriction) SetType(v string) {
	o.Type = v
}

// GetMarketplace returns the Marketplace field value if set, zero value otherwise.
func (o *CatalogV1CategorySpecProductRestriction) GetMarketplace() CatalogV1CategorySpecProductRestrictionMarketplace {
	if o == nil || IsNil(o.Marketplace) {
		var ret CatalogV1CategorySpecProductRestrictionMarketplace
		return ret
	}
	return *o.Marketplace
}

// GetMarketplaceOk returns a tuple with the Marketplace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1CategorySpecProductRestriction) GetMarketplaceOk() (*CatalogV1CategorySpecProductRestrictionMarketplace, bool) {
	if o == nil || IsNil(o.Marketplace) {
		return nil, false
	}
	return o.Marketplace, true
}

// HasMarketplace returns a boolean if a field has been set.
func (o *CatalogV1CategorySpecProductRestriction) HasMarketplace() bool {
	if o != nil && !IsNil(o.Marketplace) {
		return true
	}

	return false
}

// SetMarketplace gets a reference to the given CatalogV1CategorySpecProductRestrictionMarketplace and assigns it to the Marketplace field.
func (o *CatalogV1CategorySpecProductRestriction) SetMarketplace(v CatalogV1CategorySpecProductRestrictionMarketplace) {
	o.Marketplace = &v
}

func (o CatalogV1CategorySpecProductRestriction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1CategorySpecProductRestriction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Marketplace) {
		toSerialize["marketplace"] = o.Marketplace
	}
	return toSerialize, nil
}

func (o *CatalogV1CategorySpecProductRestriction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1CategorySpecProductRestriction := _CatalogV1CategorySpecProductRestriction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1CategorySpecProductRestriction)

	if err != nil {
		return err
	}

	*o = CatalogV1CategorySpecProductRestriction(varCatalogV1CategorySpecProductRestriction)

	return err
}

type NullableCatalogV1CategorySpecProductRestriction struct {
	value *CatalogV1CategorySpecProductRestriction
	isSet bool
}

func (v NullableCatalogV1CategorySpecProductRestriction) Get() *CatalogV1CategorySpecProductRestriction {
	return v.value
}

func (v *NullableCatalogV1CategorySpecProductRestriction) Set(val *CatalogV1CategorySpecProductRestriction) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1CategorySpecProductRestriction) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1CategorySpecProductRestriction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1CategorySpecProductRestriction(val *CatalogV1CategorySpecProductRestriction) *NullableCatalogV1CategorySpecProductRestriction {
	return &NullableCatalogV1CategorySpecProductRestriction{value: val, isSet: true}
}

func (v NullableCatalogV1CategorySpecProductRestriction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1CategorySpecProductRestriction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


