/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DefinitionsV1alpha1ResourceDefinitionVersionSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionsV1alpha1ResourceDefinitionVersionSpec{}

// DefinitionsV1alpha1ResourceDefinitionVersionSpec struct for DefinitionsV1alpha1ResourceDefinitionVersionSpec
type DefinitionsV1alpha1ResourceDefinitionVersionSpec struct {
	// A reference to a resource definition.
	ResourceDefinition string `json:"resourceDefinition"`
	// The name of the version to be used in the resource definition.
	Name string `json:"name"`
	// Defines if this version is currently served by the server.
	Served bool `json:"served"`
	// Defines if this version is used when storing the resource instance details.
	Storage bool `json:"storage"`
	// Defines the strucure of the spec for this resource version.
	Spec map[string]interface{} `json:"spec,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DefinitionsV1alpha1ResourceDefinitionVersionSpec DefinitionsV1alpha1ResourceDefinitionVersionSpec

// NewDefinitionsV1alpha1ResourceDefinitionVersionSpec instantiates a new DefinitionsV1alpha1ResourceDefinitionVersionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionsV1alpha1ResourceDefinitionVersionSpec(resourceDefinition string, name string, served bool, storage bool) *DefinitionsV1alpha1ResourceDefinitionVersionSpec {
	this := DefinitionsV1alpha1ResourceDefinitionVersionSpec{}
	this.ResourceDefinition = resourceDefinition
	this.Name = name
	this.Served = served
	this.Storage = storage
	return &this
}

// NewDefinitionsV1alpha1ResourceDefinitionVersionSpecWithDefaults instantiates a new DefinitionsV1alpha1ResourceDefinitionVersionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionsV1alpha1ResourceDefinitionVersionSpecWithDefaults() *DefinitionsV1alpha1ResourceDefinitionVersionSpec {
	this := DefinitionsV1alpha1ResourceDefinitionVersionSpec{}
	return &this
}

// GetResourceDefinition returns the ResourceDefinition field value
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) GetResourceDefinition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceDefinition
}

// GetResourceDefinitionOk returns a tuple with the ResourceDefinition field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) GetResourceDefinitionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceDefinition, true
}

// SetResourceDefinition sets field value
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) SetResourceDefinition(v string) {
	o.ResourceDefinition = v
}

// GetName returns the Name field value
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) SetName(v string) {
	o.Name = v
}

// GetServed returns the Served field value
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) GetServed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Served
}

// GetServedOk returns a tuple with the Served field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) GetServedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Served, true
}

// SetServed sets field value
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) SetServed(v bool) {
	o.Served = v
}

// GetStorage returns the Storage field value
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) GetStorage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) GetStorageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) SetStorage(v bool) {
	o.Storage = v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) GetSpec() map[string]interface{} {
	if o == nil || IsNil(o.Spec) {
		var ret map[string]interface{}
		return ret
	}
	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) GetSpecOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Spec) {
		return map[string]interface{}{}, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given map[string]interface{} and assigns it to the Spec field.
func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) SetSpec(v map[string]interface{}) {
	o.Spec = v
}

func (o DefinitionsV1alpha1ResourceDefinitionVersionSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionsV1alpha1ResourceDefinitionVersionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceDefinition"] = o.ResourceDefinition
	toSerialize["name"] = o.Name
	toSerialize["served"] = o.Served
	toSerialize["storage"] = o.Storage
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DefinitionsV1alpha1ResourceDefinitionVersionSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceDefinition",
		"name",
		"served",
		"storage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDefinitionsV1alpha1ResourceDefinitionVersionSpec := _DefinitionsV1alpha1ResourceDefinitionVersionSpec{}

	err = json.Unmarshal(data, &varDefinitionsV1alpha1ResourceDefinitionVersionSpec)

	if err != nil {
		return err
	}

	*o = DefinitionsV1alpha1ResourceDefinitionVersionSpec(varDefinitionsV1alpha1ResourceDefinitionVersionSpec)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resourceDefinition")
		delete(additionalProperties, "name")
		delete(additionalProperties, "served")
		delete(additionalProperties, "storage")
		delete(additionalProperties, "spec")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDefinitionsV1alpha1ResourceDefinitionVersionSpec struct {
	value *DefinitionsV1alpha1ResourceDefinitionVersionSpec
	isSet bool
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionVersionSpec) Get() *DefinitionsV1alpha1ResourceDefinitionVersionSpec {
	return v.value
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionVersionSpec) Set(val *DefinitionsV1alpha1ResourceDefinitionVersionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionVersionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionVersionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionsV1alpha1ResourceDefinitionVersionSpec(val *DefinitionsV1alpha1ResourceDefinitionVersionSpec) *NullableDefinitionsV1alpha1ResourceDefinitionVersionSpec {
	return &NullableDefinitionsV1alpha1ResourceDefinitionVersionSpec{value: val, isSet: true}
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionVersionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionVersionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


