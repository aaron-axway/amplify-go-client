/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ManagementV1alpha1EnvironmentSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1EnvironmentSpec{}

// ManagementV1alpha1EnvironmentSpec struct for ManagementV1alpha1EnvironmentSpec
type ManagementV1alpha1EnvironmentSpec struct {
	Description *string `json:"description,omitempty"`
	Variables *map[string]string `json:"variables,omitempty"`
	// Production environment will be used to perform production processing or connect to a non-Axway gateway. This usage will count against your entitled quota.
	Production *bool `json:"production,omitempty"`
	// Axway Managed environment is hosted in the Axway Managed Cloud.
	AxwayManaged *bool `json:"axwayManaged,omitempty"`
	Icon *ManagementV1alpha1EnvironmentSpecIcon `json:"icon,omitempty"`
	Compliance *ManagementV1alpha1EnvironmentSpecCompliance `json:"compliance,omitempty"`
}

// NewManagementV1alpha1EnvironmentSpec instantiates a new ManagementV1alpha1EnvironmentSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1EnvironmentSpec() *ManagementV1alpha1EnvironmentSpec {
	this := ManagementV1alpha1EnvironmentSpec{}
	return &this
}

// NewManagementV1alpha1EnvironmentSpecWithDefaults instantiates a new ManagementV1alpha1EnvironmentSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1EnvironmentSpecWithDefaults() *ManagementV1alpha1EnvironmentSpec {
	this := ManagementV1alpha1EnvironmentSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ManagementV1alpha1EnvironmentSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1EnvironmentSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ManagementV1alpha1EnvironmentSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ManagementV1alpha1EnvironmentSpec) SetDescription(v string) {
	o.Description = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *ManagementV1alpha1EnvironmentSpec) GetVariables() map[string]string {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]string
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1EnvironmentSpec) GetVariablesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ManagementV1alpha1EnvironmentSpec) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]string and assigns it to the Variables field.
func (o *ManagementV1alpha1EnvironmentSpec) SetVariables(v map[string]string) {
	o.Variables = &v
}

// GetProduction returns the Production field value if set, zero value otherwise.
func (o *ManagementV1alpha1EnvironmentSpec) GetProduction() bool {
	if o == nil || IsNil(o.Production) {
		var ret bool
		return ret
	}
	return *o.Production
}

// GetProductionOk returns a tuple with the Production field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1EnvironmentSpec) GetProductionOk() (*bool, bool) {
	if o == nil || IsNil(o.Production) {
		return nil, false
	}
	return o.Production, true
}

// HasProduction returns a boolean if a field has been set.
func (o *ManagementV1alpha1EnvironmentSpec) HasProduction() bool {
	if o != nil && !IsNil(o.Production) {
		return true
	}

	return false
}

// SetProduction gets a reference to the given bool and assigns it to the Production field.
func (o *ManagementV1alpha1EnvironmentSpec) SetProduction(v bool) {
	o.Production = &v
}

// GetAxwayManaged returns the AxwayManaged field value if set, zero value otherwise.
func (o *ManagementV1alpha1EnvironmentSpec) GetAxwayManaged() bool {
	if o == nil || IsNil(o.AxwayManaged) {
		var ret bool
		return ret
	}
	return *o.AxwayManaged
}

// GetAxwayManagedOk returns a tuple with the AxwayManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1EnvironmentSpec) GetAxwayManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.AxwayManaged) {
		return nil, false
	}
	return o.AxwayManaged, true
}

// HasAxwayManaged returns a boolean if a field has been set.
func (o *ManagementV1alpha1EnvironmentSpec) HasAxwayManaged() bool {
	if o != nil && !IsNil(o.AxwayManaged) {
		return true
	}

	return false
}

// SetAxwayManaged gets a reference to the given bool and assigns it to the AxwayManaged field.
func (o *ManagementV1alpha1EnvironmentSpec) SetAxwayManaged(v bool) {
	o.AxwayManaged = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ManagementV1alpha1EnvironmentSpec) GetIcon() ManagementV1alpha1EnvironmentSpecIcon {
	if o == nil || IsNil(o.Icon) {
		var ret ManagementV1alpha1EnvironmentSpecIcon
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1EnvironmentSpec) GetIconOk() (*ManagementV1alpha1EnvironmentSpecIcon, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ManagementV1alpha1EnvironmentSpec) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given ManagementV1alpha1EnvironmentSpecIcon and assigns it to the Icon field.
func (o *ManagementV1alpha1EnvironmentSpec) SetIcon(v ManagementV1alpha1EnvironmentSpecIcon) {
	o.Icon = &v
}

// GetCompliance returns the Compliance field value if set, zero value otherwise.
func (o *ManagementV1alpha1EnvironmentSpec) GetCompliance() ManagementV1alpha1EnvironmentSpecCompliance {
	if o == nil || IsNil(o.Compliance) {
		var ret ManagementV1alpha1EnvironmentSpecCompliance
		return ret
	}
	return *o.Compliance
}

// GetComplianceOk returns a tuple with the Compliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1EnvironmentSpec) GetComplianceOk() (*ManagementV1alpha1EnvironmentSpecCompliance, bool) {
	if o == nil || IsNil(o.Compliance) {
		return nil, false
	}
	return o.Compliance, true
}

// HasCompliance returns a boolean if a field has been set.
func (o *ManagementV1alpha1EnvironmentSpec) HasCompliance() bool {
	if o != nil && !IsNil(o.Compliance) {
		return true
	}

	return false
}

// SetCompliance gets a reference to the given ManagementV1alpha1EnvironmentSpecCompliance and assigns it to the Compliance field.
func (o *ManagementV1alpha1EnvironmentSpec) SetCompliance(v ManagementV1alpha1EnvironmentSpecCompliance) {
	o.Compliance = &v
}

func (o ManagementV1alpha1EnvironmentSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1EnvironmentSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.Production) {
		toSerialize["production"] = o.Production
	}
	if !IsNil(o.AxwayManaged) {
		toSerialize["axwayManaged"] = o.AxwayManaged
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Compliance) {
		toSerialize["compliance"] = o.Compliance
	}
	return toSerialize, nil
}

type NullableManagementV1alpha1EnvironmentSpec struct {
	value *ManagementV1alpha1EnvironmentSpec
	isSet bool
}

func (v NullableManagementV1alpha1EnvironmentSpec) Get() *ManagementV1alpha1EnvironmentSpec {
	return v.value
}

func (v *NullableManagementV1alpha1EnvironmentSpec) Set(val *ManagementV1alpha1EnvironmentSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1EnvironmentSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1EnvironmentSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1EnvironmentSpec(val *ManagementV1alpha1EnvironmentSpec) *NullableManagementV1alpha1EnvironmentSpec {
	return &NullableManagementV1alpha1EnvironmentSpec{value: val, isSet: true}
}

func (v NullableManagementV1alpha1EnvironmentSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1EnvironmentSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


