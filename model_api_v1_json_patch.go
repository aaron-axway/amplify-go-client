/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiV1JsonPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiV1JsonPatch{}

// ApiV1JsonPatch Json Patch for the API Server resource.
type ApiV1JsonPatch struct {
	// The patch operation to perform: * add - Adds or replaces a property with the given value. * replace - Replaces an existing property with the given value. Throws an error if property does not exist. * remove - Removes the property. Throws an error if the property does not exist. * x-build-object-tree - Adds object properties for each segment in the path if they don't already exist. 
	Op string `json:"op"`
	Path string `json:"path"`
	Value map[string]interface{} `json:"value,omitempty"`
}

type _ApiV1JsonPatch ApiV1JsonPatch

// NewApiV1JsonPatch instantiates a new ApiV1JsonPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV1JsonPatch(op string, path string) *ApiV1JsonPatch {
	this := ApiV1JsonPatch{}
	this.Op = op
	this.Path = path
	return &this
}

// NewApiV1JsonPatchWithDefaults instantiates a new ApiV1JsonPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV1JsonPatchWithDefaults() *ApiV1JsonPatch {
	this := ApiV1JsonPatch{}
	return &this
}

// GetOp returns the Op field value
func (o *ApiV1JsonPatch) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *ApiV1JsonPatch) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *ApiV1JsonPatch) SetOp(v string) {
	o.Op = v
}

// GetPath returns the Path field value
func (o *ApiV1JsonPatch) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ApiV1JsonPatch) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ApiV1JsonPatch) SetPath(v string) {
	o.Path = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ApiV1JsonPatch) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1JsonPatch) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ApiV1JsonPatch) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *ApiV1JsonPatch) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o ApiV1JsonPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiV1JsonPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["op"] = o.Op
	toSerialize["path"] = o.Path
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *ApiV1JsonPatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"op",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiV1JsonPatch := _ApiV1JsonPatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiV1JsonPatch)

	if err != nil {
		return err
	}

	*o = ApiV1JsonPatch(varApiV1JsonPatch)

	return err
}

type NullableApiV1JsonPatch struct {
	value *ApiV1JsonPatch
	isSet bool
}

func (v NullableApiV1JsonPatch) Get() *ApiV1JsonPatch {
	return v.value
}

func (v *NullableApiV1JsonPatch) Set(val *ApiV1JsonPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV1JsonPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV1JsonPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV1JsonPatch(val *ApiV1JsonPatch) *NullableApiV1JsonPatch {
	return &NullableApiV1JsonPatch{value: val, isSet: true}
}

func (v NullableApiV1JsonPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV1JsonPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


