/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ManagementV1alpha1DataplaneSecretState the model 'ManagementV1alpha1DataplaneSecretState'
type ManagementV1alpha1DataplaneSecretState string

// List of management.v1alpha1.DataplaneSecretState
const (
	ACTIVE ManagementV1alpha1DataplaneSecretState = "active"
	DEPRECATED ManagementV1alpha1DataplaneSecretState = "deprecated"
	ARCHIVED ManagementV1alpha1DataplaneSecretState = "archived"
)

// All allowed values of ManagementV1alpha1DataplaneSecretState enum
var AllowedManagementV1alpha1DataplaneSecretStateEnumValues = []ManagementV1alpha1DataplaneSecretState{
	"active",
	"deprecated",
	"archived",
}

func (v *ManagementV1alpha1DataplaneSecretState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ManagementV1alpha1DataplaneSecretState(value)
	for _, existing := range AllowedManagementV1alpha1DataplaneSecretStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ManagementV1alpha1DataplaneSecretState", value)
}

// NewManagementV1alpha1DataplaneSecretStateFromValue returns a pointer to a valid ManagementV1alpha1DataplaneSecretState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagementV1alpha1DataplaneSecretStateFromValue(v string) (*ManagementV1alpha1DataplaneSecretState, error) {
	ev := ManagementV1alpha1DataplaneSecretState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagementV1alpha1DataplaneSecretState: valid values are %v", v, AllowedManagementV1alpha1DataplaneSecretStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagementV1alpha1DataplaneSecretState) IsValid() bool {
	for _, existing := range AllowedManagementV1alpha1DataplaneSecretStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to management.v1alpha1.DataplaneSecretState value
func (v ManagementV1alpha1DataplaneSecretState) Ptr() *ManagementV1alpha1DataplaneSecretState {
	return &v
}

type NullableManagementV1alpha1DataplaneSecretState struct {
	value *ManagementV1alpha1DataplaneSecretState
	isSet bool
}

func (v NullableManagementV1alpha1DataplaneSecretState) Get() *ManagementV1alpha1DataplaneSecretState {
	return v.value
}

func (v *NullableManagementV1alpha1DataplaneSecretState) Set(val *ManagementV1alpha1DataplaneSecretState) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1DataplaneSecretState) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1DataplaneSecretState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1DataplaneSecretState(val *ManagementV1alpha1DataplaneSecretState) *NullableManagementV1alpha1DataplaneSecretState {
	return &NullableManagementV1alpha1DataplaneSecretState{value: val, isSet: true}
}

func (v NullableManagementV1alpha1DataplaneSecretState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1DataplaneSecretState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

