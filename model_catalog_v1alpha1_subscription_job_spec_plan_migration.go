/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1SubscriptionJobSpecPlanMigration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1SubscriptionJobSpecPlanMigration{}

// CatalogV1alpha1SubscriptionJobSpecPlanMigration struct for CatalogV1alpha1SubscriptionJobSpecPlanMigration
type CatalogV1alpha1SubscriptionJobSpecPlanMigration struct {
	Type string `json:"type"`
	// The Product Plan to which to migrate the Subscription.
	ProductPlan string `json:"productPlan"`
	// Description on why the subscription was migrated.
	Reason *string `json:"reason,omitempty"`
	// The Product Plan Job which triggered the migration.
	ProductPlanJob *string `json:"productPlanJob,omitempty"`
}

type _CatalogV1alpha1SubscriptionJobSpecPlanMigration CatalogV1alpha1SubscriptionJobSpecPlanMigration

// NewCatalogV1alpha1SubscriptionJobSpecPlanMigration instantiates a new CatalogV1alpha1SubscriptionJobSpecPlanMigration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1SubscriptionJobSpecPlanMigration(type_ string, productPlan string) *CatalogV1alpha1SubscriptionJobSpecPlanMigration {
	this := CatalogV1alpha1SubscriptionJobSpecPlanMigration{}
	this.Type = type_
	this.ProductPlan = productPlan
	return &this
}

// NewCatalogV1alpha1SubscriptionJobSpecPlanMigrationWithDefaults instantiates a new CatalogV1alpha1SubscriptionJobSpecPlanMigration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1SubscriptionJobSpecPlanMigrationWithDefaults() *CatalogV1alpha1SubscriptionJobSpecPlanMigration {
	this := CatalogV1alpha1SubscriptionJobSpecPlanMigration{}
	return &this
}

// GetType returns the Type field value
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) SetType(v string) {
	o.Type = v
}

// GetProductPlan returns the ProductPlan field value
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) GetProductPlan() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductPlan
}

// GetProductPlanOk returns a tuple with the ProductPlan field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) GetProductPlanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductPlan, true
}

// SetProductPlan sets field value
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) SetProductPlan(v string) {
	o.ProductPlan = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) SetReason(v string) {
	o.Reason = &v
}

// GetProductPlanJob returns the ProductPlanJob field value if set, zero value otherwise.
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) GetProductPlanJob() string {
	if o == nil || IsNil(o.ProductPlanJob) {
		var ret string
		return ret
	}
	return *o.ProductPlanJob
}

// GetProductPlanJobOk returns a tuple with the ProductPlanJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) GetProductPlanJobOk() (*string, bool) {
	if o == nil || IsNil(o.ProductPlanJob) {
		return nil, false
	}
	return o.ProductPlanJob, true
}

// HasProductPlanJob returns a boolean if a field has been set.
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) HasProductPlanJob() bool {
	if o != nil && !IsNil(o.ProductPlanJob) {
		return true
	}

	return false
}

// SetProductPlanJob gets a reference to the given string and assigns it to the ProductPlanJob field.
func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) SetProductPlanJob(v string) {
	o.ProductPlanJob = &v
}

func (o CatalogV1alpha1SubscriptionJobSpecPlanMigration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1SubscriptionJobSpecPlanMigration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["productPlan"] = o.ProductPlan
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.ProductPlanJob) {
		toSerialize["productPlanJob"] = o.ProductPlanJob
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1SubscriptionJobSpecPlanMigration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"productPlan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1SubscriptionJobSpecPlanMigration := _CatalogV1alpha1SubscriptionJobSpecPlanMigration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1SubscriptionJobSpecPlanMigration)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1SubscriptionJobSpecPlanMigration(varCatalogV1alpha1SubscriptionJobSpecPlanMigration)

	return err
}

type NullableCatalogV1alpha1SubscriptionJobSpecPlanMigration struct {
	value *CatalogV1alpha1SubscriptionJobSpecPlanMigration
	isSet bool
}

func (v NullableCatalogV1alpha1SubscriptionJobSpecPlanMigration) Get() *CatalogV1alpha1SubscriptionJobSpecPlanMigration {
	return v.value
}

func (v *NullableCatalogV1alpha1SubscriptionJobSpecPlanMigration) Set(val *CatalogV1alpha1SubscriptionJobSpecPlanMigration) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1SubscriptionJobSpecPlanMigration) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1SubscriptionJobSpecPlanMigration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1SubscriptionJobSpecPlanMigration(val *CatalogV1alpha1SubscriptionJobSpecPlanMigration) *NullableCatalogV1alpha1SubscriptionJobSpecPlanMigration {
	return &NullableCatalogV1alpha1SubscriptionJobSpecPlanMigration{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1SubscriptionJobSpecPlanMigration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1SubscriptionJobSpecPlanMigration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


