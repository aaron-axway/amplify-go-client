/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
)

// checks if the CatalogV1ProductReleaseStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1ProductReleaseStatus{}

// CatalogV1ProductReleaseStatus struct for CatalogV1ProductReleaseStatus
type CatalogV1ProductReleaseStatus struct {
	// The current status level, indicating progress towards consistency.
	Level *string `json:"level,omitempty"`
	// Reasons for the generated status.
	Reasons []CatalogV1ProductReleaseStatusReasonsInner `json:"reasons,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogV1ProductReleaseStatus CatalogV1ProductReleaseStatus

// NewCatalogV1ProductReleaseStatus instantiates a new CatalogV1ProductReleaseStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1ProductReleaseStatus() *CatalogV1ProductReleaseStatus {
	this := CatalogV1ProductReleaseStatus{}
	return &this
}

// NewCatalogV1ProductReleaseStatusWithDefaults instantiates a new CatalogV1ProductReleaseStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1ProductReleaseStatusWithDefaults() *CatalogV1ProductReleaseStatus {
	this := CatalogV1ProductReleaseStatus{}
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *CatalogV1ProductReleaseStatus) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1ProductReleaseStatus) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *CatalogV1ProductReleaseStatus) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *CatalogV1ProductReleaseStatus) SetLevel(v string) {
	o.Level = &v
}

// GetReasons returns the Reasons field value if set, zero value otherwise.
func (o *CatalogV1ProductReleaseStatus) GetReasons() []CatalogV1ProductReleaseStatusReasonsInner {
	if o == nil || IsNil(o.Reasons) {
		var ret []CatalogV1ProductReleaseStatusReasonsInner
		return ret
	}
	return o.Reasons
}

// GetReasonsOk returns a tuple with the Reasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1ProductReleaseStatus) GetReasonsOk() ([]CatalogV1ProductReleaseStatusReasonsInner, bool) {
	if o == nil || IsNil(o.Reasons) {
		return nil, false
	}
	return o.Reasons, true
}

// HasReasons returns a boolean if a field has been set.
func (o *CatalogV1ProductReleaseStatus) HasReasons() bool {
	if o != nil && !IsNil(o.Reasons) {
		return true
	}

	return false
}

// SetReasons gets a reference to the given []CatalogV1ProductReleaseStatusReasonsInner and assigns it to the Reasons field.
func (o *CatalogV1ProductReleaseStatus) SetReasons(v []CatalogV1ProductReleaseStatusReasonsInner) {
	o.Reasons = v
}

func (o CatalogV1ProductReleaseStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1ProductReleaseStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Reasons) {
		toSerialize["reasons"] = o.Reasons
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogV1ProductReleaseStatus) UnmarshalJSON(data []byte) (err error) {
	varCatalogV1ProductReleaseStatus := _CatalogV1ProductReleaseStatus{}

	err = json.Unmarshal(data, &varCatalogV1ProductReleaseStatus)

	if err != nil {
		return err
	}

	*o = CatalogV1ProductReleaseStatus(varCatalogV1ProductReleaseStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "level")
		delete(additionalProperties, "reasons")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCatalogV1ProductReleaseStatus struct {
	value *CatalogV1ProductReleaseStatus
	isSet bool
}

func (v NullableCatalogV1ProductReleaseStatus) Get() *CatalogV1ProductReleaseStatus {
	return v.value
}

func (v *NullableCatalogV1ProductReleaseStatus) Set(val *CatalogV1ProductReleaseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1ProductReleaseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1ProductReleaseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1ProductReleaseStatus(val *CatalogV1ProductReleaseStatus) *NullableCatalogV1ProductReleaseStatus {
	return &NullableCatalogV1ProductReleaseStatus{value: val, isSet: true}
}

func (v NullableCatalogV1ProductReleaseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1ProductReleaseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


