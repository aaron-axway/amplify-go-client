/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogV1alpha1QuotaSpecPricing - struct for CatalogV1alpha1QuotaSpecPricing
type CatalogV1alpha1QuotaSpecPricing struct {
	CatalogV1alpha1QuotaSpecFixedPricingType *CatalogV1alpha1QuotaSpecFixedPricingType
	CatalogV1alpha1QuotaSpecGraduatedPricingType *CatalogV1alpha1QuotaSpecGraduatedPricingType
	CatalogV1alpha1QuotaSpecPerUnitPricingType *CatalogV1alpha1QuotaSpecPerUnitPricingType
	CatalogV1alpha1QuotaSpecUnlimitedPricingType *CatalogV1alpha1QuotaSpecUnlimitedPricingType
	CatalogV1alpha1QuotaSpecVolumePricingType *CatalogV1alpha1QuotaSpecVolumePricingType
}

// CatalogV1alpha1QuotaSpecFixedPricingTypeAsCatalogV1alpha1QuotaSpecPricing is a convenience function that returns CatalogV1alpha1QuotaSpecFixedPricingType wrapped in CatalogV1alpha1QuotaSpecPricing
func CatalogV1alpha1QuotaSpecFixedPricingTypeAsCatalogV1alpha1QuotaSpecPricing(v *CatalogV1alpha1QuotaSpecFixedPricingType) CatalogV1alpha1QuotaSpecPricing {
	return CatalogV1alpha1QuotaSpecPricing{
		CatalogV1alpha1QuotaSpecFixedPricingType: v,
	}
}

// CatalogV1alpha1QuotaSpecGraduatedPricingTypeAsCatalogV1alpha1QuotaSpecPricing is a convenience function that returns CatalogV1alpha1QuotaSpecGraduatedPricingType wrapped in CatalogV1alpha1QuotaSpecPricing
func CatalogV1alpha1QuotaSpecGraduatedPricingTypeAsCatalogV1alpha1QuotaSpecPricing(v *CatalogV1alpha1QuotaSpecGraduatedPricingType) CatalogV1alpha1QuotaSpecPricing {
	return CatalogV1alpha1QuotaSpecPricing{
		CatalogV1alpha1QuotaSpecGraduatedPricingType: v,
	}
}

// CatalogV1alpha1QuotaSpecPerUnitPricingTypeAsCatalogV1alpha1QuotaSpecPricing is a convenience function that returns CatalogV1alpha1QuotaSpecPerUnitPricingType wrapped in CatalogV1alpha1QuotaSpecPricing
func CatalogV1alpha1QuotaSpecPerUnitPricingTypeAsCatalogV1alpha1QuotaSpecPricing(v *CatalogV1alpha1QuotaSpecPerUnitPricingType) CatalogV1alpha1QuotaSpecPricing {
	return CatalogV1alpha1QuotaSpecPricing{
		CatalogV1alpha1QuotaSpecPerUnitPricingType: v,
	}
}

// CatalogV1alpha1QuotaSpecUnlimitedPricingTypeAsCatalogV1alpha1QuotaSpecPricing is a convenience function that returns CatalogV1alpha1QuotaSpecUnlimitedPricingType wrapped in CatalogV1alpha1QuotaSpecPricing
func CatalogV1alpha1QuotaSpecUnlimitedPricingTypeAsCatalogV1alpha1QuotaSpecPricing(v *CatalogV1alpha1QuotaSpecUnlimitedPricingType) CatalogV1alpha1QuotaSpecPricing {
	return CatalogV1alpha1QuotaSpecPricing{
		CatalogV1alpha1QuotaSpecUnlimitedPricingType: v,
	}
}

// CatalogV1alpha1QuotaSpecVolumePricingTypeAsCatalogV1alpha1QuotaSpecPricing is a convenience function that returns CatalogV1alpha1QuotaSpecVolumePricingType wrapped in CatalogV1alpha1QuotaSpecPricing
func CatalogV1alpha1QuotaSpecVolumePricingTypeAsCatalogV1alpha1QuotaSpecPricing(v *CatalogV1alpha1QuotaSpecVolumePricingType) CatalogV1alpha1QuotaSpecPricing {
	return CatalogV1alpha1QuotaSpecPricing{
		CatalogV1alpha1QuotaSpecVolumePricingType: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogV1alpha1QuotaSpecPricing) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogV1alpha1QuotaSpecFixedPricingType
	err = newStrictDecoder(data).Decode(&dst.CatalogV1alpha1QuotaSpecFixedPricingType)
	if err == nil {
		jsonCatalogV1alpha1QuotaSpecFixedPricingType, _ := json.Marshal(dst.CatalogV1alpha1QuotaSpecFixedPricingType)
		if string(jsonCatalogV1alpha1QuotaSpecFixedPricingType) == "{}" { // empty struct
			dst.CatalogV1alpha1QuotaSpecFixedPricingType = nil
		} else {
			if err = validator.Validate(dst.CatalogV1alpha1QuotaSpecFixedPricingType); err != nil {
				dst.CatalogV1alpha1QuotaSpecFixedPricingType = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1alpha1QuotaSpecFixedPricingType = nil
	}

	// try to unmarshal data into CatalogV1alpha1QuotaSpecGraduatedPricingType
	err = newStrictDecoder(data).Decode(&dst.CatalogV1alpha1QuotaSpecGraduatedPricingType)
	if err == nil {
		jsonCatalogV1alpha1QuotaSpecGraduatedPricingType, _ := json.Marshal(dst.CatalogV1alpha1QuotaSpecGraduatedPricingType)
		if string(jsonCatalogV1alpha1QuotaSpecGraduatedPricingType) == "{}" { // empty struct
			dst.CatalogV1alpha1QuotaSpecGraduatedPricingType = nil
		} else {
			if err = validator.Validate(dst.CatalogV1alpha1QuotaSpecGraduatedPricingType); err != nil {
				dst.CatalogV1alpha1QuotaSpecGraduatedPricingType = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1alpha1QuotaSpecGraduatedPricingType = nil
	}

	// try to unmarshal data into CatalogV1alpha1QuotaSpecPerUnitPricingType
	err = newStrictDecoder(data).Decode(&dst.CatalogV1alpha1QuotaSpecPerUnitPricingType)
	if err == nil {
		jsonCatalogV1alpha1QuotaSpecPerUnitPricingType, _ := json.Marshal(dst.CatalogV1alpha1QuotaSpecPerUnitPricingType)
		if string(jsonCatalogV1alpha1QuotaSpecPerUnitPricingType) == "{}" { // empty struct
			dst.CatalogV1alpha1QuotaSpecPerUnitPricingType = nil
		} else {
			if err = validator.Validate(dst.CatalogV1alpha1QuotaSpecPerUnitPricingType); err != nil {
				dst.CatalogV1alpha1QuotaSpecPerUnitPricingType = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1alpha1QuotaSpecPerUnitPricingType = nil
	}

	// try to unmarshal data into CatalogV1alpha1QuotaSpecUnlimitedPricingType
	err = newStrictDecoder(data).Decode(&dst.CatalogV1alpha1QuotaSpecUnlimitedPricingType)
	if err == nil {
		jsonCatalogV1alpha1QuotaSpecUnlimitedPricingType, _ := json.Marshal(dst.CatalogV1alpha1QuotaSpecUnlimitedPricingType)
		if string(jsonCatalogV1alpha1QuotaSpecUnlimitedPricingType) == "{}" { // empty struct
			dst.CatalogV1alpha1QuotaSpecUnlimitedPricingType = nil
		} else {
			if err = validator.Validate(dst.CatalogV1alpha1QuotaSpecUnlimitedPricingType); err != nil {
				dst.CatalogV1alpha1QuotaSpecUnlimitedPricingType = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1alpha1QuotaSpecUnlimitedPricingType = nil
	}

	// try to unmarshal data into CatalogV1alpha1QuotaSpecVolumePricingType
	err = newStrictDecoder(data).Decode(&dst.CatalogV1alpha1QuotaSpecVolumePricingType)
	if err == nil {
		jsonCatalogV1alpha1QuotaSpecVolumePricingType, _ := json.Marshal(dst.CatalogV1alpha1QuotaSpecVolumePricingType)
		if string(jsonCatalogV1alpha1QuotaSpecVolumePricingType) == "{}" { // empty struct
			dst.CatalogV1alpha1QuotaSpecVolumePricingType = nil
		} else {
			if err = validator.Validate(dst.CatalogV1alpha1QuotaSpecVolumePricingType); err != nil {
				dst.CatalogV1alpha1QuotaSpecVolumePricingType = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1alpha1QuotaSpecVolumePricingType = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogV1alpha1QuotaSpecFixedPricingType = nil
		dst.CatalogV1alpha1QuotaSpecGraduatedPricingType = nil
		dst.CatalogV1alpha1QuotaSpecPerUnitPricingType = nil
		dst.CatalogV1alpha1QuotaSpecUnlimitedPricingType = nil
		dst.CatalogV1alpha1QuotaSpecVolumePricingType = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogV1alpha1QuotaSpecPricing)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogV1alpha1QuotaSpecPricing)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogV1alpha1QuotaSpecPricing) MarshalJSON() ([]byte, error) {
	if src.CatalogV1alpha1QuotaSpecFixedPricingType != nil {
		return json.Marshal(&src.CatalogV1alpha1QuotaSpecFixedPricingType)
	}

	if src.CatalogV1alpha1QuotaSpecGraduatedPricingType != nil {
		return json.Marshal(&src.CatalogV1alpha1QuotaSpecGraduatedPricingType)
	}

	if src.CatalogV1alpha1QuotaSpecPerUnitPricingType != nil {
		return json.Marshal(&src.CatalogV1alpha1QuotaSpecPerUnitPricingType)
	}

	if src.CatalogV1alpha1QuotaSpecUnlimitedPricingType != nil {
		return json.Marshal(&src.CatalogV1alpha1QuotaSpecUnlimitedPricingType)
	}

	if src.CatalogV1alpha1QuotaSpecVolumePricingType != nil {
		return json.Marshal(&src.CatalogV1alpha1QuotaSpecVolumePricingType)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogV1alpha1QuotaSpecPricing) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogV1alpha1QuotaSpecFixedPricingType != nil {
		return obj.CatalogV1alpha1QuotaSpecFixedPricingType
	}

	if obj.CatalogV1alpha1QuotaSpecGraduatedPricingType != nil {
		return obj.CatalogV1alpha1QuotaSpecGraduatedPricingType
	}

	if obj.CatalogV1alpha1QuotaSpecPerUnitPricingType != nil {
		return obj.CatalogV1alpha1QuotaSpecPerUnitPricingType
	}

	if obj.CatalogV1alpha1QuotaSpecUnlimitedPricingType != nil {
		return obj.CatalogV1alpha1QuotaSpecUnlimitedPricingType
	}

	if obj.CatalogV1alpha1QuotaSpecVolumePricingType != nil {
		return obj.CatalogV1alpha1QuotaSpecVolumePricingType
	}

	// all schemas are nil
	return nil
}

type NullableCatalogV1alpha1QuotaSpecPricing struct {
	value *CatalogV1alpha1QuotaSpecPricing
	isSet bool
}

func (v NullableCatalogV1alpha1QuotaSpecPricing) Get() *CatalogV1alpha1QuotaSpecPricing {
	return v.value
}

func (v *NullableCatalogV1alpha1QuotaSpecPricing) Set(val *CatalogV1alpha1QuotaSpecPricing) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1QuotaSpecPricing) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1QuotaSpecPricing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1QuotaSpecPricing(val *CatalogV1alpha1QuotaSpecPricing) *NullableCatalogV1alpha1QuotaSpecPricing {
	return &NullableCatalogV1alpha1QuotaSpecPricing{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1QuotaSpecPricing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1QuotaSpecPricing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


