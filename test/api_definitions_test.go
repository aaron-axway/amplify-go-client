/*
AMPLIFY Central API v0.347

Testing DefinitionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package amplify

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/aaron-axway/amplify-go-client"
)

func Test_amplify_DefinitionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefinitionsAPIService CountDefinitionsV1alpha1AccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefinitionsAPI.CountDefinitionsV1alpha1AccessControlList(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CountDefinitionsV1alpha1CommandLineInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefinitionsAPI.CountDefinitionsV1alpha1CommandLineInterface(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CountDefinitionsV1alpha1ResourceDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefinitionsAPI.CountDefinitionsV1alpha1ResourceDefinition(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CountDefinitionsV1alpha1ResourceDefinitionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefinitionsAPI.CountDefinitionsV1alpha1ResourceDefinitionVersion(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CountDefinitionsV1alpha1ResourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefinitionsAPI.CountDefinitionsV1alpha1ResourceGroup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CountDefinitionsV1alpha1ResourceGroupAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		httpRes, err := apiClient.DefinitionsAPI.CountDefinitionsV1alpha1ResourceGroupAccessControlList(context.Background(), groupName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CountDefinitionsV1alpha1ResourceGroupCommandLineInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		httpRes, err := apiClient.DefinitionsAPI.CountDefinitionsV1alpha1ResourceGroupCommandLineInterface(context.Background(), groupName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CountDefinitionsV1alpha1ResourceGroupResourceDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		httpRes, err := apiClient.DefinitionsAPI.CountDefinitionsV1alpha1ResourceGroupResourceDefinition(context.Background(), groupName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CountDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		httpRes, err := apiClient.DefinitionsAPI.CountDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion(context.Background(), groupName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CreateDefinitionsV1alpha1ResourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefinitionsAPI.CreateDefinitionsV1alpha1ResourceGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CreateDefinitionsV1alpha1ResourceGroupAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.DefinitionsAPI.CreateDefinitionsV1alpha1ResourceGroupAccessControlList(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CreateDefinitionsV1alpha1ResourceGroupCommandLineInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.DefinitionsAPI.CreateDefinitionsV1alpha1ResourceGroupCommandLineInterface(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CreateDefinitionsV1alpha1ResourceGroupResourceDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.DefinitionsAPI.CreateDefinitionsV1alpha1ResourceGroupResourceDefinition(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService CreateDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.DefinitionsAPI.CreateDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ListDefinitionsV1alpha1AccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefinitionsAPI.ListDefinitionsV1alpha1AccessControlList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ListDefinitionsV1alpha1CommandLineInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefinitionsAPI.ListDefinitionsV1alpha1CommandLineInterface(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ListDefinitionsV1alpha1ResourceDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefinitionsAPI.ListDefinitionsV1alpha1ResourceDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ListDefinitionsV1alpha1ResourceDefinitionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefinitionsAPI.ListDefinitionsV1alpha1ResourceDefinitionVersion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ListDefinitionsV1alpha1ResourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefinitionsAPI.ListDefinitionsV1alpha1ResourceGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ListDefinitionsV1alpha1ResourceGroupAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.DefinitionsAPI.ListDefinitionsV1alpha1ResourceGroupAccessControlList(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ListDefinitionsV1alpha1ResourceGroupCommandLineInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.DefinitionsAPI.ListDefinitionsV1alpha1ResourceGroupCommandLineInterface(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ListDefinitionsV1alpha1ResourceGroupResourceDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.DefinitionsAPI.ListDefinitionsV1alpha1ResourceGroupResourceDefinition(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ListDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.DefinitionsAPI.ListDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService PatchDefinitionsV1alpha1ResourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.PatchDefinitionsV1alpha1ResourceGroup(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService PatchDefinitionsV1alpha1ResourceGroupAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.PatchDefinitionsV1alpha1ResourceGroupAccessControlList(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService PatchDefinitionsV1alpha1ResourceGroupCommandLineInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.PatchDefinitionsV1alpha1ResourceGroupCommandLineInterface(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService PatchDefinitionsV1alpha1ResourceGroupResourceDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.PatchDefinitionsV1alpha1ResourceGroupResourceDefinition(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService PatchDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.PatchDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroup(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupAccessControlList(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupAccessControlListExtension(context.Background(), groupName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupAccessControlListLanguages(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var code string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupAccessControlListLanguagesCode(context.Background(), groupName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupCommandLineInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupCommandLineInterface(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupCommandLineInterfaceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupCommandLineInterfaceExtension(context.Background(), groupName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupCommandLineInterfaceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupCommandLineInterfaceLanguages(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupCommandLineInterfaceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var code string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupCommandLineInterfaceLanguagesCode(context.Background(), groupName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupResourceDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupResourceDefinition(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionExtension(context.Background(), groupName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionLanguages(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var code string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionLanguagesCode(context.Background(), groupName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionExtension(context.Background(), groupName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionLanguages(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var code string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.ReadDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionLanguagesCode(context.Background(), groupName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService RemoveDefinitionsV1alpha1ResourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefinitionsAPI.RemoveDefinitionsV1alpha1ResourceGroup(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService RemoveDefinitionsV1alpha1ResourceGroupAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		httpRes, err := apiClient.DefinitionsAPI.RemoveDefinitionsV1alpha1ResourceGroupAccessControlList(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService RemoveDefinitionsV1alpha1ResourceGroupCommandLineInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		httpRes, err := apiClient.DefinitionsAPI.RemoveDefinitionsV1alpha1ResourceGroupCommandLineInterface(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService RemoveDefinitionsV1alpha1ResourceGroupResourceDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		httpRes, err := apiClient.DefinitionsAPI.RemoveDefinitionsV1alpha1ResourceGroupResourceDefinition(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService RemoveDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		httpRes, err := apiClient.DefinitionsAPI.RemoveDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroup(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupAccessControlList(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupAccessControlListExtension(context.Background(), groupName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupAccessControlListLanguages(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var code string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupAccessControlListLanguagesCode(context.Background(), groupName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupCommandLineInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupCommandLineInterface(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupCommandLineInterfaceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupCommandLineInterfaceExtension(context.Background(), groupName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupCommandLineInterfaceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupCommandLineInterfaceLanguages(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupCommandLineInterfaceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var code string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupCommandLineInterfaceLanguagesCode(context.Background(), groupName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupResourceDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupResourceDefinition(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionExtension(context.Background(), groupName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionLanguages(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var code string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionLanguagesCode(context.Background(), groupName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionVersion(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionExtension(context.Background(), groupName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionLanguages(context.Background(), groupName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefinitionsAPIService UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var code string
		var name string

		resp, httpRes, err := apiClient.DefinitionsAPI.UpdateDefinitionsV1alpha1ResourceGroupResourceDefinitionVersionLanguagesCode(context.Background(), groupName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
