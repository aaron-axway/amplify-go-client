/*
AMPLIFY Central API v0.347

Testing CatalogAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package amplify

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/aaron-axway/amplify-go-client"
)

func Test_amplify_CatalogAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CatalogAPIService CountCatalogV1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1Category(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1CategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1CategoryVisibility(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1Document", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1Document(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1DocumentResource(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1Marketplace(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1MarketplaceCategoryVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1MarketplacePublishedDocumentResource(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1MarketplacePublishedStage(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1Product(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductDocument(context.Background(), productName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductOverview(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductPlanQuota(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductProductOverview(context.Background(), productName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductProductReview(context.Background(), productName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductRelease(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductReleaseDocument(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductReleaseProductOverview(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductReleaseResource(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductResource(context.Background(), productName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1ProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1ProductReview(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1PublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1PublishedDocumentResource(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1PublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1PublishedStage(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1Quota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1Quota(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1Resource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1Resource(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1SubscriptionRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1SupportContact(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AccessControlList(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Application", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Application(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ApplicationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ApplicationAccessControlList(context.Background(), applicationName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ApplicationAssetRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ApplicationAssetRequest(context.Background(), applicationName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ApplicationCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ApplicationCredential(context.Background(), applicationName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Asset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Asset(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetAccessControlList(context.Background(), assetName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetAssetMapping(context.Background(), assetName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetAssetResource(context.Background(), assetName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetMapping(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetRelease(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetReleaseAccessControlList(context.Background(), assetreleaseName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetReleaseAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetReleaseAssetResource(context.Background(), assetreleaseName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetReleaseTag(context.Background(), assetName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetRequest(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssetResource(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AssistedSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AssistedSearch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AuthorizationProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AuthorizationProfile(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AuthorizationProfileAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AuthorizationProfileAccessControlList(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AuthorizationProfileAssetRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AuthorizationProfileAssetRequestDefinition(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AuthorizationProfileSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AuthorizationProfileSecret(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1AuthorizationProfileWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1AuthorizationProfileWebhook(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Category(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1CategoryAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1CategoryAccessControlList(context.Background(), categoryName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1CategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1CategoryVisibility(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ConsumerProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ConsumerProductVisibility(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ConsumerStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ConsumerStageVisibility(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Credential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Credential(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1CredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1CredentialRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Document", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Document(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1DocumentResource(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1DocumentResourceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1DocumentResourceAccessControlList(context.Background(), documentresourceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Marketplace(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1MarketplaceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1MarketplaceAccessControlList(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1MarketplaceAssistedSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1MarketplaceAssistedSearch(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1MarketplaceCategoryVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1MarketplaceConsumerProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1MarketplaceConsumerProductVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1MarketplaceConsumerStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1MarketplaceConsumerStageVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1MarketplaceProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1MarketplaceProductVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1MarketplacePublishedDocumentResource(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1MarketplacePublishedProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1MarketplacePublishedProduct(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1MarketplacePublishedStage(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1MarketplaceStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1MarketplaceStageVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Product(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductAccessControlList(context.Background(), productName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductDocument(context.Background(), productName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductOverview(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductPlan(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductPlanAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductPlanAccessControlList(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductPlanJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductPlanJob(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductPlanProductPlanJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductPlanProductPlanJob(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductPlanQuota(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductPlanUnit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductPlanUnit(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductPlanUnitAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductPlanUnitAccessControlList(context.Background(), productplanunitName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductProductOverview(context.Background(), productName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductProductReview(context.Background(), productName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductRelease(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductReleaseAccessControlList(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductReleaseDocument(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductReleaseProductOverview(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductReleaseResource(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductReleaseTag(context.Background(), productName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductResource(context.Background(), productName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductReview(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ProductVisibility(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1PublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1PublishedDocumentResource(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1PublishedProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1PublishedProduct(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1PublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1PublishedStage(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Quota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Quota(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1ReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1ReleaseTag(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Resource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Resource(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Secret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Secret(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Stage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Stage(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1StageAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1StageAccessControlList(context.Background(), stageName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1StageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1StageVisibility(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Subscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Subscription(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1SubscriptionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1SubscriptionAccessControlList(context.Background(), subscriptionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1SubscriptionInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1SubscriptionInvoice(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1SubscriptionJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1SubscriptionJob(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1SubscriptionRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList(context.Background(), subscriptionrequestdefinitionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1SubscriptionSubscriptionInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1SubscriptionSubscriptionInvoice(context.Background(), subscriptionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1SubscriptionSubscriptionJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1SubscriptionSubscriptionJob(context.Background(), subscriptionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1SupportContact(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1SupportContactAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1SupportContactAccessControlList(context.Background(), supportcontactName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CountCatalogV1alpha1Webhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CatalogAPI.CountCatalogV1alpha1Webhook(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1Category(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1DocumentResource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1Marketplace(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1MarketplaceCategoryVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1MarketplacePublishedDocumentResource(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1MarketplacePublishedStage(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1Product(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1ProductDocument(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1ProductPlanQuota(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1ProductProductOverview(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1ProductProductReview(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1ProductRelease(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1ProductReleaseDocument(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1ProductReleaseProductOverview(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1ProductReleaseResource(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1ProductResource(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1SubscriptionRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1SupportContact(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1Application", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1Application(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ApplicationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ApplicationAccessControlList(context.Background(), applicationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ApplicationAssetRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ApplicationAssetRequest(context.Background(), applicationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ApplicationCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ApplicationCredential(context.Background(), applicationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1Asset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1Asset(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AssetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AssetAccessControlList(context.Background(), assetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AssetAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AssetAssetMapping(context.Background(), assetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AssetAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AssetAssetResource(context.Background(), assetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AssetRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AssetRelease(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AssetReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AssetReleaseAccessControlList(context.Background(), assetreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AssetReleaseAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AssetReleaseAssetResource(context.Background(), assetreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AssetReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AssetReleaseTag(context.Background(), assetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AuthorizationProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AuthorizationProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AuthorizationProfileAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AuthorizationProfileAccessControlList(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AuthorizationProfileAssetRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AuthorizationProfileAssetRequestDefinition(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AuthorizationProfileSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AuthorizationProfileSecret(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1AuthorizationProfileWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1AuthorizationProfileWebhook(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1Category(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1CategoryAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1CategoryAccessControlList(context.Background(), categoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1DocumentResource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1DocumentResourceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1DocumentResourceAccessControlList(context.Background(), documentresourceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1Marketplace(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1MarketplaceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1MarketplaceAccessControlList(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1MarketplaceAssistedSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1MarketplaceAssistedSearch(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1MarketplaceCategoryVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1MarketplaceConsumerProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1MarketplaceConsumerProductVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1MarketplaceConsumerStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1MarketplaceConsumerStageVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1MarketplaceProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1MarketplaceProductVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1MarketplacePublishedDocumentResource(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1MarketplacePublishedProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1MarketplacePublishedProduct(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1MarketplacePublishedStage(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1MarketplaceStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1MarketplaceStageVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1Product(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductAccessControlList(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductDocument(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductPlan(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductPlanAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductPlanAccessControlList(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductPlanProductPlanJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductPlanProductPlanJob(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductPlanQuota(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductPlanUnit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductPlanUnit(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductPlanUnitAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductPlanUnitAccessControlList(context.Background(), productplanunitName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductProductOverview(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductProductReview(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductRelease(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductReleaseAccessControlList(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductReleaseDocument(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductReleaseProductOverview(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductReleaseResource(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductReleaseTag(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1ProductResource(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1Stage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1Stage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1StageAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1StageAccessControlList(context.Background(), stageName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1Subscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1Subscription(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1SubscriptionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1SubscriptionAccessControlList(context.Background(), subscriptionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1SubscriptionRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList(context.Background(), subscriptionrequestdefinitionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1SubscriptionSubscriptionInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1SubscriptionSubscriptionInvoice(context.Background(), subscriptionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1SubscriptionSubscriptionJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1SubscriptionSubscriptionJob(context.Background(), subscriptionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1SupportContact(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService CreateCatalogV1alpha1SupportContactAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string

		resp, httpRes, err := apiClient.CatalogAPI.CreateCatalogV1alpha1SupportContactAccessControlList(context.Background(), supportcontactName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1Category(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1CategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1CategoryVisibility(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1Document", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1Document(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1DocumentResource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1Marketplace(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1MarketplaceCategoryVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1MarketplacePublishedDocumentResource(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1MarketplacePublishedStage(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1Product(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductDocument(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductOverview(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductPlanQuota(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductProductOverview(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductProductReview(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductRelease(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductReleaseDocument(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductReleaseProductOverview(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductReleaseResource(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductResource(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1ProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1ProductReview(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1PublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1PublishedDocumentResource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1PublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1PublishedStage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1Quota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1Quota(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1Resource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1Resource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1SubscriptionRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1SupportContact(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AccessControlList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Application", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Application(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ApplicationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ApplicationAccessControlList(context.Background(), applicationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ApplicationAssetRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ApplicationAssetRequest(context.Background(), applicationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ApplicationCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ApplicationCredential(context.Background(), applicationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Asset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Asset(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetAccessControlList(context.Background(), assetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetAssetMapping(context.Background(), assetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetAssetResource(context.Background(), assetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetRelease(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetReleaseAccessControlList(context.Background(), assetreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetReleaseAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetReleaseAssetResource(context.Background(), assetreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetReleaseTag(context.Background(), assetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssetResource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AssistedSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AssistedSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AuthorizationProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AuthorizationProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AuthorizationProfileAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AuthorizationProfileAccessControlList(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AuthorizationProfileAssetRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AuthorizationProfileAssetRequestDefinition(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AuthorizationProfileSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AuthorizationProfileSecret(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1AuthorizationProfileWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1AuthorizationProfileWebhook(context.Background(), authprofileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Category(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1CategoryAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1CategoryAccessControlList(context.Background(), categoryName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1CategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1CategoryVisibility(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ConsumerProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ConsumerProductVisibility(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ConsumerStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ConsumerStageVisibility(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Credential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Credential(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1CredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1CredentialRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Document", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Document(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1DocumentResource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1DocumentResourceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1DocumentResourceAccessControlList(context.Background(), documentresourceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Marketplace(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1MarketplaceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1MarketplaceAccessControlList(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1MarketplaceAssistedSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1MarketplaceAssistedSearch(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1MarketplaceCategoryVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1MarketplaceConsumerProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1MarketplaceConsumerProductVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1MarketplaceConsumerStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1MarketplaceConsumerStageVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1MarketplaceProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1MarketplaceProductVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1MarketplacePublishedDocumentResource(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1MarketplacePublishedProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1MarketplacePublishedProduct(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1MarketplacePublishedStage(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1MarketplaceStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1MarketplaceStageVisibility(context.Background(), marketplaceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Product(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductAccessControlList(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductDocument(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductOverview(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductPlan(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductPlanAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductPlanAccessControlList(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductPlanJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductPlanJob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductPlanProductPlanJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductPlanProductPlanJob(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductPlanQuota(context.Background(), productplanName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductPlanUnit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductPlanUnit(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductPlanUnitAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductPlanUnitAccessControlList(context.Background(), productplanunitName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductProductOverview(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductProductReview(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductRelease(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductReleaseAccessControlList(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductReleaseDocument(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductReleaseProductOverview(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductReleaseResource(context.Background(), productreleaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductReleaseTag(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductResource(context.Background(), productName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductReview(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ProductVisibility(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1PublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1PublishedDocumentResource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1PublishedProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1PublishedProduct(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1PublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1PublishedStage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Quota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Quota(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1ReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1ReleaseTag(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Resource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Resource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Secret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Secret(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Stage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Stage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1StageAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1StageAccessControlList(context.Background(), stageName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1StageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1StageVisibility(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Subscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Subscription(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1SubscriptionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1SubscriptionAccessControlList(context.Background(), subscriptionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1SubscriptionInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1SubscriptionInvoice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1SubscriptionJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1SubscriptionJob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1SubscriptionRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList(context.Background(), subscriptionrequestdefinitionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1SubscriptionSubscriptionInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1SubscriptionSubscriptionInvoice(context.Background(), subscriptionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1SubscriptionSubscriptionJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1SubscriptionSubscriptionJob(context.Background(), subscriptionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1SupportContact(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1SupportContactAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1SupportContactAccessControlList(context.Background(), supportcontactName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ListCatalogV1alpha1Webhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CatalogAPI.ListCatalogV1alpha1Webhook(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1Category(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1DocumentResource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1Marketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1MarketplaceCategoryVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1MarketplacePublishedDocumentResource(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1MarketplacePublishedStage(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1Product(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1ProductDocument(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1ProductPlanQuota(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1ProductProductOverview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1ProductProductReview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1ProductRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1ProductReleaseDocument(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1ProductReleaseProductOverview(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1ProductReleaseResource(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1ProductResource(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1SubscriptionRequestDefinition(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1SupportContact(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1Application", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1Application(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ApplicationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ApplicationAccessControlList(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ApplicationAssetRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ApplicationAssetRequest(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ApplicationCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ApplicationCredential(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1Asset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1Asset(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AssetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AssetAccessControlList(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AssetAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AssetAssetMapping(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AssetAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AssetAssetResource(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AssetRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AssetRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AssetReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AssetReleaseAccessControlList(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AssetReleaseAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AssetReleaseAssetResource(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AssetReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AssetReleaseTag(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AuthorizationProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AuthorizationProfile(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AuthorizationProfileAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AuthorizationProfileAccessControlList(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AuthorizationProfileAssetRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AuthorizationProfileAssetRequestDefinition(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AuthorizationProfileSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AuthorizationProfileSecret(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1AuthorizationProfileWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1AuthorizationProfileWebhook(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1Category(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1CategoryAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1CategoryAccessControlList(context.Background(), categoryName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1DocumentResource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1DocumentResourceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1DocumentResourceAccessControlList(context.Background(), documentresourceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1Marketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1MarketplaceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1MarketplaceAccessControlList(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1MarketplaceAssistedSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1MarketplaceAssistedSearch(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1MarketplaceCategoryVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1MarketplaceConsumerProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1MarketplaceConsumerProductVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1MarketplaceConsumerStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1MarketplaceConsumerStageVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1MarketplaceProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1MarketplaceProductVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1MarketplacePublishedDocumentResource(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1MarketplacePublishedProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1MarketplacePublishedProduct(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1MarketplacePublishedStage(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1MarketplaceStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1MarketplaceStageVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1Product(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductAccessControlList(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductDocument(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductPlan(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductPlanAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductPlanAccessControlList(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductPlanProductPlanJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductPlanProductPlanJob(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductPlanQuota(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductPlanUnit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductPlanUnit(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductPlanUnitAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductPlanUnitAccessControlList(context.Background(), productplanunitName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductProductOverview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductProductReview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductReleaseAccessControlList(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductReleaseDocument(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductReleaseProductOverview(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductReleaseResource(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductReleaseTag(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1ProductResource(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1Stage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1Stage(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1StageAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1StageAccessControlList(context.Background(), stageName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1Subscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1Subscription(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1SubscriptionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1SubscriptionAccessControlList(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1SubscriptionRequestDefinition(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList(context.Background(), subscriptionrequestdefinitionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1SubscriptionSubscriptionInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1SubscriptionSubscriptionInvoice(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1SubscriptionSubscriptionJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1SubscriptionSubscriptionJob(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1SupportContact(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService PatchCatalogV1alpha1SupportContactAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.PatchCatalogV1alpha1SupportContactAccessControlList(context.Background(), supportcontactName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1Category(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1CategoryExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1CategoryExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1CategoryIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1CategoryIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1CategoryLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1CategoryLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1CategoryLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1CategoryLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1DocumentResource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1DocumentResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1DocumentResourceExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1DocumentResourceIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1DocumentResourceIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1DocumentResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1DocumentResourceLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1DocumentResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1DocumentResourceLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1DocumentResourceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1DocumentResourceReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1DocumentResourceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1DocumentResourceState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1Marketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplaceBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplaceBilling(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplaceCategoryVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplaceCategoryVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplaceCategoryVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplaceCategoryVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplaceCategoryVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplaceCategoryVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplaceCategoryVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplaceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplaceExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplaceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplaceLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplaceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplaceLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplacePublishedDocumentResource(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplacePublishedDocumentResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplacePublishedDocumentResourceExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplacePublishedDocumentResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplacePublishedDocumentResourceLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplacePublishedDocumentResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplacePublishedDocumentResourceLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplacePublishedStage(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplacePublishedStageExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplacePublishedStageExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplacePublishedStageLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplacePublishedStageLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1MarketplacePublishedStageLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1MarketplacePublishedStageLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1Product(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductDocument(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductDocumentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductDocumentExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductDocumentIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductDocumentIcon(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductDocumentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductDocumentLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductDocumentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductDocumentLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductDocumentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductDocumentStatus(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductLatestrelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductLatestrelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductPlanQuota(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductPlanQuotaExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductPlanQuotaExtension(context.Background(), productplanName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductPlanQuotaLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductPlanQuotaLanguages(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductPlanQuotaLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductPlanQuotaLanguagesCode(context.Background(), productplanName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductPlanQuotaStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductPlanQuotaStatus(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductProductOverview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductProductOverviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductProductOverviewExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductProductOverviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductProductOverviewLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductProductOverviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductProductOverviewLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductProductReview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductProductReviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductProductReviewExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductProductReviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductProductReviewLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductProductReviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductProductReviewLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductProductReviewMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductProductReviewMarketplace(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductProductReviewState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductProductReviewState(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseDocument(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseDocumentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseDocumentExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseDocumentIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseDocumentIcon(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseDocumentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseDocumentLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseDocumentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseDocumentLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseDocumentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseDocumentStatus(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseProductOverview(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseProductOverviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseProductOverviewExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseProductOverviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseProductOverviewLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseProductOverviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseProductOverviewLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseResource(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseResourceExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseResourceLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseResourceLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductReleaseStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductReleaseStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductResource(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductResourceExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductResourceLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductResourceLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1ProductStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1ProductStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1SubscriptionRequestDefinition(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1SubscriptionRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1SubscriptionRequestDefinitionExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1SubscriptionRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1SubscriptionRequestDefinitionLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1SubscriptionRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1SubscriptionRequestDefinitionLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1SupportContact(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1SupportContactExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1SupportContactExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1SupportContactLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1SupportContactLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1SupportContactLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1SupportContactLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1Application", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1Application(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAccessControlList(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAccessControlListExtension(context.Background(), applicationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAccessControlListLanguages(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAccessControlListLanguagesCode(context.Background(), applicationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAssetRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAssetRequest(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAssetRequestApproval", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAssetRequestApproval(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAssetRequestData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAssetRequestData(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAssetRequestExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAssetRequestExtension(context.Background(), applicationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAssetRequestLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAssetRequestLanguages(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAssetRequestLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAssetRequestLanguagesCode(context.Background(), applicationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAssetRequestMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAssetRequestMarketplace(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAssetRequestReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAssetRequestReferences(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationAssetRequestStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationAssetRequestStatus(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredential(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredentialData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredentialData(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredentialExpiration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredentialExpiration(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredentialExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredentialExtension(context.Background(), applicationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredentialLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredentialLanguages(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredentialLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredentialLanguagesCode(context.Background(), applicationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredentialMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredentialMarketplace(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredentialPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredentialPolicies(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredentialReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredentialReferences(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredentialState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredentialState(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationCredentialStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationCredentialStatus(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationMarketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ApplicationState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ApplicationState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1Asset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1Asset(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAccess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAccess(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAccessControlList(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAccessControlListExtension(context.Background(), assetName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAccessControlListLanguages(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAccessControlListLanguagesCode(context.Background(), assetName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetMapping(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetMappingExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetMappingExtension(context.Background(), assetName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetMappingLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetMappingLanguages(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetMappingLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetMappingLanguagesCode(context.Background(), assetName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetMappingStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetMappingStatus(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetResource(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetResourceExtension(context.Background(), assetName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetResourceLanguages(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetResourceLanguagesCode(context.Background(), assetName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetResourceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetResourceReferences(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetAssetResourceReleasehash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetAssetResourceReleasehash(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetLatestrelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetLatestrelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseAccessControlList(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseAccessControlListExtension(context.Background(), assetreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseAccessControlListLanguages(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseAccessControlListLanguagesCode(context.Background(), assetreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseAssetResource(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseAssetResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseAssetResourceExtension(context.Background(), assetreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseAssetResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseAssetResourceLanguages(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseAssetResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseAssetResourceLanguagesCode(context.Background(), assetreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseAssetResourceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseAssetResourceReferences(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseAssetResourceReleasehash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseAssetResourceReleasehash(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseTag(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseTagExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseTagExtension(context.Background(), assetName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseTagLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseTagLanguages(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseTagLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseTagLanguagesCode(context.Background(), assetName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseTagState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseTagState(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetReleaseTagStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetReleaseTagStatus(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AssetStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AssetStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfile(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAccessControlList(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAccessControlListExtension(context.Background(), authprofileName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAccessControlListLanguages(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAccessControlListLanguagesCode(context.Background(), authprofileName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinition(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionAuthorization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionAuthorization(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionExtension(context.Background(), authprofileName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionLanguages(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionLanguagesCode(context.Background(), authprofileName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionReferences(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionWebhooks(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionExtension(context.Background(), authprofileName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionLanguages(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionLanguagesCode(context.Background(), authprofileName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionReferences(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionWebhooks(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfilePolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfilePolicies(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileSecret(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileSecretExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileSecretExtension(context.Background(), authprofileName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileSecretLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileSecretLanguages(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileSecretLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileSecretLanguagesCode(context.Background(), authprofileName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileWebhook(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileWebhookExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileWebhookExtension(context.Background(), authprofileName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileWebhookLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileWebhookLanguages(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1AuthorizationProfileWebhookLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1AuthorizationProfileWebhookLanguagesCode(context.Background(), authprofileName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1Category(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1CategoryAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1CategoryAccessControlList(context.Background(), categoryName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1CategoryAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1CategoryAccessControlListExtension(context.Background(), categoryName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1CategoryAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1CategoryAccessControlListLanguages(context.Background(), categoryName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1CategoryAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1CategoryAccessControlListLanguagesCode(context.Background(), categoryName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1CategoryExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1CategoryExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1CategoryIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1CategoryIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1CategoryLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1CategoryLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1CategoryLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1CategoryLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResourceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResourceAccessControlList(context.Background(), documentresourceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResourceAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResourceAccessControlListExtension(context.Background(), documentresourceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResourceAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResourceAccessControlListLanguages(context.Background(), documentresourceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResourceAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResourceAccessControlListLanguagesCode(context.Background(), documentresourceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResourceExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResourceIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResourceIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResourceLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResourceLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResourceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResourceReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1DocumentResourceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1DocumentResourceState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1Marketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceAccessControlList(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceAccessControlListExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceAccessControlListLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceAccessControlListLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceAssistedSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceAssistedSearch(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceAssistedSearchExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceAssistedSearchExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceAssistedSearchLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceAssistedSearchLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceAssistedSearchLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceAssistedSearchLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceAssistedSearchState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceAssistedSearchState(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceBilling(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceCategoryVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceCategoryVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceCategoryVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceCategoryVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceCategoryVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceCategoryVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceCategoryVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceConsumerProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceConsumerProductVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceConsumerProductVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceConsumerProductVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceConsumerProductVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceConsumerProductVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceConsumerProductVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceConsumerProductVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceConsumerStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceConsumerStageVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceConsumerStageVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceConsumerStageVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceConsumerStageVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceConsumerStageVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceConsumerStageVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceConsumerStageVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceProductVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceProductVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceProductVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceProductVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceProductVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceProductVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceProductVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedDocumentResource(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedDocumentResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedDocumentResourceExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedDocumentResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedDocumentResourceLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedDocumentResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedDocumentResourceLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedProduct(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedProductExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedProductExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedProductLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedProductLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedProductLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedProductLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedProductReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedProductReferences(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedProductStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedProductStatus(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedStage(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedStageExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedStageExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedStageLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedStageLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplacePublishedStageLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplacePublishedStageLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceStageVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceStageVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceStageVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceStageVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceStageVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1MarketplaceStageVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1MarketplaceStageVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1Product(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductAccessControlList(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductAccessControlListExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductAccessControlListLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductAccessControlListLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductDocument(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductDocumentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductDocumentExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductDocumentIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductDocumentIcon(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductDocumentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductDocumentLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductDocumentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductDocumentLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductDocumentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductDocumentStatus(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductLatestrelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductLatestrelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlan(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanAccessControlList(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanAccessControlListExtension(context.Background(), productplanName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanAccessControlListLanguages(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanAccessControlListLanguagesCode(context.Background(), productplanName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanProductPlanJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanProductPlanJob(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanProductPlanJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanProductPlanJobExtension(context.Background(), productplanName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanProductPlanJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanProductPlanJobLanguages(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanProductPlanJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanProductPlanJobLanguagesCode(context.Background(), productplanName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanProductPlanJobStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanProductPlanJobStatus(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanQuota(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanQuotaExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanQuotaExtension(context.Background(), productplanName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanQuotaLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanQuotaLanguages(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanQuotaLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanQuotaLanguagesCode(context.Background(), productplanName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanQuotaStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanQuotaStatus(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanUnit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanUnit(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanUnitAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanUnitAccessControlList(context.Background(), productplanunitName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanUnitAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanUnitAccessControlListExtension(context.Background(), productplanunitName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanUnitAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanUnitAccessControlListLanguages(context.Background(), productplanunitName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanUnitAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanUnitAccessControlListLanguagesCode(context.Background(), productplanunitName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanUnitExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanUnitExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanUnitLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanUnitLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductPlanUnitLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductPlanUnitLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductProductOverview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductProductOverviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductProductOverviewExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductProductOverviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductProductOverviewLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductProductOverviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductProductOverviewLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductProductReview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductProductReviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductProductReviewExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductProductReviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductProductReviewLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductProductReviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductProductReviewLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductProductReviewMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductProductReviewMarketplace(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductProductReviewState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductProductReviewState(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseAccessControlList(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseAccessControlListExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseAccessControlListLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseAccessControlListLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseDocument(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseDocumentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseDocumentExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseDocumentIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseDocumentIcon(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseDocumentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseDocumentLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseDocumentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseDocumentLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseDocumentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseDocumentStatus(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseProductOverview(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseProductOverviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseProductOverviewExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseProductOverviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseProductOverviewLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseProductOverviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseProductOverviewLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseResource(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseResourceExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseResourceLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseResourceLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseTag(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseTagExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseTagExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseTagLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseTagLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseTagLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseTagLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseTagState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseTagState(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductReleaseTagStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductReleaseTagStatus(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductResource(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductResourceExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductResourceLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductResourceLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1ProductStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1ProductStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1Stage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1Stage(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1StageAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1StageAccessControlList(context.Background(), stageName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1StageAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1StageAccessControlListExtension(context.Background(), stageName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1StageAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1StageAccessControlListLanguages(context.Background(), stageName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1StageAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1StageAccessControlListLanguagesCode(context.Background(), stageName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1StageExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1StageExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1StageIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1StageIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1StageLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1StageLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1StageLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1StageLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1Subscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1Subscription(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionAccessControlList(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionAccessControlListExtension(context.Background(), subscriptionName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionAccessControlListLanguages(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionAccessControlListLanguagesCode(context.Background(), subscriptionName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionApproval", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionApproval(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionBilling(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionMarketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionRequestDefinition(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList(context.Background(), subscriptionrequestdefinitionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListExtension(context.Background(), subscriptionrequestdefinitionName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListLanguages(context.Background(), subscriptionrequestdefinitionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListLanguagesCode(context.Background(), subscriptionrequestdefinitionName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionRequestDefinitionExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionRequestDefinitionLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionRequestDefinitionLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionInvoice(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceBilling(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceExtension(context.Background(), subscriptionName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceLanguages(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceLanguagesCode(context.Background(), subscriptionName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceMarketplace(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceState(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionInvoiceStatus(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionJob(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionJobExtension(context.Background(), subscriptionName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionJobLanguages(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionJobLanguagesCode(context.Background(), subscriptionName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SubscriptionSubscriptionJobStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SubscriptionSubscriptionJobStatus(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SupportContact(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SupportContactAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SupportContactAccessControlList(context.Background(), supportcontactName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SupportContactAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SupportContactAccessControlListExtension(context.Background(), supportcontactName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SupportContactAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SupportContactAccessControlListLanguages(context.Background(), supportcontactName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SupportContactAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SupportContactAccessControlListLanguagesCode(context.Background(), supportcontactName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SupportContactExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SupportContactExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SupportContactLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SupportContactLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadCatalogV1alpha1SupportContactLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.ReadCatalogV1alpha1SupportContactLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadRawCatalogV1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.ReadRawCatalogV1DocumentResource(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadRawCatalogV1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.ReadRawCatalogV1ProductReleaseResource(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadRawCatalogV1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.ReadRawCatalogV1ProductResource(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadRawCatalogV1alpha1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.ReadRawCatalogV1alpha1DocumentResource(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadRawCatalogV1alpha1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.ReadRawCatalogV1alpha1ProductReleaseResource(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService ReadRawCatalogV1alpha1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.ReadRawCatalogV1alpha1ProductResource(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1Category(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1DocumentResource(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1Marketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1MarketplaceCategoryVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1MarketplacePublishedDocumentResource(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1MarketplacePublishedStage(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1Product(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1ProductDocument(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1ProductPlanQuota(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1ProductProductOverview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1ProductProductReview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1ProductRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1ProductReleaseDocument(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1ProductReleaseProductOverview(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1ProductReleaseResource(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1ProductResource(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1SubscriptionRequestDefinition(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1SupportContact(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1Application", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1Application(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ApplicationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ApplicationAccessControlList(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ApplicationAssetRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ApplicationAssetRequest(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ApplicationCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ApplicationCredential(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1Asset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1Asset(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AssetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AssetAccessControlList(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AssetAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AssetAssetMapping(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AssetAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AssetAssetResource(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AssetRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AssetRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AssetReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AssetReleaseAccessControlList(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AssetReleaseAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AssetReleaseAssetResource(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AssetReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AssetReleaseTag(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AuthorizationProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AuthorizationProfile(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AuthorizationProfileAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AuthorizationProfileAccessControlList(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AuthorizationProfileAssetRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AuthorizationProfileAssetRequestDefinition(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AuthorizationProfileSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AuthorizationProfileSecret(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1AuthorizationProfileWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1AuthorizationProfileWebhook(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1Category(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1CategoryAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1CategoryAccessControlList(context.Background(), categoryName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1DocumentResource(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1DocumentResourceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1DocumentResourceAccessControlList(context.Background(), documentresourceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1Marketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1MarketplaceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1MarketplaceAccessControlList(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1MarketplaceAssistedSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1MarketplaceAssistedSearch(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1MarketplaceCategoryVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1MarketplaceConsumerProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1MarketplaceConsumerProductVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1MarketplaceConsumerStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1MarketplaceConsumerStageVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1MarketplaceProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1MarketplaceProductVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1MarketplacePublishedDocumentResource(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1MarketplacePublishedProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1MarketplacePublishedProduct(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1MarketplacePublishedStage(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1MarketplaceStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1MarketplaceStageVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1Product(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductAccessControlList(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductDocument(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductPlan(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductPlanAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductPlanAccessControlList(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductPlanProductPlanJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductPlanProductPlanJob(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductPlanQuota(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductPlanUnit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductPlanUnit(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductPlanUnitAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductPlanUnitAccessControlList(context.Background(), productplanunitName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductProductOverview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductProductReview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductReleaseAccessControlList(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductReleaseDocument(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductReleaseProductOverview(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductReleaseResource(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductReleaseTag(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1ProductResource(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1Stage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1Stage(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1StageAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1StageAccessControlList(context.Background(), stageName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1Subscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1Subscription(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1SubscriptionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1SubscriptionAccessControlList(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1SubscriptionRequestDefinition(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList(context.Background(), subscriptionrequestdefinitionName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1SubscriptionSubscriptionInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1SubscriptionSubscriptionInvoice(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1SubscriptionSubscriptionJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1SubscriptionSubscriptionJob(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1SupportContact(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService RemoveCatalogV1alpha1SupportContactAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string
		var name string

		httpRes, err := apiClient.CatalogAPI.RemoveCatalogV1alpha1SupportContactAccessControlList(context.Background(), supportcontactName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1Category(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1CategoryExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1CategoryExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1CategoryIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1CategoryIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1CategoryLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1CategoryLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1CategoryLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1CategoryLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1DocumentResource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1DocumentResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1DocumentResourceExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1DocumentResourceIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1DocumentResourceIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1DocumentResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1DocumentResourceLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1DocumentResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1DocumentResourceLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1DocumentResourceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1DocumentResourceReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1DocumentResourceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1DocumentResourceState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1Marketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplaceBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplaceBilling(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplaceCategoryVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplaceCategoryVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplaceCategoryVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplaceCategoryVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplaceCategoryVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplaceCategoryVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplaceCategoryVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplaceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplaceExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplaceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplaceLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplaceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplaceLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplacePublishedDocumentResource(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplacePublishedDocumentResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplacePublishedDocumentResourceExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplacePublishedDocumentResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplacePublishedDocumentResourceLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplacePublishedDocumentResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplacePublishedDocumentResourceLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplacePublishedStage(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplacePublishedStageExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplacePublishedStageExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplacePublishedStageLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplacePublishedStageLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1MarketplacePublishedStageLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1MarketplacePublishedStageLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1Product(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductDocument(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductDocumentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductDocumentExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductDocumentIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductDocumentIcon(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductDocumentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductDocumentLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductDocumentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductDocumentLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductDocumentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductDocumentStatus(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductLatestrelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductLatestrelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductPlanQuota(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductPlanQuotaExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductPlanQuotaExtension(context.Background(), productplanName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductPlanQuotaLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductPlanQuotaLanguages(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductPlanQuotaLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductPlanQuotaLanguagesCode(context.Background(), productplanName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductPlanQuotaStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductPlanQuotaStatus(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductProductOverview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductProductOverviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductProductOverviewExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductProductOverviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductProductOverviewLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductProductOverviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductProductOverviewLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductProductReview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductProductReviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductProductReviewExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductProductReviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductProductReviewLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductProductReviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductProductReviewLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductProductReviewMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductProductReviewMarketplace(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductProductReviewState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductProductReviewState(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseDocument(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseDocumentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseDocumentExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseDocumentIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseDocumentIcon(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseDocumentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseDocumentLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseDocumentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseDocumentLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseDocumentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseDocumentStatus(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseProductOverview(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseProductOverviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseProductOverviewExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseProductOverviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseProductOverviewLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseProductOverviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseProductOverviewLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseResource(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseResourceExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseResourceLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseResourceLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductReleaseStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductReleaseStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductResource(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductResourceExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductResourceLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductResourceLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1ProductStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1ProductStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1SubscriptionRequestDefinition(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1SubscriptionRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1SubscriptionRequestDefinitionExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1SubscriptionRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1SubscriptionRequestDefinitionLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1SubscriptionRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1SubscriptionRequestDefinitionLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1SupportContact(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1SupportContactExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1SupportContactExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1SupportContactLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1SupportContactLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1SupportContactLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1SupportContactLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1Application", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1Application(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAccessControlList(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAccessControlListExtension(context.Background(), applicationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAccessControlListLanguages(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAccessControlListLanguagesCode(context.Background(), applicationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAssetRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAssetRequest(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAssetRequestApproval", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAssetRequestApproval(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAssetRequestData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAssetRequestData(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAssetRequestExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAssetRequestExtension(context.Background(), applicationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAssetRequestLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAssetRequestLanguages(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAssetRequestLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAssetRequestLanguagesCode(context.Background(), applicationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAssetRequestMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAssetRequestMarketplace(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAssetRequestReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAssetRequestReferences(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationAssetRequestStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationAssetRequestStatus(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredential(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredentialData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredentialData(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredentialExpiration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredentialExpiration(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredentialExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredentialExtension(context.Background(), applicationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredentialLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredentialLanguages(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredentialLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredentialLanguagesCode(context.Background(), applicationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredentialMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredentialMarketplace(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredentialPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredentialPolicies(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredentialReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredentialReferences(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredentialState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredentialState(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationCredentialStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationCredentialStatus(context.Background(), applicationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationMarketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ApplicationState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ApplicationState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1Asset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1Asset(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAccess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAccess(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAccessControlList(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAccessControlListExtension(context.Background(), assetName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAccessControlListLanguages(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAccessControlListLanguagesCode(context.Background(), assetName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetMapping(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetMappingExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetMappingExtension(context.Background(), assetName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetMappingLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetMappingLanguages(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetMappingLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetMappingLanguagesCode(context.Background(), assetName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetMappingStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetMappingStatus(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetResource(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetResourceExtension(context.Background(), assetName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetResourceLanguages(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetResourceLanguagesCode(context.Background(), assetName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetResourceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetResourceReferences(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetAssetResourceReleasehash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetAssetResourceReleasehash(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetLatestrelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetLatestrelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseAccessControlList(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseAccessControlListExtension(context.Background(), assetreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseAccessControlListLanguages(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseAccessControlListLanguagesCode(context.Background(), assetreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseAssetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseAssetResource(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseAssetResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseAssetResourceExtension(context.Background(), assetreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseAssetResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseAssetResourceLanguages(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseAssetResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseAssetResourceLanguagesCode(context.Background(), assetreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseAssetResourceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseAssetResourceReferences(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseAssetResourceReleasehash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseAssetResourceReleasehash(context.Background(), assetreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseTag(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseTagExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseTagExtension(context.Background(), assetName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseTagLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseTagLanguages(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseTagLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseTagLanguagesCode(context.Background(), assetName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseTagState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseTagState(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetReleaseTagStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assetName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetReleaseTagStatus(context.Background(), assetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AssetStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AssetStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfile(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAccessControlList(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAccessControlListExtension(context.Background(), authprofileName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAccessControlListLanguages(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAccessControlListLanguagesCode(context.Background(), authprofileName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinition(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionAuthorization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionAuthorization(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionExtension(context.Background(), authprofileName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionLanguages(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionLanguagesCode(context.Background(), authprofileName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionReferences(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileAssetRequestDefinitionWebhooks(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinition(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionExtension(context.Background(), authprofileName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionLanguages(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionLanguagesCode(context.Background(), authprofileName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionReferences(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileCredentialRequestDefinitionWebhooks(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfilePolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfilePolicies(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileSecret(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileSecretExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileSecretExtension(context.Background(), authprofileName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileSecretLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileSecretLanguages(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileSecretLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileSecretLanguagesCode(context.Background(), authprofileName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileWebhook(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileWebhookExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileWebhookExtension(context.Background(), authprofileName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileWebhookLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileWebhookLanguages(context.Background(), authprofileName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1AuthorizationProfileWebhookLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authprofileName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1AuthorizationProfileWebhookLanguagesCode(context.Background(), authprofileName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1Category", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1Category(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1CategoryAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1CategoryAccessControlList(context.Background(), categoryName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1CategoryAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1CategoryAccessControlListExtension(context.Background(), categoryName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1CategoryAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1CategoryAccessControlListLanguages(context.Background(), categoryName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1CategoryAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1CategoryAccessControlListLanguagesCode(context.Background(), categoryName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1CategoryExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1CategoryExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1CategoryIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1CategoryIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1CategoryLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1CategoryLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1CategoryLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1CategoryLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResourceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResourceAccessControlList(context.Background(), documentresourceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResourceAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResourceAccessControlListExtension(context.Background(), documentresourceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResourceAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResourceAccessControlListLanguages(context.Background(), documentresourceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResourceAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var documentresourceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResourceAccessControlListLanguagesCode(context.Background(), documentresourceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResourceExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResourceIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResourceIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResourceLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResourceLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResourceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResourceReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1DocumentResourceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1DocumentResourceState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1Marketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1Marketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceAccessControlList(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceAccessControlListExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceAccessControlListLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceAccessControlListLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceAssistedSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceAssistedSearch(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceAssistedSearchExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceAssistedSearchExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceAssistedSearchLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceAssistedSearchLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceAssistedSearchLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceAssistedSearchLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceAssistedSearchState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceAssistedSearchState(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceBilling(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceCategoryVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceCategoryVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceCategoryVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceCategoryVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceCategoryVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceCategoryVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceCategoryVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceCategoryVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceConsumerProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceConsumerProductVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceConsumerProductVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceConsumerProductVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceConsumerProductVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceConsumerProductVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceConsumerProductVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceConsumerProductVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceConsumerStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceConsumerStageVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceConsumerStageVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceConsumerStageVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceConsumerStageVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceConsumerStageVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceConsumerStageVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceConsumerStageVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceProductVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceProductVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceProductVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceProductVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceProductVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceProductVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceProductVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceProductVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedDocumentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedDocumentResource(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedDocumentResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedDocumentResourceExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedDocumentResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedDocumentResourceLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedDocumentResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedDocumentResourceLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedProduct(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedProductExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedProductExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedProductLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedProductLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedProductLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedProductLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedProductReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedProductReferences(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedProductStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedProductStatus(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedStage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedStage(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedStageExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedStageExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedStageLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedStageLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplacePublishedStageLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplacePublishedStageLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceStageVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceStageVisibility(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceStageVisibilityExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceStageVisibilityExtension(context.Background(), marketplaceName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceStageVisibilityLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceStageVisibilityLanguages(context.Background(), marketplaceName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1MarketplaceStageVisibilityLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketplaceName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1MarketplaceStageVisibilityLanguagesCode(context.Background(), marketplaceName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1Product", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1Product(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductAccessControlList(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductAccessControlListExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductAccessControlListLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductAccessControlListLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductDocument(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductDocumentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductDocumentExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductDocumentIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductDocumentIcon(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductDocumentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductDocumentLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductDocumentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductDocumentLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductDocumentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductDocumentStatus(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductLatestrelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductLatestrelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlan(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanAccessControlList(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanAccessControlListExtension(context.Background(), productplanName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanAccessControlListLanguages(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanAccessControlListLanguagesCode(context.Background(), productplanName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanProductPlanJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanProductPlanJob(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanProductPlanJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanProductPlanJobExtension(context.Background(), productplanName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanProductPlanJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanProductPlanJobLanguages(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanProductPlanJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanProductPlanJobLanguagesCode(context.Background(), productplanName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanProductPlanJobStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanProductPlanJobStatus(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanQuota", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanQuota(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanQuotaExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanQuotaExtension(context.Background(), productplanName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanQuotaLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanQuotaLanguages(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanQuotaLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanQuotaLanguagesCode(context.Background(), productplanName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanQuotaStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanQuotaStatus(context.Background(), productplanName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanUnit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanUnit(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanUnitAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanUnitAccessControlList(context.Background(), productplanunitName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanUnitAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanUnitAccessControlListExtension(context.Background(), productplanunitName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanUnitAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanUnitAccessControlListLanguages(context.Background(), productplanunitName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanUnitAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productplanunitName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanUnitAccessControlListLanguagesCode(context.Background(), productplanunitName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanUnitExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanUnitExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanUnitLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanUnitLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductPlanUnitLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductPlanUnitLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductProductOverview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductProductOverviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductProductOverviewExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductProductOverviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductProductOverviewLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductProductOverviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductProductOverviewLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductProductReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductProductReview(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductProductReviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductProductReviewExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductProductReviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductProductReviewLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductProductReviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductProductReviewLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductProductReviewMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductProductReviewMarketplace(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductProductReviewState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductProductReviewState(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductRelease(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseAccessControlList(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseAccessControlListExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseAccessControlListLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseAccessControlListLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseDocument(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseDocumentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseDocumentExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseDocumentIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseDocumentIcon(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseDocumentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseDocumentLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseDocumentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseDocumentLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseDocumentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseDocumentStatus(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseProductOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseProductOverview(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseProductOverviewExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseProductOverviewExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseProductOverviewLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseProductOverviewLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseProductOverviewLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseProductOverviewLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseResource(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseResourceExtension(context.Background(), productreleaseName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseResourceLanguages(context.Background(), productreleaseName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productreleaseName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseResourceLanguagesCode(context.Background(), productreleaseName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseTag(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseTagExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseTagExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseTagLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseTagLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseTagLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseTagLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseTagState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseTagState(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductReleaseTagStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductReleaseTagStatus(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductResource(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductResourceExtension(context.Background(), productName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductResourceLanguages(context.Background(), productName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductResourceLanguagesCode(context.Background(), productName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1ProductStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1ProductStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1Stage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1Stage(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1StageAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1StageAccessControlList(context.Background(), stageName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1StageAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1StageAccessControlListExtension(context.Background(), stageName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1StageAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1StageAccessControlListLanguages(context.Background(), stageName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1StageAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1StageAccessControlListLanguagesCode(context.Background(), stageName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1StageExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1StageExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1StageIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1StageIcon(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1StageLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1StageLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1StageLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1StageLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1Subscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1Subscription(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionAccessControlList(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionAccessControlListExtension(context.Background(), subscriptionName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionAccessControlListLanguages(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionAccessControlListLanguagesCode(context.Background(), subscriptionName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionApproval", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionApproval(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionBilling(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionMarketplace(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionRequestDefinition(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionRequestDefinitionAccessControlList(context.Background(), subscriptionrequestdefinitionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListExtension(context.Background(), subscriptionrequestdefinitionName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListLanguages(context.Background(), subscriptionrequestdefinitionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionrequestdefinitionName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionRequestDefinitionAccessControlListLanguagesCode(context.Background(), subscriptionrequestdefinitionName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionRequestDefinitionExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionRequestDefinitionLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionRequestDefinitionLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionState(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionInvoice(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceBilling(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceExtension(context.Background(), subscriptionName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceLanguages(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceLanguagesCode(context.Background(), subscriptionName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceMarketplace(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceState(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionInvoiceStatus(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionJob(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionJobExtension(context.Background(), subscriptionName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionJobLanguages(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionJobLanguagesCode(context.Background(), subscriptionName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SubscriptionSubscriptionJobStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SubscriptionSubscriptionJobStatus(context.Background(), subscriptionName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SupportContact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SupportContact(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SupportContactAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SupportContactAccessControlList(context.Background(), supportcontactName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SupportContactAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SupportContactAccessControlListExtension(context.Background(), supportcontactName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SupportContactAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SupportContactAccessControlListLanguages(context.Background(), supportcontactName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SupportContactAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportcontactName string
		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SupportContactAccessControlListLanguagesCode(context.Background(), supportcontactName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SupportContactExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SupportContactExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SupportContactLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SupportContactLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIService UpdateCatalogV1alpha1SupportContactLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.CatalogAPI.UpdateCatalogV1alpha1SupportContactLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
