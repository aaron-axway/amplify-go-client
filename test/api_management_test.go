/*
AMPLIFY Central API v0.347

Testing ManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/aaron-axway/amplify-go-client"
)

func Test_openapi_ManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ManagementAPIService CountManagementV1APISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1APISpecLintingJob(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1APISpecLintingRuleset(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1BatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1BatchJob(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1EnvironmentAPISpecLintingJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1EnvironmentBatchJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1APIService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1APIService(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1APIServiceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1APIServiceInstance(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1APIServiceRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1APIServiceRevision(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1APISpec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1APISpec(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1APISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1APISpecLintingJob(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1APISpecLintingRuleset(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1APISpecLintingRulesetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1APISpecLintingRulesetAccessControlList(context.Background(), apispeclintingrulesetName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1AccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1AccessControlList(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1AccessRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1AccessRequest(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1AccessRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1AccessRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1AssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1AssetMapping(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1AssetMappingTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1AssetMappingTemplate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1BatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1BatchJob(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1ConsumerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1ConsumerInstance(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1ConsumerSubscriptionDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1ConsumerSubscriptionDefinition(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1Credential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1Credential(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1CredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1CredentialRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1Dataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1Dataplane(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1DataplaneSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1DataplaneSecret(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1DiscoveryAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1DiscoveryAgent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1Environment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1Environment(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentAPIService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentAPIService(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentAPIServiceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentAPIServiceInstance(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentAPIServiceRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentAPIServiceRevision(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentAPISpecLintingJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentAccessControlList(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentAccessRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentAccessRequest(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentAccessRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentAccessRequestDefinition(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentAssetMapping(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentAssetMappingTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentAssetMappingTemplate(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentBatchJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentConsumerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentConsumerInstance(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentConsumerSubscriptionDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentConsumerSubscriptionDefinition(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentCredential(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentCredentialRequestDefinition(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentDataplane(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentDataplaneSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentDataplaneSecret(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentDiscoveryAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentDiscoveryAgent(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentManagedApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentManagedApplication(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentSecret(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentTraceabilityAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentTraceabilityAgent(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1EnvironmentWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1EnvironmentWebhook(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1Integration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1Integration(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1IntegrationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1IntegrationAccessControlList(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1IntegrationResourceHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1IntegrationResourceHook(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1IntegrationSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1IntegrationSecret(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1IntegrationWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1IntegrationWebhook(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1K8SCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1K8SCluster(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1K8SClusterAPISpec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1K8SClusterAPISpec(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1K8SClusterAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1K8SClusterAccessControlList(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1K8SClusterK8SResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1K8SClusterK8SResource(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1K8SClusterResourceDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1K8SClusterResourceDiscovery(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1K8SClusterSpecDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1K8SClusterSpecDiscovery(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1K8SResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1K8SResource(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1ManagedApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1ManagedApplication(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1Mesh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1Mesh(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1MeshAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1MeshAccessControlList(context.Background(), meshName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1MeshDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1MeshDiscovery(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1MeshMeshDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1MeshMeshDiscovery(context.Background(), meshName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1MeshMeshService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1MeshMeshService(context.Background(), meshName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1MeshMeshWorkload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1MeshMeshWorkload(context.Background(), meshName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1MeshService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1MeshService(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1MeshWorkload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1MeshWorkload(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1ResourceDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1ResourceDiscovery(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1ResourceHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1ResourceHook(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1Secret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1Secret(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1SpecDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1SpecDiscovery(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1TraceabilityAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1TraceabilityAgent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1WatchTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1WatchTopic(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1WatchTopicAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1WatchTopicAccessControlList(context.Background(), watchtopicName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CountManagementV1alpha1Webhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagementAPI.CountManagementV1alpha1Webhook(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1APISpecLintingRuleset(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1EnvironmentAPISpecLintingJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1EnvironmentBatchJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1APISpecLintingRuleset(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1APISpecLintingRulesetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1APISpecLintingRulesetAccessControlList(context.Background(), apispeclintingrulesetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1Environment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1Environment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentAPIService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentAPIService(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentAPIServiceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentAPIServiceInstance(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentAPIServiceRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentAPIServiceRevision(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentAPISpecLintingJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentAccessControlList(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentAccessRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentAccessRequest(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentAccessRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentAccessRequestDefinition(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentAssetMapping(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentAssetMappingTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentAssetMappingTemplate(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentBatchJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentConsumerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentConsumerInstance(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentConsumerSubscriptionDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentConsumerSubscriptionDefinition(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentCredential(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentCredentialRequestDefinition(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentDataplane(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentDataplaneSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentDataplaneSecret(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentDiscoveryAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentDiscoveryAgent(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentManagedApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentManagedApplication(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentSecret(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentTraceabilityAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentTraceabilityAgent(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1EnvironmentWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1EnvironmentWebhook(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1Integration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1Integration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1IntegrationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1IntegrationAccessControlList(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1IntegrationResourceHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1IntegrationResourceHook(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1IntegrationSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1IntegrationSecret(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1IntegrationWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1IntegrationWebhook(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1K8SCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1K8SCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1K8SClusterAPISpec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1K8SClusterAPISpec(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1K8SClusterAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1K8SClusterAccessControlList(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1K8SClusterK8SResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1K8SClusterK8SResource(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1K8SClusterResourceDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1K8SClusterResourceDiscovery(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1K8SClusterSpecDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1K8SClusterSpecDiscovery(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1Mesh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1Mesh(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1MeshAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1MeshAccessControlList(context.Background(), meshName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1MeshMeshDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1MeshMeshDiscovery(context.Background(), meshName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1MeshMeshService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1MeshMeshService(context.Background(), meshName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1MeshMeshWorkload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1MeshMeshWorkload(context.Background(), meshName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1WatchTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1WatchTopic(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService CreateManagementV1alpha1WatchTopicAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string

		resp, httpRes, err := apiClient.ManagementAPI.CreateManagementV1alpha1WatchTopicAccessControlList(context.Background(), watchtopicName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1APISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1APISpecLintingJob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1APISpecLintingRuleset(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1BatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1BatchJob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1EnvironmentAPISpecLintingJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1EnvironmentBatchJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1APIService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1APIService(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1APIServiceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1APIServiceInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1APIServiceRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1APIServiceRevision(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1APISpec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1APISpec(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1APISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1APISpecLintingJob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1APISpecLintingRuleset(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1APISpecLintingRulesetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1APISpecLintingRulesetAccessControlList(context.Background(), apispeclintingrulesetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1AccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1AccessControlList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1AccessRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1AccessRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1AccessRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1AccessRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1AssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1AssetMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1AssetMappingTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1AssetMappingTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1BatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1BatchJob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1ConsumerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1ConsumerInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1ConsumerSubscriptionDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1ConsumerSubscriptionDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1Credential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1Credential(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1CredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1CredentialRequestDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1Dataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1Dataplane(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1DataplaneSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1DataplaneSecret(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1DiscoveryAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1DiscoveryAgent(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1Environment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1Environment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentAPIService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentAPIService(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentAPIServiceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentAPIServiceInstance(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentAPIServiceRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentAPIServiceRevision(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentAPISpecLintingJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentAccessControlList(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentAccessRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentAccessRequest(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentAccessRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentAccessRequestDefinition(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentAssetMapping(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentAssetMappingTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentAssetMappingTemplate(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentBatchJob(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentConsumerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentConsumerInstance(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentConsumerSubscriptionDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentConsumerSubscriptionDefinition(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentCredential(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentCredentialRequestDefinition(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentDataplane(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentDataplaneSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentDataplaneSecret(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentDiscoveryAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentDiscoveryAgent(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentManagedApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentManagedApplication(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentSecret(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentTraceabilityAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentTraceabilityAgent(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1EnvironmentWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1EnvironmentWebhook(context.Background(), environmentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1Integration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1Integration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1IntegrationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1IntegrationAccessControlList(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1IntegrationResourceHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1IntegrationResourceHook(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1IntegrationSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1IntegrationSecret(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1IntegrationWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1IntegrationWebhook(context.Background(), integrationName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1K8SCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1K8SCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1K8SClusterAPISpec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1K8SClusterAPISpec(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1K8SClusterAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1K8SClusterAccessControlList(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1K8SClusterK8SResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1K8SClusterK8SResource(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1K8SClusterResourceDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1K8SClusterResourceDiscovery(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1K8SClusterSpecDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1K8SClusterSpecDiscovery(context.Background(), k8sclusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1K8SResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1K8SResource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1ManagedApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1ManagedApplication(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1Mesh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1Mesh(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1MeshAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1MeshAccessControlList(context.Background(), meshName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1MeshDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1MeshDiscovery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1MeshMeshDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1MeshMeshDiscovery(context.Background(), meshName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1MeshMeshService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1MeshMeshService(context.Background(), meshName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1MeshMeshWorkload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1MeshMeshWorkload(context.Background(), meshName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1MeshService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1MeshService(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1MeshWorkload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1MeshWorkload(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1ResourceDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1ResourceDiscovery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1ResourceHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1ResourceHook(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1Secret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1Secret(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1SpecDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1SpecDiscovery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1TraceabilityAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1TraceabilityAgent(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1WatchTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1WatchTopic(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1WatchTopicAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1WatchTopicAccessControlList(context.Background(), watchtopicName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ListManagementV1alpha1Webhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagementAPI.ListManagementV1alpha1Webhook(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1APISpecLintingRuleset(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1EnvironmentAPISpecLintingJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1EnvironmentBatchJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1APISpecLintingRuleset(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1APISpecLintingRulesetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1APISpecLintingRulesetAccessControlList(context.Background(), apispeclintingrulesetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1Environment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1Environment(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentAPIService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentAPIService(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentAPIServiceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentAPIServiceInstance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentAPIServiceRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentAPIServiceRevision(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentAPISpecLintingJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentAccessControlList(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentAccessRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentAccessRequest(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentAccessRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentAccessRequestDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentAssetMapping(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentAssetMappingTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentAssetMappingTemplate(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentBatchJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentConsumerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentConsumerInstance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentConsumerSubscriptionDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentConsumerSubscriptionDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentCredential(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentCredentialRequestDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentDataplane(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentDataplaneSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentDataplaneSecret(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentDiscoveryAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentDiscoveryAgent(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentManagedApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentManagedApplication(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentSecret(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentTraceabilityAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentTraceabilityAgent(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1EnvironmentWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1EnvironmentWebhook(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1Integration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1Integration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1IntegrationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1IntegrationAccessControlList(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1IntegrationResourceHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1IntegrationResourceHook(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1IntegrationSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1IntegrationSecret(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1IntegrationWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1IntegrationWebhook(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1K8SCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1K8SCluster(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1K8SClusterAPISpec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1K8SClusterAPISpec(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1K8SClusterAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1K8SClusterAccessControlList(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1K8SClusterK8SResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1K8SClusterK8SResource(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1K8SClusterResourceDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1K8SClusterResourceDiscovery(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1K8SClusterSpecDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1K8SClusterSpecDiscovery(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1Mesh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1Mesh(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1MeshAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1MeshAccessControlList(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1MeshMeshDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1MeshMeshDiscovery(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1MeshMeshService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1MeshMeshService(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1MeshMeshWorkload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1MeshMeshWorkload(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1WatchTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1WatchTopic(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService PatchManagementV1alpha1WatchTopicAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.PatchManagementV1alpha1WatchTopicAccessControlList(context.Background(), watchtopicName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1APISpecLintingRuleset(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1APISpecLintingRulesetExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1APISpecLintingRulesetExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1APISpecLintingRulesetLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1APISpecLintingRulesetLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1APISpecLintingRulesetLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1APISpecLintingRulesetLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1APISpecLintingRulesetRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1APISpecLintingRulesetRevision(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentAPISpecLintingJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentAPISpecLintingJobArchived", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentAPISpecLintingJobArchived(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentAPISpecLintingJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentAPISpecLintingJobExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentAPISpecLintingJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentAPISpecLintingJobLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentAPISpecLintingJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentAPISpecLintingJobLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentAPISpecLintingJobResult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentAPISpecLintingJobResult(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentAPISpecLintingJobState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentAPISpecLintingJobState(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentBatchJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentBatchJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentBatchJobExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentBatchJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentBatchJobLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentBatchJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentBatchJobLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1EnvironmentBatchJobProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1EnvironmentBatchJobProgress(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1APISpecLintingRuleset(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1APISpecLintingRulesetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1APISpecLintingRulesetAccessControlList(context.Background(), apispeclintingrulesetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1APISpecLintingRulesetAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1APISpecLintingRulesetAccessControlListExtension(context.Background(), apispeclintingrulesetName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1APISpecLintingRulesetAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1APISpecLintingRulesetAccessControlListLanguages(context.Background(), apispeclintingrulesetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1APISpecLintingRulesetAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1APISpecLintingRulesetAccessControlListLanguagesCode(context.Background(), apispeclintingrulesetName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1APISpecLintingRulesetExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1APISpecLintingRulesetExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1APISpecLintingRulesetLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1APISpecLintingRulesetLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1APISpecLintingRulesetLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1APISpecLintingRulesetLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1APISpecLintingRulesetRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1APISpecLintingRulesetRevision(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1Environment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1Environment(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIService(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceCompliance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceCompliance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceDetails(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceInstance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceInstanceCompliance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceInstanceCompliance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceInstanceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceInstanceExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceInstanceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceInstanceLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceInstanceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceInstanceLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceInstanceLifecycle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceInstanceLifecycle(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceInstanceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceInstanceReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceInstanceSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceInstanceSource(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceRevision(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceRevisionCompliance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceRevisionCompliance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceRevisionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceRevisionExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceRevisionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceRevisionLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceRevisionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceRevisionLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceSource(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPIServiceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPIServiceStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPISpecLintingJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPISpecLintingJobArchived", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPISpecLintingJobArchived(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPISpecLintingJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPISpecLintingJobExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPISpecLintingJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPISpecLintingJobLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPISpecLintingJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPISpecLintingJobLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPISpecLintingJobResult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPISpecLintingJobResult(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAPISpecLintingJobState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAPISpecLintingJobState(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessControlList(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessControlListExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessControlListLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessControlListLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequest(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestData(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestDefinitionExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestDefinitionLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestDefinitionLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestDefinitionWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestDefinitionWebhooks(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAccessRequestStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAccessRequestStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAssetMapping(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAssetMappingExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAssetMappingExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAssetMappingLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAssetMappingLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAssetMappingLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAssetMappingLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAssetMappingStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAssetMappingStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAssetMappingTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAssetMappingTemplate(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAssetMappingTemplateExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAssetMappingTemplateExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAssetMappingTemplateLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAssetMappingTemplateLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentAssetMappingTemplateLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentAssetMappingTemplateLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentBatchJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentBatchJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentBatchJobExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentBatchJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentBatchJobLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentBatchJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentBatchJobLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentBatchJobProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentBatchJobProgress(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCompliancetasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCompliancetasks(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentConsumerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentConsumerInstance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentConsumerInstanceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentConsumerInstanceExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentConsumerInstanceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentConsumerInstanceLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentConsumerInstanceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentConsumerInstanceLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentConsumerInstanceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentConsumerInstanceReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentConsumerInstanceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentConsumerInstanceStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentConsumerSubscriptionDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentConsumerSubscriptionDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredential(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialData(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialPolicies(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialRequestDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialRequestDefinitionExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialRequestDefinitionLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialRequestDefinitionLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialRequestDefinitionReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialRequestDefinitionReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialRequestDefinitionWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialRequestDefinitionWebhooks(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialState(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentCredentialStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentCredentialStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplane(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneSecret(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneSecretExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneSecretExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneSecretLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneSecretLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneSecretLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneSecretLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneSecretState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneSecretState(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneSecretStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneSecretStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneSecretschema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneSecretschema(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDataplaneSecurity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDataplaneSecurity(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDiscoveryAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDiscoveryAgent(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDiscoveryAgentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDiscoveryAgentDataplane(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDiscoveryAgentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDiscoveryAgentExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDiscoveryAgentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDiscoveryAgentLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDiscoveryAgentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDiscoveryAgentLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentDiscoveryAgentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentDiscoveryAgentStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentManagedApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentManagedApplication(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentManagedApplicationExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentManagedApplicationExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentManagedApplicationLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentManagedApplicationLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentManagedApplicationLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentManagedApplicationLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentManagedApplicationMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentManagedApplicationMarketplace(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentManagedApplicationReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentManagedApplicationReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentManagedApplicationStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentManagedApplicationStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentPolicies(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentSecret(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentSecretExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentSecretExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentSecretLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentSecretLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentSecretLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentSecretLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentStages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentStages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentTraceabilityAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentTraceabilityAgent(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentTraceabilityAgentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentTraceabilityAgentDataplane(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentTraceabilityAgentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentTraceabilityAgentExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentTraceabilityAgentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentTraceabilityAgentLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentTraceabilityAgentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentTraceabilityAgentLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentTraceabilityAgentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentTraceabilityAgentStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentWebhook(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentWebhookExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentWebhookExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentWebhookLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentWebhookLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1EnvironmentWebhookLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1EnvironmentWebhookLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1Integration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1Integration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationAccessControlList(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationAccessControlListExtension(context.Background(), integrationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationAccessControlListLanguages(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationAccessControlListLanguagesCode(context.Background(), integrationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationResourceHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationResourceHook(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationResourceHookExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationResourceHookExtension(context.Background(), integrationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationResourceHookLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationResourceHookLanguages(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationResourceHookLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationResourceHookLanguagesCode(context.Background(), integrationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationSecret(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationSecretExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationSecretExtension(context.Background(), integrationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationSecretLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationSecretLanguages(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationSecretLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationSecretLanguagesCode(context.Background(), integrationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationWebhook(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationWebhookExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationWebhookExtension(context.Background(), integrationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationWebhookLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationWebhookLanguages(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1IntegrationWebhookLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1IntegrationWebhookLanguagesCode(context.Background(), integrationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SCluster(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterAPISpec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterAPISpec(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterAPISpecExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterAPISpecExtension(context.Background(), k8sclusterName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterAPISpecLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterAPISpecLanguages(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterAPISpecLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterAPISpecLanguagesCode(context.Background(), k8sclusterName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterAccessControlList(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterAccessControlListExtension(context.Background(), k8sclusterName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterAccessControlListLanguages(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterAccessControlListLanguagesCode(context.Background(), k8sclusterName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterK8SResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterK8SResource(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterK8SResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterK8SResourceExtension(context.Background(), k8sclusterName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterK8SResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterK8SResourceLanguages(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterK8SResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterK8SResourceLanguagesCode(context.Background(), k8sclusterName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterResourceDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterResourceDiscovery(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterResourceDiscoveryExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterResourceDiscoveryExtension(context.Background(), k8sclusterName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterResourceDiscoveryLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterResourceDiscoveryLanguages(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterResourceDiscoveryLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterResourceDiscoveryLanguagesCode(context.Background(), k8sclusterName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterSpecDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterSpecDiscovery(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterSpecDiscoveryExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterSpecDiscoveryExtension(context.Background(), k8sclusterName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterSpecDiscoveryLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterSpecDiscoveryLanguages(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1K8SClusterSpecDiscoveryLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1K8SClusterSpecDiscoveryLanguagesCode(context.Background(), k8sclusterName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1Mesh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1Mesh(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshAccessControlList(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshAccessControlListExtension(context.Background(), meshName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshAccessControlListLanguages(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshAccessControlListLanguagesCode(context.Background(), meshName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshDiscovery(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshDiscoveryExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshDiscoveryExtension(context.Background(), meshName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshDiscoveryLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshDiscoveryLanguages(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshDiscoveryLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshDiscoveryLanguagesCode(context.Background(), meshName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshService(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshServiceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshServiceExtension(context.Background(), meshName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshServiceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshServiceLanguages(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshServiceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshServiceLanguagesCode(context.Background(), meshName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshWorkload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshWorkload(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshWorkloadExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshWorkloadExtension(context.Background(), meshName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshWorkloadLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshWorkloadLanguages(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1MeshMeshWorkloadLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1MeshMeshWorkloadLanguagesCode(context.Background(), meshName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1WatchTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1WatchTopic(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1WatchTopicAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1WatchTopicAccessControlList(context.Background(), watchtopicName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1WatchTopicAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1WatchTopicAccessControlListExtension(context.Background(), watchtopicName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1WatchTopicAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1WatchTopicAccessControlListLanguages(context.Background(), watchtopicName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1WatchTopicAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1WatchTopicAccessControlListLanguagesCode(context.Background(), watchtopicName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1WatchTopicExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1WatchTopicExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1WatchTopicLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1WatchTopicLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService ReadManagementV1alpha1WatchTopicLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.ReadManagementV1alpha1WatchTopicLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1APISpecLintingRuleset(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1EnvironmentAPISpecLintingJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1EnvironmentBatchJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1APISpecLintingRuleset(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1APISpecLintingRulesetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1APISpecLintingRulesetAccessControlList(context.Background(), apispeclintingrulesetName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1Environment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1Environment(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentAPIService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentAPIService(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentAPIServiceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentAPIServiceInstance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentAPIServiceRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentAPIServiceRevision(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentAPISpecLintingJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentAccessControlList(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentAccessRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentAccessRequest(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentAccessRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentAccessRequestDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentAssetMapping(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentAssetMappingTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentAssetMappingTemplate(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentBatchJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentConsumerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentConsumerInstance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentConsumerSubscriptionDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentConsumerSubscriptionDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentCredential(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentCredentialRequestDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentDataplane(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentDataplaneSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentDataplaneSecret(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentDiscoveryAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentDiscoveryAgent(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentManagedApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentManagedApplication(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentSecret(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentTraceabilityAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentTraceabilityAgent(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1EnvironmentWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1EnvironmentWebhook(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1Integration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1Integration(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1IntegrationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1IntegrationAccessControlList(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1IntegrationResourceHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1IntegrationResourceHook(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1IntegrationSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1IntegrationSecret(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1IntegrationWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1IntegrationWebhook(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1K8SCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1K8SCluster(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1K8SClusterAPISpec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1K8SClusterAPISpec(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1K8SClusterAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1K8SClusterAccessControlList(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1K8SClusterK8SResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1K8SClusterK8SResource(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1K8SClusterResourceDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1K8SClusterResourceDiscovery(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1K8SClusterSpecDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1K8SClusterSpecDiscovery(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1Mesh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1Mesh(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1MeshAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1MeshAccessControlList(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1MeshMeshDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1MeshMeshDiscovery(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1MeshMeshService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1MeshMeshService(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1MeshMeshWorkload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1MeshMeshWorkload(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1WatchTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1WatchTopic(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService RemoveManagementV1alpha1WatchTopicAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string
		var name string

		httpRes, err := apiClient.ManagementAPI.RemoveManagementV1alpha1WatchTopicAccessControlList(context.Background(), watchtopicName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1APISpecLintingRuleset(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1APISpecLintingRulesetExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1APISpecLintingRulesetExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1APISpecLintingRulesetLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1APISpecLintingRulesetLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1APISpecLintingRulesetLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1APISpecLintingRulesetLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1APISpecLintingRulesetRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1APISpecLintingRulesetRevision(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentAPISpecLintingJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentAPISpecLintingJobArchived", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentAPISpecLintingJobArchived(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentAPISpecLintingJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentAPISpecLintingJobExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentAPISpecLintingJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentAPISpecLintingJobLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentAPISpecLintingJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentAPISpecLintingJobLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentAPISpecLintingJobResult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentAPISpecLintingJobResult(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentAPISpecLintingJobState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentAPISpecLintingJobState(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentBatchJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentBatchJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentBatchJobExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentBatchJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentBatchJobLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentBatchJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentBatchJobLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1EnvironmentBatchJobProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1EnvironmentBatchJobProgress(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1APISpecLintingRuleset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1APISpecLintingRuleset(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1APISpecLintingRulesetAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1APISpecLintingRulesetAccessControlList(context.Background(), apispeclintingrulesetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1APISpecLintingRulesetAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1APISpecLintingRulesetAccessControlListExtension(context.Background(), apispeclintingrulesetName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1APISpecLintingRulesetAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1APISpecLintingRulesetAccessControlListLanguages(context.Background(), apispeclintingrulesetName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1APISpecLintingRulesetAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apispeclintingrulesetName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1APISpecLintingRulesetAccessControlListLanguagesCode(context.Background(), apispeclintingrulesetName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1APISpecLintingRulesetExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1APISpecLintingRulesetExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1APISpecLintingRulesetLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1APISpecLintingRulesetLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1APISpecLintingRulesetLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1APISpecLintingRulesetLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1APISpecLintingRulesetRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1APISpecLintingRulesetRevision(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1Environment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1Environment(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIService(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceCompliance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceCompliance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceDetails(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceInstance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceInstanceCompliance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceInstanceCompliance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceInstanceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceInstanceExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceInstanceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceInstanceLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceInstanceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceInstanceLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceInstanceLifecycle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceInstanceLifecycle(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceInstanceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceInstanceReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceInstanceSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceInstanceSource(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceRevision(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceRevisionCompliance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceRevisionCompliance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceRevisionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceRevisionExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceRevisionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceRevisionLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceRevisionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceRevisionLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceSource(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPIServiceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPIServiceStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPISpecLintingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPISpecLintingJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPISpecLintingJobArchived", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPISpecLintingJobArchived(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPISpecLintingJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPISpecLintingJobExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPISpecLintingJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPISpecLintingJobLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPISpecLintingJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPISpecLintingJobLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPISpecLintingJobResult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPISpecLintingJobResult(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAPISpecLintingJobState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAPISpecLintingJobState(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessControlList(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessControlListExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessControlListLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessControlListLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequest(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestData(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestDefinitionExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestDefinitionLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestDefinitionLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestDefinitionWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestDefinitionWebhooks(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAccessRequestStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAccessRequestStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAssetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAssetMapping(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAssetMappingExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAssetMappingExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAssetMappingLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAssetMappingLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAssetMappingLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAssetMappingLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAssetMappingStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAssetMappingStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAssetMappingTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAssetMappingTemplate(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAssetMappingTemplateExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAssetMappingTemplateExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAssetMappingTemplateLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAssetMappingTemplateLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentAssetMappingTemplateLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentAssetMappingTemplateLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentBatchJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentBatchJob(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentBatchJobExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentBatchJobExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentBatchJobLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentBatchJobLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentBatchJobLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentBatchJobLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentBatchJobProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentBatchJobProgress(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCompliancetasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCompliancetasks(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentConsumerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentConsumerInstance(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentConsumerInstanceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentConsumerInstanceExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentConsumerInstanceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentConsumerInstanceLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentConsumerInstanceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentConsumerInstanceLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentConsumerInstanceReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentConsumerInstanceReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentConsumerInstanceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentConsumerInstanceStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentConsumerSubscriptionDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentConsumerSubscriptionDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentConsumerSubscriptionDefinitionLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredential(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialData(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialPolicies(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialRequestDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialRequestDefinition(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialRequestDefinitionExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialRequestDefinitionExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialRequestDefinitionLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialRequestDefinitionLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialRequestDefinitionLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialRequestDefinitionLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialRequestDefinitionReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialRequestDefinitionReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialRequestDefinitionWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialRequestDefinitionWebhooks(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialState(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentCredentialStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentCredentialStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplane(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneSecret(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneSecretExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneSecretExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneSecretLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneSecretLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneSecretLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneSecretLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneSecretState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneSecretState(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneSecretStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneSecretStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneSecretschema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneSecretschema(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDataplaneSecurity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDataplaneSecurity(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDiscoveryAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDiscoveryAgent(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDiscoveryAgentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDiscoveryAgentDataplane(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDiscoveryAgentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDiscoveryAgentExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDiscoveryAgentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDiscoveryAgentLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDiscoveryAgentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDiscoveryAgentLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentDiscoveryAgentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentDiscoveryAgentStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentManagedApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentManagedApplication(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentManagedApplicationExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentManagedApplicationExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentManagedApplicationLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentManagedApplicationLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentManagedApplicationLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentManagedApplicationLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentManagedApplicationMarketplace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentManagedApplicationMarketplace(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentManagedApplicationReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentManagedApplicationReferences(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentManagedApplicationStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentManagedApplicationStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentPolicies(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentReferences(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentSecret(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentSecretExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentSecretExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentSecretLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentSecretLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentSecretLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentSecretLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentStages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentStages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentTraceabilityAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentTraceabilityAgent(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentTraceabilityAgentDataplane", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentTraceabilityAgentDataplane(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentTraceabilityAgentExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentTraceabilityAgentExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentTraceabilityAgentLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentTraceabilityAgentLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentTraceabilityAgentLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentTraceabilityAgentLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentTraceabilityAgentStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentTraceabilityAgentStatus(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentWebhook(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentWebhookExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentWebhookExtension(context.Background(), environmentName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentWebhookLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentWebhookLanguages(context.Background(), environmentName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1EnvironmentWebhookLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1EnvironmentWebhookLanguagesCode(context.Background(), environmentName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1Integration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1Integration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationAccessControlList(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationAccessControlListExtension(context.Background(), integrationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationAccessControlListLanguages(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationAccessControlListLanguagesCode(context.Background(), integrationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationResourceHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationResourceHook(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationResourceHookExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationResourceHookExtension(context.Background(), integrationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationResourceHookLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationResourceHookLanguages(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationResourceHookLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationResourceHookLanguagesCode(context.Background(), integrationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationSecret(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationSecretExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationSecretExtension(context.Background(), integrationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationSecretLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationSecretLanguages(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationSecretLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationSecretLanguagesCode(context.Background(), integrationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationWebhook(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationWebhookExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationWebhookExtension(context.Background(), integrationName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationWebhookLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationWebhookLanguages(context.Background(), integrationName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1IntegrationWebhookLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1IntegrationWebhookLanguagesCode(context.Background(), integrationName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SCluster(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterAPISpec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterAPISpec(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterAPISpecExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterAPISpecExtension(context.Background(), k8sclusterName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterAPISpecLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterAPISpecLanguages(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterAPISpecLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterAPISpecLanguagesCode(context.Background(), k8sclusterName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterAccessControlList(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterAccessControlListExtension(context.Background(), k8sclusterName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterAccessControlListLanguages(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterAccessControlListLanguagesCode(context.Background(), k8sclusterName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterK8SResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterK8SResource(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterK8SResourceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterK8SResourceExtension(context.Background(), k8sclusterName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterK8SResourceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterK8SResourceLanguages(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterK8SResourceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterK8SResourceLanguagesCode(context.Background(), k8sclusterName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterResourceDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterResourceDiscovery(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterResourceDiscoveryExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterResourceDiscoveryExtension(context.Background(), k8sclusterName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterResourceDiscoveryLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterResourceDiscoveryLanguages(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterResourceDiscoveryLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterResourceDiscoveryLanguagesCode(context.Background(), k8sclusterName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterSpecDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterSpecDiscovery(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterSpecDiscoveryExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterSpecDiscoveryExtension(context.Background(), k8sclusterName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterSpecDiscoveryLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterSpecDiscoveryLanguages(context.Background(), k8sclusterName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1K8SClusterSpecDiscoveryLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var k8sclusterName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1K8SClusterSpecDiscoveryLanguagesCode(context.Background(), k8sclusterName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1Mesh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1Mesh(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshAccessControlList(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshAccessControlListExtension(context.Background(), meshName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshAccessControlListLanguages(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshAccessControlListLanguagesCode(context.Background(), meshName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshDiscovery(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshDiscoveryExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshDiscoveryExtension(context.Background(), meshName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshDiscoveryLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshDiscoveryLanguages(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshDiscoveryLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshDiscoveryLanguagesCode(context.Background(), meshName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshService(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshServiceExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshServiceExtension(context.Background(), meshName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshServiceLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshServiceLanguages(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshServiceLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshServiceLanguagesCode(context.Background(), meshName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshWorkload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshWorkload(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshWorkloadExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshWorkloadExtension(context.Background(), meshName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshWorkloadLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshWorkloadLanguages(context.Background(), meshName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1MeshMeshWorkloadLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var meshName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1MeshMeshWorkloadLanguagesCode(context.Background(), meshName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1WatchTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1WatchTopic(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1WatchTopicAccessControlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1WatchTopicAccessControlList(context.Background(), watchtopicName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1WatchTopicAccessControlListExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string
		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1WatchTopicAccessControlListExtension(context.Background(), watchtopicName, extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1WatchTopicAccessControlListLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1WatchTopicAccessControlListLanguages(context.Background(), watchtopicName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1WatchTopicAccessControlListLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var watchtopicName string
		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1WatchTopicAccessControlListLanguagesCode(context.Background(), watchtopicName, code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1WatchTopicExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extension string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1WatchTopicExtension(context.Background(), extension, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1WatchTopicLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1WatchTopicLanguages(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementAPIService UpdateManagementV1alpha1WatchTopicLanguagesCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var name string

		resp, httpRes, err := apiClient.ManagementAPI.UpdateManagementV1alpha1WatchTopicLanguagesCode(context.Background(), code, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
