/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1CredentialSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1CredentialSpec{}

// CatalogV1alpha1CredentialSpec struct for CatalogV1alpha1CredentialSpec
type CatalogV1alpha1CredentialSpec struct {
	// Reference to Credential Request Definition resource
	CredentialRequestDefinition string `json:"credentialRequestDefinition"`
	// data matching the credential request definition schema.
	Data map[string]interface{} `json:"data"`
	State *CatalogV1alpha1CredentialSpecState `json:"state,omitempty"`
}

type _CatalogV1alpha1CredentialSpec CatalogV1alpha1CredentialSpec

// NewCatalogV1alpha1CredentialSpec instantiates a new CatalogV1alpha1CredentialSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1CredentialSpec(credentialRequestDefinition string, data map[string]interface{}) *CatalogV1alpha1CredentialSpec {
	this := CatalogV1alpha1CredentialSpec{}
	this.CredentialRequestDefinition = credentialRequestDefinition
	this.Data = data
	return &this
}

// NewCatalogV1alpha1CredentialSpecWithDefaults instantiates a new CatalogV1alpha1CredentialSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1CredentialSpecWithDefaults() *CatalogV1alpha1CredentialSpec {
	this := CatalogV1alpha1CredentialSpec{}
	return &this
}

// GetCredentialRequestDefinition returns the CredentialRequestDefinition field value
func (o *CatalogV1alpha1CredentialSpec) GetCredentialRequestDefinition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CredentialRequestDefinition
}

// GetCredentialRequestDefinitionOk returns a tuple with the CredentialRequestDefinition field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1CredentialSpec) GetCredentialRequestDefinitionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CredentialRequestDefinition, true
}

// SetCredentialRequestDefinition sets field value
func (o *CatalogV1alpha1CredentialSpec) SetCredentialRequestDefinition(v string) {
	o.CredentialRequestDefinition = v
}

// GetData returns the Data field value
func (o *CatalogV1alpha1CredentialSpec) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1CredentialSpec) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *CatalogV1alpha1CredentialSpec) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CatalogV1alpha1CredentialSpec) GetState() CatalogV1alpha1CredentialSpecState {
	if o == nil || IsNil(o.State) {
		var ret CatalogV1alpha1CredentialSpecState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1CredentialSpec) GetStateOk() (*CatalogV1alpha1CredentialSpecState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CatalogV1alpha1CredentialSpec) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given CatalogV1alpha1CredentialSpecState and assigns it to the State field.
func (o *CatalogV1alpha1CredentialSpec) SetState(v CatalogV1alpha1CredentialSpecState) {
	o.State = &v
}

func (o CatalogV1alpha1CredentialSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1CredentialSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["credentialRequestDefinition"] = o.CredentialRequestDefinition
	toSerialize["data"] = o.Data
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1CredentialSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"credentialRequestDefinition",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1CredentialSpec := _CatalogV1alpha1CredentialSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1CredentialSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1CredentialSpec(varCatalogV1alpha1CredentialSpec)

	return err
}

type NullableCatalogV1alpha1CredentialSpec struct {
	value *CatalogV1alpha1CredentialSpec
	isSet bool
}

func (v NullableCatalogV1alpha1CredentialSpec) Get() *CatalogV1alpha1CredentialSpec {
	return v.value
}

func (v *NullableCatalogV1alpha1CredentialSpec) Set(val *CatalogV1alpha1CredentialSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1CredentialSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1CredentialSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1CredentialSpec(val *CatalogV1alpha1CredentialSpec) *NullableCatalogV1alpha1CredentialSpec {
	return &NullableCatalogV1alpha1CredentialSpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1CredentialSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1CredentialSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


