/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"fmt"
)

// ManagementV1alpha1AssetMappingStatusOperationType The type of the operation executed on the resource that triggered the Asset Mapping.
type ManagementV1alpha1AssetMappingStatusOperationType string

// List of management.v1alpha1.AssetMappingStatus.OperationType
const (
	CREATED ManagementV1alpha1AssetMappingStatusOperationType = "created"
	UPDATED ManagementV1alpha1AssetMappingStatusOperationType = "updated"
	DELETED ManagementV1alpha1AssetMappingStatusOperationType = "deleted"
)

// All allowed values of ManagementV1alpha1AssetMappingStatusOperationType enum
var AllowedManagementV1alpha1AssetMappingStatusOperationTypeEnumValues = []ManagementV1alpha1AssetMappingStatusOperationType{
	"created",
	"updated",
	"deleted",
}

func (v *ManagementV1alpha1AssetMappingStatusOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ManagementV1alpha1AssetMappingStatusOperationType(value)
	for _, existing := range AllowedManagementV1alpha1AssetMappingStatusOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ManagementV1alpha1AssetMappingStatusOperationType", value)
}

// NewManagementV1alpha1AssetMappingStatusOperationTypeFromValue returns a pointer to a valid ManagementV1alpha1AssetMappingStatusOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagementV1alpha1AssetMappingStatusOperationTypeFromValue(v string) (*ManagementV1alpha1AssetMappingStatusOperationType, error) {
	ev := ManagementV1alpha1AssetMappingStatusOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagementV1alpha1AssetMappingStatusOperationType: valid values are %v", v, AllowedManagementV1alpha1AssetMappingStatusOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagementV1alpha1AssetMappingStatusOperationType) IsValid() bool {
	for _, existing := range AllowedManagementV1alpha1AssetMappingStatusOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to management.v1alpha1.AssetMappingStatus.OperationType value
func (v ManagementV1alpha1AssetMappingStatusOperationType) Ptr() *ManagementV1alpha1AssetMappingStatusOperationType {
	return &v
}

type NullableManagementV1alpha1AssetMappingStatusOperationType struct {
	value *ManagementV1alpha1AssetMappingStatusOperationType
	isSet bool
}

func (v NullableManagementV1alpha1AssetMappingStatusOperationType) Get() *ManagementV1alpha1AssetMappingStatusOperationType {
	return v.value
}

func (v *NullableManagementV1alpha1AssetMappingStatusOperationType) Set(val *ManagementV1alpha1AssetMappingStatusOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1AssetMappingStatusOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1AssetMappingStatusOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1AssetMappingStatusOperationType(val *ManagementV1alpha1AssetMappingStatusOperationType) *NullableManagementV1alpha1AssetMappingStatusOperationType {
	return &NullableManagementV1alpha1AssetMappingStatusOperationType{value: val, isSet: true}
}

func (v NullableManagementV1alpha1AssetMappingStatusOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1AssetMappingStatusOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

