/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1SupportContactSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1SupportContactSpec{}

// CatalogV1SupportContactSpec struct for CatalogV1SupportContactSpec
type CatalogV1SupportContactSpec struct {
	// Email address of the Support Contact.
	Email string `json:"email"`
	// String of the E.164 format of the phone number, e.g. +11234567899
	PhoneNumber *string `json:"phoneNumber,omitempty" validate:"regexp=^\\\\+[1-9]\\\\d{1,14}$"`
	OfficeHours *CatalogV1SupportContactSpecOfficeHours `json:"officeHours,omitempty"`
	AlternativeContacts *CatalogV1SupportContactSpecAlternativeContacts `json:"alternativeContacts,omitempty"`
}

type _CatalogV1SupportContactSpec CatalogV1SupportContactSpec

// NewCatalogV1SupportContactSpec instantiates a new CatalogV1SupportContactSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1SupportContactSpec(email string) *CatalogV1SupportContactSpec {
	this := CatalogV1SupportContactSpec{}
	this.Email = email
	return &this
}

// NewCatalogV1SupportContactSpecWithDefaults instantiates a new CatalogV1SupportContactSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1SupportContactSpecWithDefaults() *CatalogV1SupportContactSpec {
	this := CatalogV1SupportContactSpec{}
	return &this
}

// GetEmail returns the Email field value
func (o *CatalogV1SupportContactSpec) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CatalogV1SupportContactSpec) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CatalogV1SupportContactSpec) SetEmail(v string) {
	o.Email = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *CatalogV1SupportContactSpec) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1SupportContactSpec) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *CatalogV1SupportContactSpec) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *CatalogV1SupportContactSpec) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetOfficeHours returns the OfficeHours field value if set, zero value otherwise.
func (o *CatalogV1SupportContactSpec) GetOfficeHours() CatalogV1SupportContactSpecOfficeHours {
	if o == nil || IsNil(o.OfficeHours) {
		var ret CatalogV1SupportContactSpecOfficeHours
		return ret
	}
	return *o.OfficeHours
}

// GetOfficeHoursOk returns a tuple with the OfficeHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1SupportContactSpec) GetOfficeHoursOk() (*CatalogV1SupportContactSpecOfficeHours, bool) {
	if o == nil || IsNil(o.OfficeHours) {
		return nil, false
	}
	return o.OfficeHours, true
}

// HasOfficeHours returns a boolean if a field has been set.
func (o *CatalogV1SupportContactSpec) HasOfficeHours() bool {
	if o != nil && !IsNil(o.OfficeHours) {
		return true
	}

	return false
}

// SetOfficeHours gets a reference to the given CatalogV1SupportContactSpecOfficeHours and assigns it to the OfficeHours field.
func (o *CatalogV1SupportContactSpec) SetOfficeHours(v CatalogV1SupportContactSpecOfficeHours) {
	o.OfficeHours = &v
}

// GetAlternativeContacts returns the AlternativeContacts field value if set, zero value otherwise.
func (o *CatalogV1SupportContactSpec) GetAlternativeContacts() CatalogV1SupportContactSpecAlternativeContacts {
	if o == nil || IsNil(o.AlternativeContacts) {
		var ret CatalogV1SupportContactSpecAlternativeContacts
		return ret
	}
	return *o.AlternativeContacts
}

// GetAlternativeContactsOk returns a tuple with the AlternativeContacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1SupportContactSpec) GetAlternativeContactsOk() (*CatalogV1SupportContactSpecAlternativeContacts, bool) {
	if o == nil || IsNil(o.AlternativeContacts) {
		return nil, false
	}
	return o.AlternativeContacts, true
}

// HasAlternativeContacts returns a boolean if a field has been set.
func (o *CatalogV1SupportContactSpec) HasAlternativeContacts() bool {
	if o != nil && !IsNil(o.AlternativeContacts) {
		return true
	}

	return false
}

// SetAlternativeContacts gets a reference to the given CatalogV1SupportContactSpecAlternativeContacts and assigns it to the AlternativeContacts field.
func (o *CatalogV1SupportContactSpec) SetAlternativeContacts(v CatalogV1SupportContactSpecAlternativeContacts) {
	o.AlternativeContacts = &v
}

func (o CatalogV1SupportContactSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1SupportContactSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.OfficeHours) {
		toSerialize["officeHours"] = o.OfficeHours
	}
	if !IsNil(o.AlternativeContacts) {
		toSerialize["alternativeContacts"] = o.AlternativeContacts
	}
	return toSerialize, nil
}

func (o *CatalogV1SupportContactSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1SupportContactSpec := _CatalogV1SupportContactSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1SupportContactSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1SupportContactSpec(varCatalogV1SupportContactSpec)

	return err
}

type NullableCatalogV1SupportContactSpec struct {
	value *CatalogV1SupportContactSpec
	isSet bool
}

func (v NullableCatalogV1SupportContactSpec) Get() *CatalogV1SupportContactSpec {
	return v.value
}

func (v *NullableCatalogV1SupportContactSpec) Set(val *CatalogV1SupportContactSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1SupportContactSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1SupportContactSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1SupportContactSpec(val *CatalogV1SupportContactSpec) *NullableCatalogV1SupportContactSpec {
	return &NullableCatalogV1SupportContactSpec{value: val, isSet: true}
}

func (v NullableCatalogV1SupportContactSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1SupportContactSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


