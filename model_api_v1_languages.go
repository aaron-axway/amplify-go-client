/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
)

// checks if the ApiV1Languages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiV1Languages{}

// ApiV1Languages Defines information about the supported languages on the resource.
type ApiV1Languages struct {
	Resource *ApiV1LanguagesResource `json:"resource,omitempty"`
	Metadata *ApiV1LanguagesMetadata `json:"metadata,omitempty"`
}

// NewApiV1Languages instantiates a new ApiV1Languages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV1Languages() *ApiV1Languages {
	this := ApiV1Languages{}
	return &this
}

// NewApiV1LanguagesWithDefaults instantiates a new ApiV1Languages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV1LanguagesWithDefaults() *ApiV1Languages {
	this := ApiV1Languages{}
	return &this
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *ApiV1Languages) GetResource() ApiV1LanguagesResource {
	if o == nil || IsNil(o.Resource) {
		var ret ApiV1LanguagesResource
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Languages) GetResourceOk() (*ApiV1LanguagesResource, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *ApiV1Languages) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given ApiV1LanguagesResource and assigns it to the Resource field.
func (o *ApiV1Languages) SetResource(v ApiV1LanguagesResource) {
	o.Resource = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ApiV1Languages) GetMetadata() ApiV1LanguagesMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ApiV1LanguagesMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Languages) GetMetadataOk() (*ApiV1LanguagesMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ApiV1Languages) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ApiV1LanguagesMetadata and assigns it to the Metadata field.
func (o *ApiV1Languages) SetMetadata(v ApiV1LanguagesMetadata) {
	o.Metadata = &v
}

func (o ApiV1Languages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiV1Languages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableApiV1Languages struct {
	value *ApiV1Languages
	isSet bool
}

func (v NullableApiV1Languages) Get() *ApiV1Languages {
	return v.value
}

func (v *NullableApiV1Languages) Set(val *ApiV1Languages) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV1Languages) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV1Languages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV1Languages(val *ApiV1Languages) *NullableApiV1Languages {
	return &NullableApiV1Languages{value: val, isSet: true}
}

func (v NullableApiV1Languages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV1Languages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


