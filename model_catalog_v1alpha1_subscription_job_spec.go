/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1SubscriptionJobSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1SubscriptionJobSpec{}

// CatalogV1alpha1SubscriptionJobSpec struct for CatalogV1alpha1SubscriptionJobSpec
type CatalogV1alpha1SubscriptionJobSpec struct {
	Action CatalogV1alpha1SubscriptionJobSpecAction `json:"action"`
	When *CatalogV1alpha1SubscriptionJobSpecWhen `json:"when,omitempty"`
	PostExecute *CatalogV1alpha1SubscriptionJobSpecPostExecute `json:"postExecute,omitempty"`
}

type _CatalogV1alpha1SubscriptionJobSpec CatalogV1alpha1SubscriptionJobSpec

// NewCatalogV1alpha1SubscriptionJobSpec instantiates a new CatalogV1alpha1SubscriptionJobSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1SubscriptionJobSpec(action CatalogV1alpha1SubscriptionJobSpecAction) *CatalogV1alpha1SubscriptionJobSpec {
	this := CatalogV1alpha1SubscriptionJobSpec{}
	this.Action = action
	return &this
}

// NewCatalogV1alpha1SubscriptionJobSpecWithDefaults instantiates a new CatalogV1alpha1SubscriptionJobSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1SubscriptionJobSpecWithDefaults() *CatalogV1alpha1SubscriptionJobSpec {
	this := CatalogV1alpha1SubscriptionJobSpec{}
	return &this
}

// GetAction returns the Action field value
func (o *CatalogV1alpha1SubscriptionJobSpec) GetAction() CatalogV1alpha1SubscriptionJobSpecAction {
	if o == nil {
		var ret CatalogV1alpha1SubscriptionJobSpecAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionJobSpec) GetActionOk() (*CatalogV1alpha1SubscriptionJobSpecAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *CatalogV1alpha1SubscriptionJobSpec) SetAction(v CatalogV1alpha1SubscriptionJobSpecAction) {
	o.Action = v
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *CatalogV1alpha1SubscriptionJobSpec) GetWhen() CatalogV1alpha1SubscriptionJobSpecWhen {
	if o == nil || IsNil(o.When) {
		var ret CatalogV1alpha1SubscriptionJobSpecWhen
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionJobSpec) GetWhenOk() (*CatalogV1alpha1SubscriptionJobSpecWhen, bool) {
	if o == nil || IsNil(o.When) {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *CatalogV1alpha1SubscriptionJobSpec) HasWhen() bool {
	if o != nil && !IsNil(o.When) {
		return true
	}

	return false
}

// SetWhen gets a reference to the given CatalogV1alpha1SubscriptionJobSpecWhen and assigns it to the When field.
func (o *CatalogV1alpha1SubscriptionJobSpec) SetWhen(v CatalogV1alpha1SubscriptionJobSpecWhen) {
	o.When = &v
}

// GetPostExecute returns the PostExecute field value if set, zero value otherwise.
func (o *CatalogV1alpha1SubscriptionJobSpec) GetPostExecute() CatalogV1alpha1SubscriptionJobSpecPostExecute {
	if o == nil || IsNil(o.PostExecute) {
		var ret CatalogV1alpha1SubscriptionJobSpecPostExecute
		return ret
	}
	return *o.PostExecute
}

// GetPostExecuteOk returns a tuple with the PostExecute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionJobSpec) GetPostExecuteOk() (*CatalogV1alpha1SubscriptionJobSpecPostExecute, bool) {
	if o == nil || IsNil(o.PostExecute) {
		return nil, false
	}
	return o.PostExecute, true
}

// HasPostExecute returns a boolean if a field has been set.
func (o *CatalogV1alpha1SubscriptionJobSpec) HasPostExecute() bool {
	if o != nil && !IsNil(o.PostExecute) {
		return true
	}

	return false
}

// SetPostExecute gets a reference to the given CatalogV1alpha1SubscriptionJobSpecPostExecute and assigns it to the PostExecute field.
func (o *CatalogV1alpha1SubscriptionJobSpec) SetPostExecute(v CatalogV1alpha1SubscriptionJobSpecPostExecute) {
	o.PostExecute = &v
}

func (o CatalogV1alpha1SubscriptionJobSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1SubscriptionJobSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.When) {
		toSerialize["when"] = o.When
	}
	if !IsNil(o.PostExecute) {
		toSerialize["postExecute"] = o.PostExecute
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1SubscriptionJobSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1SubscriptionJobSpec := _CatalogV1alpha1SubscriptionJobSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1SubscriptionJobSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1SubscriptionJobSpec(varCatalogV1alpha1SubscriptionJobSpec)

	return err
}

type NullableCatalogV1alpha1SubscriptionJobSpec struct {
	value *CatalogV1alpha1SubscriptionJobSpec
	isSet bool
}

func (v NullableCatalogV1alpha1SubscriptionJobSpec) Get() *CatalogV1alpha1SubscriptionJobSpec {
	return v.value
}

func (v *NullableCatalogV1alpha1SubscriptionJobSpec) Set(val *CatalogV1alpha1SubscriptionJobSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1SubscriptionJobSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1SubscriptionJobSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1SubscriptionJobSpec(val *CatalogV1alpha1SubscriptionJobSpec) *NullableCatalogV1alpha1SubscriptionJobSpec {
	return &NullableCatalogV1alpha1SubscriptionJobSpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1SubscriptionJobSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1SubscriptionJobSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


