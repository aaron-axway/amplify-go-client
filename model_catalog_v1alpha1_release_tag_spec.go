/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1ReleaseTagSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1ReleaseTagSpec{}

// CatalogV1alpha1ReleaseTagSpec struct for CatalogV1alpha1ReleaseTagSpec
type CatalogV1alpha1ReleaseTagSpec struct {
	// Description of the Release Tag.
	Description *string `json:"description,omitempty"`
	ReleaseType string `json:"releaseType"`
	ReleaseVersionProperties *CatalogV1alpha1ReleaseTagSpecReleaseVersionProperties `json:"releaseVersionProperties,omitempty"`
	PreviousReleases *CatalogV1alpha1ReleaseTagSpecPreviousReleases `json:"previousReleases,omitempty"`
}

type _CatalogV1alpha1ReleaseTagSpec CatalogV1alpha1ReleaseTagSpec

// NewCatalogV1alpha1ReleaseTagSpec instantiates a new CatalogV1alpha1ReleaseTagSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1ReleaseTagSpec(releaseType string) *CatalogV1alpha1ReleaseTagSpec {
	this := CatalogV1alpha1ReleaseTagSpec{}
	this.ReleaseType = releaseType
	return &this
}

// NewCatalogV1alpha1ReleaseTagSpecWithDefaults instantiates a new CatalogV1alpha1ReleaseTagSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1ReleaseTagSpecWithDefaults() *CatalogV1alpha1ReleaseTagSpec {
	this := CatalogV1alpha1ReleaseTagSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CatalogV1alpha1ReleaseTagSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ReleaseTagSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogV1alpha1ReleaseTagSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CatalogV1alpha1ReleaseTagSpec) SetDescription(v string) {
	o.Description = &v
}

// GetReleaseType returns the ReleaseType field value
func (o *CatalogV1alpha1ReleaseTagSpec) GetReleaseType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleaseType
}

// GetReleaseTypeOk returns a tuple with the ReleaseType field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ReleaseTagSpec) GetReleaseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseType, true
}

// SetReleaseType sets field value
func (o *CatalogV1alpha1ReleaseTagSpec) SetReleaseType(v string) {
	o.ReleaseType = v
}

// GetReleaseVersionProperties returns the ReleaseVersionProperties field value if set, zero value otherwise.
func (o *CatalogV1alpha1ReleaseTagSpec) GetReleaseVersionProperties() CatalogV1alpha1ReleaseTagSpecReleaseVersionProperties {
	if o == nil || IsNil(o.ReleaseVersionProperties) {
		var ret CatalogV1alpha1ReleaseTagSpecReleaseVersionProperties
		return ret
	}
	return *o.ReleaseVersionProperties
}

// GetReleaseVersionPropertiesOk returns a tuple with the ReleaseVersionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ReleaseTagSpec) GetReleaseVersionPropertiesOk() (*CatalogV1alpha1ReleaseTagSpecReleaseVersionProperties, bool) {
	if o == nil || IsNil(o.ReleaseVersionProperties) {
		return nil, false
	}
	return o.ReleaseVersionProperties, true
}

// HasReleaseVersionProperties returns a boolean if a field has been set.
func (o *CatalogV1alpha1ReleaseTagSpec) HasReleaseVersionProperties() bool {
	if o != nil && !IsNil(o.ReleaseVersionProperties) {
		return true
	}

	return false
}

// SetReleaseVersionProperties gets a reference to the given CatalogV1alpha1ReleaseTagSpecReleaseVersionProperties and assigns it to the ReleaseVersionProperties field.
func (o *CatalogV1alpha1ReleaseTagSpec) SetReleaseVersionProperties(v CatalogV1alpha1ReleaseTagSpecReleaseVersionProperties) {
	o.ReleaseVersionProperties = &v
}

// GetPreviousReleases returns the PreviousReleases field value if set, zero value otherwise.
func (o *CatalogV1alpha1ReleaseTagSpec) GetPreviousReleases() CatalogV1alpha1ReleaseTagSpecPreviousReleases {
	if o == nil || IsNil(o.PreviousReleases) {
		var ret CatalogV1alpha1ReleaseTagSpecPreviousReleases
		return ret
	}
	return *o.PreviousReleases
}

// GetPreviousReleasesOk returns a tuple with the PreviousReleases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ReleaseTagSpec) GetPreviousReleasesOk() (*CatalogV1alpha1ReleaseTagSpecPreviousReleases, bool) {
	if o == nil || IsNil(o.PreviousReleases) {
		return nil, false
	}
	return o.PreviousReleases, true
}

// HasPreviousReleases returns a boolean if a field has been set.
func (o *CatalogV1alpha1ReleaseTagSpec) HasPreviousReleases() bool {
	if o != nil && !IsNil(o.PreviousReleases) {
		return true
	}

	return false
}

// SetPreviousReleases gets a reference to the given CatalogV1alpha1ReleaseTagSpecPreviousReleases and assigns it to the PreviousReleases field.
func (o *CatalogV1alpha1ReleaseTagSpec) SetPreviousReleases(v CatalogV1alpha1ReleaseTagSpecPreviousReleases) {
	o.PreviousReleases = &v
}

func (o CatalogV1alpha1ReleaseTagSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1ReleaseTagSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["releaseType"] = o.ReleaseType
	if !IsNil(o.ReleaseVersionProperties) {
		toSerialize["releaseVersionProperties"] = o.ReleaseVersionProperties
	}
	if !IsNil(o.PreviousReleases) {
		toSerialize["previousReleases"] = o.PreviousReleases
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1ReleaseTagSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"releaseType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1ReleaseTagSpec := _CatalogV1alpha1ReleaseTagSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1ReleaseTagSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1ReleaseTagSpec(varCatalogV1alpha1ReleaseTagSpec)

	return err
}

type NullableCatalogV1alpha1ReleaseTagSpec struct {
	value *CatalogV1alpha1ReleaseTagSpec
	isSet bool
}

func (v NullableCatalogV1alpha1ReleaseTagSpec) Get() *CatalogV1alpha1ReleaseTagSpec {
	return v.value
}

func (v *NullableCatalogV1alpha1ReleaseTagSpec) Set(val *CatalogV1alpha1ReleaseTagSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ReleaseTagSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ReleaseTagSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ReleaseTagSpec(val *CatalogV1alpha1ReleaseTagSpec) *NullableCatalogV1alpha1ReleaseTagSpec {
	return &NullableCatalogV1alpha1ReleaseTagSpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ReleaseTagSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ReleaseTagSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


