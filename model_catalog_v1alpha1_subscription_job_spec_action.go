/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogV1alpha1SubscriptionJobSpecAction - struct for CatalogV1alpha1SubscriptionJobSpecAction
type CatalogV1alpha1SubscriptionJobSpecAction struct {
	CatalogV1alpha1SubscriptionJobSpecArchive *CatalogV1alpha1SubscriptionJobSpecArchive
	CatalogV1alpha1SubscriptionJobSpecPlanMigration *CatalogV1alpha1SubscriptionJobSpecPlanMigration
}

// CatalogV1alpha1SubscriptionJobSpecArchiveAsCatalogV1alpha1SubscriptionJobSpecAction is a convenience function that returns CatalogV1alpha1SubscriptionJobSpecArchive wrapped in CatalogV1alpha1SubscriptionJobSpecAction
func CatalogV1alpha1SubscriptionJobSpecArchiveAsCatalogV1alpha1SubscriptionJobSpecAction(v *CatalogV1alpha1SubscriptionJobSpecArchive) CatalogV1alpha1SubscriptionJobSpecAction {
	return CatalogV1alpha1SubscriptionJobSpecAction{
		CatalogV1alpha1SubscriptionJobSpecArchive: v,
	}
}

// CatalogV1alpha1SubscriptionJobSpecPlanMigrationAsCatalogV1alpha1SubscriptionJobSpecAction is a convenience function that returns CatalogV1alpha1SubscriptionJobSpecPlanMigration wrapped in CatalogV1alpha1SubscriptionJobSpecAction
func CatalogV1alpha1SubscriptionJobSpecPlanMigrationAsCatalogV1alpha1SubscriptionJobSpecAction(v *CatalogV1alpha1SubscriptionJobSpecPlanMigration) CatalogV1alpha1SubscriptionJobSpecAction {
	return CatalogV1alpha1SubscriptionJobSpecAction{
		CatalogV1alpha1SubscriptionJobSpecPlanMigration: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogV1alpha1SubscriptionJobSpecAction) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogV1alpha1SubscriptionJobSpecArchive
	err = newStrictDecoder(data).Decode(&dst.CatalogV1alpha1SubscriptionJobSpecArchive)
	if err == nil {
		jsonCatalogV1alpha1SubscriptionJobSpecArchive, _ := json.Marshal(dst.CatalogV1alpha1SubscriptionJobSpecArchive)
		if string(jsonCatalogV1alpha1SubscriptionJobSpecArchive) == "{}" { // empty struct
			dst.CatalogV1alpha1SubscriptionJobSpecArchive = nil
		} else {
			if err = validator.Validate(dst.CatalogV1alpha1SubscriptionJobSpecArchive); err != nil {
				dst.CatalogV1alpha1SubscriptionJobSpecArchive = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1alpha1SubscriptionJobSpecArchive = nil
	}

	// try to unmarshal data into CatalogV1alpha1SubscriptionJobSpecPlanMigration
	err = newStrictDecoder(data).Decode(&dst.CatalogV1alpha1SubscriptionJobSpecPlanMigration)
	if err == nil {
		jsonCatalogV1alpha1SubscriptionJobSpecPlanMigration, _ := json.Marshal(dst.CatalogV1alpha1SubscriptionJobSpecPlanMigration)
		if string(jsonCatalogV1alpha1SubscriptionJobSpecPlanMigration) == "{}" { // empty struct
			dst.CatalogV1alpha1SubscriptionJobSpecPlanMigration = nil
		} else {
			if err = validator.Validate(dst.CatalogV1alpha1SubscriptionJobSpecPlanMigration); err != nil {
				dst.CatalogV1alpha1SubscriptionJobSpecPlanMigration = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogV1alpha1SubscriptionJobSpecPlanMigration = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogV1alpha1SubscriptionJobSpecArchive = nil
		dst.CatalogV1alpha1SubscriptionJobSpecPlanMigration = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogV1alpha1SubscriptionJobSpecAction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogV1alpha1SubscriptionJobSpecAction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogV1alpha1SubscriptionJobSpecAction) MarshalJSON() ([]byte, error) {
	if src.CatalogV1alpha1SubscriptionJobSpecArchive != nil {
		return json.Marshal(&src.CatalogV1alpha1SubscriptionJobSpecArchive)
	}

	if src.CatalogV1alpha1SubscriptionJobSpecPlanMigration != nil {
		return json.Marshal(&src.CatalogV1alpha1SubscriptionJobSpecPlanMigration)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogV1alpha1SubscriptionJobSpecAction) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogV1alpha1SubscriptionJobSpecArchive != nil {
		return obj.CatalogV1alpha1SubscriptionJobSpecArchive
	}

	if obj.CatalogV1alpha1SubscriptionJobSpecPlanMigration != nil {
		return obj.CatalogV1alpha1SubscriptionJobSpecPlanMigration
	}

	// all schemas are nil
	return nil
}

type NullableCatalogV1alpha1SubscriptionJobSpecAction struct {
	value *CatalogV1alpha1SubscriptionJobSpecAction
	isSet bool
}

func (v NullableCatalogV1alpha1SubscriptionJobSpecAction) Get() *CatalogV1alpha1SubscriptionJobSpecAction {
	return v.value
}

func (v *NullableCatalogV1alpha1SubscriptionJobSpecAction) Set(val *CatalogV1alpha1SubscriptionJobSpecAction) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1SubscriptionJobSpecAction) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1SubscriptionJobSpecAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1SubscriptionJobSpecAction(val *CatalogV1alpha1SubscriptionJobSpecAction) *NullableCatalogV1alpha1SubscriptionJobSpecAction {
	return &NullableCatalogV1alpha1SubscriptionJobSpecAction{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1SubscriptionJobSpecAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1SubscriptionJobSpecAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


