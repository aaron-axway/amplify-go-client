/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1ApplicationMarketplaceResourceOwner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1ApplicationMarketplaceResourceOwner{}

// CatalogV1alpha1ApplicationMarketplaceResourceOwner Owner of the Application.
type CatalogV1alpha1ApplicationMarketplaceResourceOwner struct {
	// The type of the owner.
	Type *string `json:"type,omitempty"`
	// Id of the owner of the resource.
	Id *string `json:"id,omitempty"`
	Organization CatalogV1alpha1ApplicationMarketplaceResourceOwnerOrganization `json:"organization"`
}

type _CatalogV1alpha1ApplicationMarketplaceResourceOwner CatalogV1alpha1ApplicationMarketplaceResourceOwner

// NewCatalogV1alpha1ApplicationMarketplaceResourceOwner instantiates a new CatalogV1alpha1ApplicationMarketplaceResourceOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1ApplicationMarketplaceResourceOwner(organization CatalogV1alpha1ApplicationMarketplaceResourceOwnerOrganization) *CatalogV1alpha1ApplicationMarketplaceResourceOwner {
	this := CatalogV1alpha1ApplicationMarketplaceResourceOwner{}
	this.Organization = organization
	return &this
}

// NewCatalogV1alpha1ApplicationMarketplaceResourceOwnerWithDefaults instantiates a new CatalogV1alpha1ApplicationMarketplaceResourceOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1ApplicationMarketplaceResourceOwnerWithDefaults() *CatalogV1alpha1ApplicationMarketplaceResourceOwner {
	this := CatalogV1alpha1ApplicationMarketplaceResourceOwner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) SetId(v string) {
	o.Id = &v
}

// GetOrganization returns the Organization field value
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) GetOrganization() CatalogV1alpha1ApplicationMarketplaceResourceOwnerOrganization {
	if o == nil {
		var ret CatalogV1alpha1ApplicationMarketplaceResourceOwnerOrganization
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) GetOrganizationOk() (*CatalogV1alpha1ApplicationMarketplaceResourceOwnerOrganization, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) SetOrganization(v CatalogV1alpha1ApplicationMarketplaceResourceOwnerOrganization) {
	o.Organization = v
}

func (o CatalogV1alpha1ApplicationMarketplaceResourceOwner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1ApplicationMarketplaceResourceOwner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["organization"] = o.Organization
	return toSerialize, nil
}

func (o *CatalogV1alpha1ApplicationMarketplaceResourceOwner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organization",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1ApplicationMarketplaceResourceOwner := _CatalogV1alpha1ApplicationMarketplaceResourceOwner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1ApplicationMarketplaceResourceOwner)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1ApplicationMarketplaceResourceOwner(varCatalogV1alpha1ApplicationMarketplaceResourceOwner)

	return err
}

type NullableCatalogV1alpha1ApplicationMarketplaceResourceOwner struct {
	value *CatalogV1alpha1ApplicationMarketplaceResourceOwner
	isSet bool
}

func (v NullableCatalogV1alpha1ApplicationMarketplaceResourceOwner) Get() *CatalogV1alpha1ApplicationMarketplaceResourceOwner {
	return v.value
}

func (v *NullableCatalogV1alpha1ApplicationMarketplaceResourceOwner) Set(val *CatalogV1alpha1ApplicationMarketplaceResourceOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1ApplicationMarketplaceResourceOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1ApplicationMarketplaceResourceOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1ApplicationMarketplaceResourceOwner(val *CatalogV1alpha1ApplicationMarketplaceResourceOwner) *NullableCatalogV1alpha1ApplicationMarketplaceResourceOwner {
	return &NullableCatalogV1alpha1ApplicationMarketplaceResourceOwner{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1ApplicationMarketplaceResourceOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1ApplicationMarketplaceResourceOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


