/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ManagementV1alpha1K8SClusterSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1K8SClusterSpec{}

// ManagementV1alpha1K8SClusterSpec struct for ManagementV1alpha1K8SClusterSpec
type ManagementV1alpha1K8SClusterSpec struct {
	Mesh *string `json:"mesh,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManagementV1alpha1K8SClusterSpec ManagementV1alpha1K8SClusterSpec

// NewManagementV1alpha1K8SClusterSpec instantiates a new ManagementV1alpha1K8SClusterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1K8SClusterSpec() *ManagementV1alpha1K8SClusterSpec {
	this := ManagementV1alpha1K8SClusterSpec{}
	return &this
}

// NewManagementV1alpha1K8SClusterSpecWithDefaults instantiates a new ManagementV1alpha1K8SClusterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1K8SClusterSpecWithDefaults() *ManagementV1alpha1K8SClusterSpec {
	this := ManagementV1alpha1K8SClusterSpec{}
	return &this
}

// GetMesh returns the Mesh field value if set, zero value otherwise.
func (o *ManagementV1alpha1K8SClusterSpec) GetMesh() string {
	if o == nil || IsNil(o.Mesh) {
		var ret string
		return ret
	}
	return *o.Mesh
}

// GetMeshOk returns a tuple with the Mesh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1K8SClusterSpec) GetMeshOk() (*string, bool) {
	if o == nil || IsNil(o.Mesh) {
		return nil, false
	}
	return o.Mesh, true
}

// HasMesh returns a boolean if a field has been set.
func (o *ManagementV1alpha1K8SClusterSpec) HasMesh() bool {
	if o != nil && !IsNil(o.Mesh) {
		return true
	}

	return false
}

// SetMesh gets a reference to the given string and assigns it to the Mesh field.
func (o *ManagementV1alpha1K8SClusterSpec) SetMesh(v string) {
	o.Mesh = &v
}

func (o ManagementV1alpha1K8SClusterSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1K8SClusterSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mesh) {
		toSerialize["mesh"] = o.Mesh
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManagementV1alpha1K8SClusterSpec) UnmarshalJSON(data []byte) (err error) {
	varManagementV1alpha1K8SClusterSpec := _ManagementV1alpha1K8SClusterSpec{}

	err = json.Unmarshal(data, &varManagementV1alpha1K8SClusterSpec)

	if err != nil {
		return err
	}

	*o = ManagementV1alpha1K8SClusterSpec(varManagementV1alpha1K8SClusterSpec)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mesh")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManagementV1alpha1K8SClusterSpec struct {
	value *ManagementV1alpha1K8SClusterSpec
	isSet bool
}

func (v NullableManagementV1alpha1K8SClusterSpec) Get() *ManagementV1alpha1K8SClusterSpec {
	return v.value
}

func (v *NullableManagementV1alpha1K8SClusterSpec) Set(val *ManagementV1alpha1K8SClusterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1K8SClusterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1K8SClusterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1K8SClusterSpec(val *ManagementV1alpha1K8SClusterSpec) *NullableManagementV1alpha1K8SClusterSpec {
	return &NullableManagementV1alpha1K8SClusterSpec{value: val, isSet: true}
}

func (v NullableManagementV1alpha1K8SClusterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1K8SClusterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


