/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amplify

import (
	"encoding/json"
)

// checks if the DefinitionsV1alpha1ResourceDefinitionSpecSubResources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinitionsV1alpha1ResourceDefinitionSpecSubResources{}

// DefinitionsV1alpha1ResourceDefinitionSpecSubResources Describes the subresources that the current resource might have.
type DefinitionsV1alpha1ResourceDefinitionSpecSubResources struct {
	Names []string `json:"names,omitempty"`
}

// NewDefinitionsV1alpha1ResourceDefinitionSpecSubResources instantiates a new DefinitionsV1alpha1ResourceDefinitionSpecSubResources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionsV1alpha1ResourceDefinitionSpecSubResources() *DefinitionsV1alpha1ResourceDefinitionSpecSubResources {
	this := DefinitionsV1alpha1ResourceDefinitionSpecSubResources{}
	return &this
}

// NewDefinitionsV1alpha1ResourceDefinitionSpecSubResourcesWithDefaults instantiates a new DefinitionsV1alpha1ResourceDefinitionSpecSubResources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionsV1alpha1ResourceDefinitionSpecSubResourcesWithDefaults() *DefinitionsV1alpha1ResourceDefinitionSpecSubResources {
	this := DefinitionsV1alpha1ResourceDefinitionSpecSubResources{}
	return &this
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecSubResources) GetNames() []string {
	if o == nil || IsNil(o.Names) {
		var ret []string
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecSubResources) GetNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecSubResources) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *DefinitionsV1alpha1ResourceDefinitionSpecSubResources) SetNames(v []string) {
	o.Names = v
}

func (o DefinitionsV1alpha1ResourceDefinitionSpecSubResources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinitionsV1alpha1ResourceDefinitionSpecSubResources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	return toSerialize, nil
}

type NullableDefinitionsV1alpha1ResourceDefinitionSpecSubResources struct {
	value *DefinitionsV1alpha1ResourceDefinitionSpecSubResources
	isSet bool
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionSpecSubResources) Get() *DefinitionsV1alpha1ResourceDefinitionSpecSubResources {
	return v.value
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionSpecSubResources) Set(val *DefinitionsV1alpha1ResourceDefinitionSpecSubResources) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionSpecSubResources) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionSpecSubResources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionsV1alpha1ResourceDefinitionSpecSubResources(val *DefinitionsV1alpha1ResourceDefinitionSpecSubResources) *NullableDefinitionsV1alpha1ResourceDefinitionSpecSubResources {
	return &NullableDefinitionsV1alpha1ResourceDefinitionSpecSubResources{value: val, isSet: true}
}

func (v NullableDefinitionsV1alpha1ResourceDefinitionSpecSubResources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionsV1alpha1ResourceDefinitionSpecSubResources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


