/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ManagementV1alpha1DiscoveryAgentSpecLogging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementV1alpha1DiscoveryAgentSpecLogging{}

// ManagementV1alpha1DiscoveryAgentSpecLogging Logging config
type ManagementV1alpha1DiscoveryAgentSpecLogging struct {
	// Defines the log level.
	Level *string `json:"level,omitempty"`
}

// NewManagementV1alpha1DiscoveryAgentSpecLogging instantiates a new ManagementV1alpha1DiscoveryAgentSpecLogging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementV1alpha1DiscoveryAgentSpecLogging() *ManagementV1alpha1DiscoveryAgentSpecLogging {
	this := ManagementV1alpha1DiscoveryAgentSpecLogging{}
	return &this
}

// NewManagementV1alpha1DiscoveryAgentSpecLoggingWithDefaults instantiates a new ManagementV1alpha1DiscoveryAgentSpecLogging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementV1alpha1DiscoveryAgentSpecLoggingWithDefaults() *ManagementV1alpha1DiscoveryAgentSpecLogging {
	this := ManagementV1alpha1DiscoveryAgentSpecLogging{}
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *ManagementV1alpha1DiscoveryAgentSpecLogging) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementV1alpha1DiscoveryAgentSpecLogging) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *ManagementV1alpha1DiscoveryAgentSpecLogging) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *ManagementV1alpha1DiscoveryAgentSpecLogging) SetLevel(v string) {
	o.Level = &v
}

func (o ManagementV1alpha1DiscoveryAgentSpecLogging) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementV1alpha1DiscoveryAgentSpecLogging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	return toSerialize, nil
}

type NullableManagementV1alpha1DiscoveryAgentSpecLogging struct {
	value *ManagementV1alpha1DiscoveryAgentSpecLogging
	isSet bool
}

func (v NullableManagementV1alpha1DiscoveryAgentSpecLogging) Get() *ManagementV1alpha1DiscoveryAgentSpecLogging {
	return v.value
}

func (v *NullableManagementV1alpha1DiscoveryAgentSpecLogging) Set(val *ManagementV1alpha1DiscoveryAgentSpecLogging) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementV1alpha1DiscoveryAgentSpecLogging) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementV1alpha1DiscoveryAgentSpecLogging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementV1alpha1DiscoveryAgentSpecLogging(val *ManagementV1alpha1DiscoveryAgentSpecLogging) *NullableManagementV1alpha1DiscoveryAgentSpecLogging {
	return &NullableManagementV1alpha1DiscoveryAgentSpecLogging{value: val, isSet: true}
}

func (v NullableManagementV1alpha1DiscoveryAgentSpecLogging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementV1alpha1DiscoveryAgentSpecLogging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


