/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1AssetSpecAutoRelease type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1AssetSpecAutoRelease{}

// CatalogV1alpha1AssetSpecAutoRelease Defines if an asset should create releases everytime there is an update to the resources.
type CatalogV1alpha1AssetSpecAutoRelease struct {
	ReleaseType string `json:"releaseType"`
	// Set true to suspend auto-release until asset state changes to active or deprecated. This property will be automatically removed once activated. 
	RequiresInitialActivation *bool `json:"requiresInitialActivation,omitempty"`
	PreviousReleases *CatalogV1alpha1AssetSpecAutoReleasePreviousReleases `json:"previousReleases,omitempty"`
}

type _CatalogV1alpha1AssetSpecAutoRelease CatalogV1alpha1AssetSpecAutoRelease

// NewCatalogV1alpha1AssetSpecAutoRelease instantiates a new CatalogV1alpha1AssetSpecAutoRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1AssetSpecAutoRelease(releaseType string) *CatalogV1alpha1AssetSpecAutoRelease {
	this := CatalogV1alpha1AssetSpecAutoRelease{}
	this.ReleaseType = releaseType
	return &this
}

// NewCatalogV1alpha1AssetSpecAutoReleaseWithDefaults instantiates a new CatalogV1alpha1AssetSpecAutoRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1AssetSpecAutoReleaseWithDefaults() *CatalogV1alpha1AssetSpecAutoRelease {
	this := CatalogV1alpha1AssetSpecAutoRelease{}
	return &this
}

// GetReleaseType returns the ReleaseType field value
func (o *CatalogV1alpha1AssetSpecAutoRelease) GetReleaseType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleaseType
}

// GetReleaseTypeOk returns a tuple with the ReleaseType field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetSpecAutoRelease) GetReleaseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseType, true
}

// SetReleaseType sets field value
func (o *CatalogV1alpha1AssetSpecAutoRelease) SetReleaseType(v string) {
	o.ReleaseType = v
}

// GetRequiresInitialActivation returns the RequiresInitialActivation field value if set, zero value otherwise.
func (o *CatalogV1alpha1AssetSpecAutoRelease) GetRequiresInitialActivation() bool {
	if o == nil || IsNil(o.RequiresInitialActivation) {
		var ret bool
		return ret
	}
	return *o.RequiresInitialActivation
}

// GetRequiresInitialActivationOk returns a tuple with the RequiresInitialActivation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetSpecAutoRelease) GetRequiresInitialActivationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresInitialActivation) {
		return nil, false
	}
	return o.RequiresInitialActivation, true
}

// HasRequiresInitialActivation returns a boolean if a field has been set.
func (o *CatalogV1alpha1AssetSpecAutoRelease) HasRequiresInitialActivation() bool {
	if o != nil && !IsNil(o.RequiresInitialActivation) {
		return true
	}

	return false
}

// SetRequiresInitialActivation gets a reference to the given bool and assigns it to the RequiresInitialActivation field.
func (o *CatalogV1alpha1AssetSpecAutoRelease) SetRequiresInitialActivation(v bool) {
	o.RequiresInitialActivation = &v
}

// GetPreviousReleases returns the PreviousReleases field value if set, zero value otherwise.
func (o *CatalogV1alpha1AssetSpecAutoRelease) GetPreviousReleases() CatalogV1alpha1AssetSpecAutoReleasePreviousReleases {
	if o == nil || IsNil(o.PreviousReleases) {
		var ret CatalogV1alpha1AssetSpecAutoReleasePreviousReleases
		return ret
	}
	return *o.PreviousReleases
}

// GetPreviousReleasesOk returns a tuple with the PreviousReleases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1AssetSpecAutoRelease) GetPreviousReleasesOk() (*CatalogV1alpha1AssetSpecAutoReleasePreviousReleases, bool) {
	if o == nil || IsNil(o.PreviousReleases) {
		return nil, false
	}
	return o.PreviousReleases, true
}

// HasPreviousReleases returns a boolean if a field has been set.
func (o *CatalogV1alpha1AssetSpecAutoRelease) HasPreviousReleases() bool {
	if o != nil && !IsNil(o.PreviousReleases) {
		return true
	}

	return false
}

// SetPreviousReleases gets a reference to the given CatalogV1alpha1AssetSpecAutoReleasePreviousReleases and assigns it to the PreviousReleases field.
func (o *CatalogV1alpha1AssetSpecAutoRelease) SetPreviousReleases(v CatalogV1alpha1AssetSpecAutoReleasePreviousReleases) {
	o.PreviousReleases = &v
}

func (o CatalogV1alpha1AssetSpecAutoRelease) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1AssetSpecAutoRelease) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["releaseType"] = o.ReleaseType
	if !IsNil(o.RequiresInitialActivation) {
		toSerialize["requiresInitialActivation"] = o.RequiresInitialActivation
	}
	if !IsNil(o.PreviousReleases) {
		toSerialize["previousReleases"] = o.PreviousReleases
	}
	return toSerialize, nil
}

func (o *CatalogV1alpha1AssetSpecAutoRelease) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"releaseType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1AssetSpecAutoRelease := _CatalogV1alpha1AssetSpecAutoRelease{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1AssetSpecAutoRelease)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1AssetSpecAutoRelease(varCatalogV1alpha1AssetSpecAutoRelease)

	return err
}

type NullableCatalogV1alpha1AssetSpecAutoRelease struct {
	value *CatalogV1alpha1AssetSpecAutoRelease
	isSet bool
}

func (v NullableCatalogV1alpha1AssetSpecAutoRelease) Get() *CatalogV1alpha1AssetSpecAutoRelease {
	return v.value
}

func (v *NullableCatalogV1alpha1AssetSpecAutoRelease) Set(val *CatalogV1alpha1AssetSpecAutoRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1AssetSpecAutoRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1AssetSpecAutoRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1AssetSpecAutoRelease(val *CatalogV1alpha1AssetSpecAutoRelease) *NullableCatalogV1alpha1AssetSpecAutoRelease {
	return &NullableCatalogV1alpha1AssetSpecAutoRelease{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1AssetSpecAutoRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1AssetSpecAutoRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


