/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiV1Metadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiV1Metadata{}

// ApiV1Metadata Metadata that all server resources have. Data is generated by the server.
type ApiV1Metadata struct {
	// Internal id of the resource.
	Id *string `json:"id,omitempty"`
	Audit *ApiV1AuditMetadata `json:"audit,omitempty"`
	Scope *ApiV1MetadataScope `json:"scope,omitempty"`
	// Access Control Lists for this resource.
	Acls []ApiV1Acl `json:"acls,omitempty"`
	// Internal version of this object that can be used by clients to determine when objects have changed.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	References []ApiV1Reference `json:"references,omitempty"`
	DeletedReferences []ApiV1Reference `json:"deletedReferences,omitempty"`
	// Defines the state of the resource. If present, indicates if the resource is in Deleting state.
	State *string `json:"state,omitempty"`
	// The URL representing this resource object.
	SelfLink *string `json:"selfLink,omitempty"`
}

// NewApiV1Metadata instantiates a new ApiV1Metadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV1Metadata() *ApiV1Metadata {
	this := ApiV1Metadata{}
	return &this
}

// NewApiV1MetadataWithDefaults instantiates a new ApiV1Metadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV1MetadataWithDefaults() *ApiV1Metadata {
	this := ApiV1Metadata{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiV1Metadata) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Metadata) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiV1Metadata) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiV1Metadata) SetId(v string) {
	o.Id = &v
}

// GetAudit returns the Audit field value if set, zero value otherwise.
func (o *ApiV1Metadata) GetAudit() ApiV1AuditMetadata {
	if o == nil || IsNil(o.Audit) {
		var ret ApiV1AuditMetadata
		return ret
	}
	return *o.Audit
}

// GetAuditOk returns a tuple with the Audit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Metadata) GetAuditOk() (*ApiV1AuditMetadata, bool) {
	if o == nil || IsNil(o.Audit) {
		return nil, false
	}
	return o.Audit, true
}

// HasAudit returns a boolean if a field has been set.
func (o *ApiV1Metadata) HasAudit() bool {
	if o != nil && !IsNil(o.Audit) {
		return true
	}

	return false
}

// SetAudit gets a reference to the given ApiV1AuditMetadata and assigns it to the Audit field.
func (o *ApiV1Metadata) SetAudit(v ApiV1AuditMetadata) {
	o.Audit = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ApiV1Metadata) GetScope() ApiV1MetadataScope {
	if o == nil || IsNil(o.Scope) {
		var ret ApiV1MetadataScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Metadata) GetScopeOk() (*ApiV1MetadataScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ApiV1Metadata) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given ApiV1MetadataScope and assigns it to the Scope field.
func (o *ApiV1Metadata) SetScope(v ApiV1MetadataScope) {
	o.Scope = &v
}

// GetAcls returns the Acls field value if set, zero value otherwise.
func (o *ApiV1Metadata) GetAcls() []ApiV1Acl {
	if o == nil || IsNil(o.Acls) {
		var ret []ApiV1Acl
		return ret
	}
	return o.Acls
}

// GetAclsOk returns a tuple with the Acls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Metadata) GetAclsOk() ([]ApiV1Acl, bool) {
	if o == nil || IsNil(o.Acls) {
		return nil, false
	}
	return o.Acls, true
}

// HasAcls returns a boolean if a field has been set.
func (o *ApiV1Metadata) HasAcls() bool {
	if o != nil && !IsNil(o.Acls) {
		return true
	}

	return false
}

// SetAcls gets a reference to the given []ApiV1Acl and assigns it to the Acls field.
func (o *ApiV1Metadata) SetAcls(v []ApiV1Acl) {
	o.Acls = v
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *ApiV1Metadata) GetResourceVersion() string {
	if o == nil || IsNil(o.ResourceVersion) {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Metadata) GetResourceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceVersion) {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *ApiV1Metadata) HasResourceVersion() bool {
	if o != nil && !IsNil(o.ResourceVersion) {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *ApiV1Metadata) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *ApiV1Metadata) GetReferences() []ApiV1Reference {
	if o == nil || IsNil(o.References) {
		var ret []ApiV1Reference
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Metadata) GetReferencesOk() ([]ApiV1Reference, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *ApiV1Metadata) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []ApiV1Reference and assigns it to the References field.
func (o *ApiV1Metadata) SetReferences(v []ApiV1Reference) {
	o.References = v
}

// GetDeletedReferences returns the DeletedReferences field value if set, zero value otherwise.
func (o *ApiV1Metadata) GetDeletedReferences() []ApiV1Reference {
	if o == nil || IsNil(o.DeletedReferences) {
		var ret []ApiV1Reference
		return ret
	}
	return o.DeletedReferences
}

// GetDeletedReferencesOk returns a tuple with the DeletedReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Metadata) GetDeletedReferencesOk() ([]ApiV1Reference, bool) {
	if o == nil || IsNil(o.DeletedReferences) {
		return nil, false
	}
	return o.DeletedReferences, true
}

// HasDeletedReferences returns a boolean if a field has been set.
func (o *ApiV1Metadata) HasDeletedReferences() bool {
	if o != nil && !IsNil(o.DeletedReferences) {
		return true
	}

	return false
}

// SetDeletedReferences gets a reference to the given []ApiV1Reference and assigns it to the DeletedReferences field.
func (o *ApiV1Metadata) SetDeletedReferences(v []ApiV1Reference) {
	o.DeletedReferences = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ApiV1Metadata) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Metadata) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ApiV1Metadata) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ApiV1Metadata) SetState(v string) {
	o.State = &v
}

// GetSelfLink returns the SelfLink field value if set, zero value otherwise.
func (o *ApiV1Metadata) GetSelfLink() string {
	if o == nil || IsNil(o.SelfLink) {
		var ret string
		return ret
	}
	return *o.SelfLink
}

// GetSelfLinkOk returns a tuple with the SelfLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiV1Metadata) GetSelfLinkOk() (*string, bool) {
	if o == nil || IsNil(o.SelfLink) {
		return nil, false
	}
	return o.SelfLink, true
}

// HasSelfLink returns a boolean if a field has been set.
func (o *ApiV1Metadata) HasSelfLink() bool {
	if o != nil && !IsNil(o.SelfLink) {
		return true
	}

	return false
}

// SetSelfLink gets a reference to the given string and assigns it to the SelfLink field.
func (o *ApiV1Metadata) SetSelfLink(v string) {
	o.SelfLink = &v
}

func (o ApiV1Metadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiV1Metadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Audit) {
		toSerialize["audit"] = o.Audit
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Acls) {
		toSerialize["acls"] = o.Acls
	}
	if !IsNil(o.ResourceVersion) {
		toSerialize["resourceVersion"] = o.ResourceVersion
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.DeletedReferences) {
		toSerialize["deletedReferences"] = o.DeletedReferences
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.SelfLink) {
		toSerialize["selfLink"] = o.SelfLink
	}
	return toSerialize, nil
}

type NullableApiV1Metadata struct {
	value *ApiV1Metadata
	isSet bool
}

func (v NullableApiV1Metadata) Get() *ApiV1Metadata {
	return v.value
}

func (v *NullableApiV1Metadata) Set(val *ApiV1Metadata) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV1Metadata) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV1Metadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV1Metadata(val *ApiV1Metadata) *NullableApiV1Metadata {
	return &NullableApiV1Metadata{value: val, isSet: true}
}

func (v NullableApiV1Metadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV1Metadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


