/*
AMPLIFY Central API v0.347

APIs to manage AMPLIFY Central configuration resources.

API version: 0.347.0
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogV1alpha1SubscriptionSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogV1alpha1SubscriptionSpec{}

// CatalogV1alpha1SubscriptionSpec struct for CatalogV1alpha1SubscriptionSpec
type CatalogV1alpha1SubscriptionSpec struct {
	// Data matching the subscription definition schema set on the subscribed plan.
	Data map[string]interface{} `json:"data,omitempty"`
	// Schema snapshot from the subscription definition when the subscription got created.
	Schema map[string]interface{} `json:"schema,omitempty"`
	// Reference to Product resource
	Product string `json:"product"`
	Plan CatalogV1alpha1SubscriptionSpecPlan `json:"plan"`
}

type _CatalogV1alpha1SubscriptionSpec CatalogV1alpha1SubscriptionSpec

// NewCatalogV1alpha1SubscriptionSpec instantiates a new CatalogV1alpha1SubscriptionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogV1alpha1SubscriptionSpec(product string, plan CatalogV1alpha1SubscriptionSpecPlan) *CatalogV1alpha1SubscriptionSpec {
	this := CatalogV1alpha1SubscriptionSpec{}
	this.Product = product
	this.Plan = plan
	return &this
}

// NewCatalogV1alpha1SubscriptionSpecWithDefaults instantiates a new CatalogV1alpha1SubscriptionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogV1alpha1SubscriptionSpecWithDefaults() *CatalogV1alpha1SubscriptionSpec {
	this := CatalogV1alpha1SubscriptionSpec{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CatalogV1alpha1SubscriptionSpec) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionSpec) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CatalogV1alpha1SubscriptionSpec) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *CatalogV1alpha1SubscriptionSpec) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *CatalogV1alpha1SubscriptionSpec) GetSchema() map[string]interface{} {
	if o == nil || IsNil(o.Schema) {
		var ret map[string]interface{}
		return ret
	}
	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionSpec) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Schema) {
		return map[string]interface{}{}, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *CatalogV1alpha1SubscriptionSpec) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given map[string]interface{} and assigns it to the Schema field.
func (o *CatalogV1alpha1SubscriptionSpec) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

// GetProduct returns the Product field value
func (o *CatalogV1alpha1SubscriptionSpec) GetProduct() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionSpec) GetProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *CatalogV1alpha1SubscriptionSpec) SetProduct(v string) {
	o.Product = v
}

// GetPlan returns the Plan field value
func (o *CatalogV1alpha1SubscriptionSpec) GetPlan() CatalogV1alpha1SubscriptionSpecPlan {
	if o == nil {
		var ret CatalogV1alpha1SubscriptionSpecPlan
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *CatalogV1alpha1SubscriptionSpec) GetPlanOk() (*CatalogV1alpha1SubscriptionSpecPlan, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *CatalogV1alpha1SubscriptionSpec) SetPlan(v CatalogV1alpha1SubscriptionSpecPlan) {
	o.Plan = v
}

func (o CatalogV1alpha1SubscriptionSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogV1alpha1SubscriptionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	toSerialize["product"] = o.Product
	toSerialize["plan"] = o.Plan
	return toSerialize, nil
}

func (o *CatalogV1alpha1SubscriptionSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product",
		"plan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogV1alpha1SubscriptionSpec := _CatalogV1alpha1SubscriptionSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogV1alpha1SubscriptionSpec)

	if err != nil {
		return err
	}

	*o = CatalogV1alpha1SubscriptionSpec(varCatalogV1alpha1SubscriptionSpec)

	return err
}

type NullableCatalogV1alpha1SubscriptionSpec struct {
	value *CatalogV1alpha1SubscriptionSpec
	isSet bool
}

func (v NullableCatalogV1alpha1SubscriptionSpec) Get() *CatalogV1alpha1SubscriptionSpec {
	return v.value
}

func (v *NullableCatalogV1alpha1SubscriptionSpec) Set(val *CatalogV1alpha1SubscriptionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogV1alpha1SubscriptionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogV1alpha1SubscriptionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogV1alpha1SubscriptionSpec(val *CatalogV1alpha1SubscriptionSpec) *NullableCatalogV1alpha1SubscriptionSpec {
	return &NullableCatalogV1alpha1SubscriptionSpec{value: val, isSet: true}
}

func (v NullableCatalogV1alpha1SubscriptionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogV1alpha1SubscriptionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


